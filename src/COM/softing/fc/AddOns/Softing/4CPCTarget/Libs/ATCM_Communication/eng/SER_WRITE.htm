<html>
<head>
<title>SER_WRITE</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" href="Lib.css"></head>

<body bgcolor="#FFFFCC">
<h2>SER_WRITE </h2>
<p>Sends data to a remote partner.</p>
<h3>Interface definition</h3>
<pre class="preforma">FUNCTION_BLOCK SER_WRITE                  
VAR_INPUT                                                  
    REQ    : BOOL R_EDGE := FALSE;                        
    ID     : COMM_CHANNEL;                  
    SD_1   : BYTE_STRING ;           
END_VAR                                                    
                                                        
VAR_OUTPUT                                                 
    DONE   : BOOL;               
    ERROR  : BOOL;         
    STATUS : DINT;                 
END_VAR</pre>
<h3>Parameters</h3>
<h3>INPUT</h3>
<dl> 
  <dt><b>REQ</b></dt>
  <dd>Value of type <i><b>BOOL</b></i>.<br>
    Initializes the sending of a message.<br>
    Possible values:<br>
    <i><b>TRUE</b></i>: Message is sent.<br>
    <i><b>FALSE</b></i>: Message is not sent.<br>
    Default value is <i><b>FALSE</b></i>.<br>
    After a message was sent, <i><b>REQ</b></i> has to be set to <i><b>FALSE</b></i> 
    before an other message may be sent with <font face="Courier New, Courier, mono">REQ 
    := TRUE</font> . </dd>
  <dt><b>ID</b></dt>
  <dd>Instance of the structure <a href="COMM_CHANNEL.htm"><i><b>COMM_CHANNEL</b></i></a>.<br>
    Identifies the connection by which a message is to be sent. </dd>
  <dt><b>SD_1</b></dt>
  <dd>Instance of the structure <i><b><a href="BYTE_STRING.htm">BYTE_STRING</a></b></i><br>
    Contains the message to be send in from of a bytestring. <br>
    Use the function <a href="BYTE_STRING_INIT.htm"><i><b>BYTE_STRING_INIT</b></i></a> 
    in order to initialize the bytestring with a value.</dd>
</dl>
<h3>OUTPUT</h3>
<dl> 
  <dt><b>DONE</b></dt>
  <dd>Value of type <i><b>BOOL</b></i>.<br>
    Signals whether the operation was carried out successfully or not.<br>
    Possible values:<br>
    <i><b>TRUE</b></i>: Operation was carried out.<br>
    <i><b>FALSE</b></i>: Operation is not carried out yet.</dd>
  <dt><b>ERROR</b></dt>
  <dd>Value of type <i><b>BOOL</b></i>.<br>
    Signals the error state.<br>
    Possible values:<br>
    <i><b>TRUE</b></i>: An error occurred.<br>
    <i><b>FALSE</b></i>: No error occurred.</dd>
  <dt><b>STATUS</b></dt>
  <dd>Value of type <i><b>DINT</b></i>.<br>
    Contains a status code. <br>
    Possible values are defined within the <a href="ConstState.htm">state constants</a>. 
  </dd>
</dl>
<h3>Description</h3>
<p>The call of an instance of<i><b> SER_WRITE</b></i> sends a bytestring via the 
  connection specified by the parameter <i><b>ID</b></i>. The connection is represented 
  by an instance of the structure <i><b>COMM_PARTNER</b></i>. This instance is 
  generated automatically when a connection is being established with <a href="CONNECT.htm"><i><b>CONNECT</b></i></a> 
  and is initialized with the corresponding connection values. </p>
<p>In order to store the message to be sent, a bytestring is used as data carrier. 
  This bytestring is administrated by an instance of the structure <a href="BYTE_STRING.htm"><i><b>BYTE_STRING</b></i></a> 
  (<b>SD_1</b> in the interface definition). This instance is passed to the function 
  block during the call. The message stored in the bytestring is edited by functions 
  that access the bytestring via an instance of <i><b>BYTE_STRING</b></i>. </p>
<p>If a timeout was exceeded, both write requests and read requests are cancelled. 
  The timeout can be set in the parameter <i><b>iTimeout</b></i> of the instance 
  of <a href="COMM_PARTNER.htm"><b><i>COMM_PARTNER</i></b></a> that is passed 
  to <i><b>CONNECT</b></i> before a connection is established with an instance 
  of <i><b>CONNECT</b></i>. </p>
</body>
</html>
