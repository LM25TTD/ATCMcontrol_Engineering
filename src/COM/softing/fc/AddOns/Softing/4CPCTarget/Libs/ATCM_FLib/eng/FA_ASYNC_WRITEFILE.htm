<html>
<head>
<title>FA_ASYNC_WRITEFILE</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" href="Lib.css">
</head>


<body bgcolor="#FFFFCC">
<h2>FA_ASYNC_WRITEFILE</h2>
<p>Writes a byte string in a file.</p>
<h3>Interface</h3>
<pre class="preforma">FUNCTION_BLOCK FA_ASYNC_WRITEFILE
VAR_INPUT
    EXEC        : BOOL;
    DATA        : BYTE_STRING;     
END_VAR
VAR_IN_OUT
    FILE        : FA_ASYNC_FILE;    
END_VAR
VAR_OUTPUT
    DONE        : BOOL;
    ERROR       : BOOL;
    ERRCD       : DINT;
    ERRTXT      : WSTRING;
END_VAR</pre>
<h3>Parameter</h3>
<h3>INPUT</h3>
<dl> 

 <dt><b>EXEC</b></dt>

 <dd>Value of the type <i><b>BOOL</b></i><br> Starts the operation at a rising edge.</dd>

 <dt><b>DATA</b></dt>

  <dd>Instance of the <i><b>BYTE_STRING</b></i> structure <br>
     Specifies the value to be written.<br>
    Use the <i><b>COPY_WSTRING_TO_BYTE_STRING</b></i> function to initialize the 
    byte string with a value. </dd>
</dl>
<h3>IN_OUT</h3>
<dl> 

 <dt><b><a name="File"></a>FILE</b></dt>

  <dd>Instance of the <a href="FA_ASYNC_FILE.htm"><i><b>FA_ASYNC_FILE</b></i></a> 
    structure<br>
     File object on which the operation is performed.</dd>
</dl>
<h3>OUTPUT</h3>
<dl> 

 <dt><b>DONE</b></dt>

 <dd>Value of the type <i><b>BOOL</b></i><br> Signalizes the (successful or failed) conclusion of the operation.<br> Possible values:<br> <i><b>TRUE</b></i>: Operation has been concluded.<br> <i><b>FALSE</b></i>: Operation has not yet been concluded.</dd>

 <dt><b>ERROR</b></dt>

 <dd>Value of the type <i><b>BOOL</b></i><br> Signalizes the error status.<br> Possible values:<br> <i><b>TRUE</b></i>: An error has occurred.<br> <i><b>FALSE</b></i>: No error has occurred.</dd>

 <dt><b>ERRCD</b></dt>

 <dd>Value of the type <i><b>DINT</b></i><br> Contains an error number if an error has occurred. <br> If no error has occurred, <i><b>ERRCD</b></i> has the value <b>0</b>.<br>

 </dd>

 <dd>The possible values are defined in the <a href="Const_Error.htm">error constants</a>. </dd>

 <dt><b>ERRTXT</b></dt>

 <dd>Value of the type <i><b>WSTRING</b></i><br> Contains an error text if an error has occurred. <br> If no error has occurred, <i><b>ERRTXT</b></i> contains an empty string.</dd>
</dl>
<h3>Description</h3>
<p><b><i>FA_ASYNC_WRITEFILE</i></b> writes the value passed to <i><b>DATA</b></i> 
  in the file passed to <i><b>FILE</b></i>. Before writing in a file, the file 
  must be opened with <i><b><a href="FA_ASYNC_OPENFILE.htm">FA_ASYNC_OPENFILE</a></b></i>. 
  To allow write access, the access mode must be set to <i><b><a href="Const_Mode.htm#ReadWrite">CFA_READ_WRITE</a></b></i> 
  <i><b> </b></i> or <a href="Const_Mode.htm#Append"><i><b>CFA_APPEND</b></i></a> 
  in the <i><b>MODE</b></i> parameter of the structure instance of <i><b><a href="FA_ASYNC_FILE.htm">FA_ASYNC_FILE</a></b></i> 
  passed to <i> <b>FA_ASYNC_OPENFILE</b></i> before you open the file. </p>
<p>The file pointer which indicates the current write position is represented 
  by the structure variable <i> <b>POSITION</b></i> of the structure instance 
  of <i><b>FA_ASYNC_FILE</b></i> passed to <i><b>FILE</b></i>. The first write 
  access following the opening of a file is always performed at the beginning 
  of the file, which means that <i><b>POSITION</b></i> has the value <b><i>CFA_BOF</i></b> 
  unless the file pointer has been explicitly set to a different position (see 
  below). </p>
<p> After each write access, the value of <i><b>POSITION</b></i> is automatically set to a position directly after the last byte written. This allows you to write sequentially in a file without having to explicitly set the file pointer to the new position. </p>
<p>The position of a write access can be explicitly set by assigning a value to the structure variable <i> <b>POSITION</b></i>. For this purpose, the value of <i><b>POSITION</b></i> must be set to the desired writing position after opening a file and before the write access. On conclusion of the writing operation, the value of <i><b>POSITION</b></i> is again set to the position directly after the last byte written.</p>
<p>The length of the file block written corresponds to the length of the byte string passed to <i><b>DATA</b></i>.</p>
<p>When opening a file with the access mode <i><b><a href="Const_Mode.htm#ReadWrite">CFA_READ_WRITE</a></b></i>, 
  note that the file pointer is always positioned at the beginning of file even 
  if this file already exists. A write access performed immediately on opening 
  the file therefore always overwrites the contents of the opened file up to the 
  position of the newly written byte string. To add contents to a file that already 
  exists open the file with the acces mode <a href="Const_Mode.htm#Append"><b><i>CFA_APPEND</i></b></a>. 
</p>
<p>Use a different instance of <i><b>FA_ASYNC_WRITEFILE</b></i> for each write access if you want to execute a write access several times in succession within an access cycle. Due to the internal status monitoring of <i><b>FA_ASYNC_WRITEFILE</b></i> the execution of several successive write accesses within an access cycle via the same instance would lead to undefined results. Especially the monitoring of the conclusion of a writing operation via the <i><b>DONE</b></i> variable is no longer ensured if the same instance is called several times within one access cycle. 
</p>
</body>
</html>
