/* yacc -lmv -LC -o parser.cpp -D parser.h parser.y */

#include "stdafx.h"
#include "gsd_scan.h"
#include "PrmTextDB.h"
#include "ExtParamDB.h"
#include "gsdmessage.h"


#include "gsd_Parser.h"
#include "DP_Module.h"

#define GUARD(ptr)              if ((ptr) == NULL) YYRETURN(-1);
#define SAFE_DELETE(pObj)       if ((pObj) != NULL) delete (pObj);

#define THIS_PTR                ((gsd_Parser*) this)
#define STATION                 (THIS_PTR->m_pStation)
#define PRM_TEXT_TABLE          (THIS_PTR->m_mapTextDefDB)

#define USR_PRM_DEF_DB          (THIS_PTR->m_extParamDB)
#define CURRENT_USR_PRM_DEF     (THIS_PTR->m_pCurrUserParamDef)
#define CURRENT_MODULE          (THIS_PTR->m_pCurrModule)
#define CURRENT_PI				(THIS_PTR->m_pPI)
#define CURRENT_DIAG			(THIS_PTR->m_pUnitDiag)
    
// some defines to have shorter actions
#define SET_INT_VALUE(ptr, member, value)   \
                                GUARD(ptr); (ptr)->member = value;

#define SET_STRING_VALUE(ptr, member, string)   \
                                GUARD(ptr); GUARD(string); \
                                (ptr)->member = *string;   \
                                SAFE_DELETE(string);

#define SET_OCTET_VALUE(ptr, member, octets)   \
                                GUARD(ptr); (ptr)->member.Copy(*octets); \
                                SAFE_DELETE(octets);

#define SET_MODULE_STRING(member,string) \
								if (CURRENT_MODULE != NULL) \
								{	GUARD(string);\
									CURRENT_MODULE->member = *string; \
									SAFE_DELETE(string); \
								}

#pragma warning(disable: 4102)      // 'xxx' : unreferenced label
#pragma warning(disable: 4309)      // 'initializing' : truncation of constant value
#pragma warning(disable: 4305)      // 'initializing' : truncation from 'const unsigned int' to 'unsigned char'

extern YYSTYPE yylval;
#if YYDEBUG
enum YY_Types { YY_t_NoneDefined, YY_t_iToken, YY_t_ulVal, YY_t_pszText, YY_t_pString, YY_t_pOctets, YY_t_dType, YY_t_bVal, YY_t_pTextItem, YY_t_pTextDef, YY_t_pParamDef, YY_t_pEnumValues
};
#endif
#if YYDEBUG
yyTypedRules yyRules[] = {
	{ "&000: %42 &000",  0},
	{ "%42:",  0},
	{ "%42: %43 %44",  0},
	{ "%43: &003 %45",  0},
	{ "%44: %46",  0},
	{ "%46: %47",  0},
	{ "%48: %49",  0},
	{ "%48: %39",  0},
	{ "%48: %50",  0},
	{ "%48: %51",  0},
	{ "%52: %53",  0},
	{ "%52: %52 %53",  0},
	{ "%53: %07 %45",  0},
	{ "%53: %54",  0},
	{ "%53: %50",  0},
	{ "%53: %51",  0},
	{ "%53: %55 %45",  0},
	{ "%53: %27",  0},
	{ "%53: %56",  0},
	{ "%53: &001 &005",  0},
	{ "%57: &128 &228 %58 %45 %59 &129 %45",  0},
	{ "%58: %04 %11",  0},
	{ "%11: %16",  5},
	{ "%11: %11 &229 %16",  5},
	{ "%59:",  0},
	{ "%59: %60",  0},
	{ "%59: %52",  0},
	{ "%59: %60 %52",  0},
	{ "%60: %26 %45",  0},
	{ "%47: %61",  0},
	{ "%47: %47 %61",  0},
	{ "%49: &141 &228 %18 %45 %37 &142 %45",  0},
	{ "%37: %36",  9},
	{ "%37: %37 %36",  9},
	{ "%37: &001 &005",  9},
	{ "%36: &143 &230 %15 &231 &228 %01 %45",  8},
	{ "%39: &138 &228 %18 %05 %45 %33 %21 %62 %38 &139 %45",  10},
	{ "%62:",  0},
	{ "%62: %22 &232 %23 %45",  0},
	{ "%62: %41",  0},
	{ "%38:",  9},
	{ "%38: %19",  9},
	{ "%19: &140 &228 %18 %45",  2},
	{ "%27: &137 &228 %28 %45",  2},
	{ "%50: &136 &230 %25 &231 &228 %10 %45",  0},
	{ "%51: &135 &230 %20 &231 &228 %18 %45",  0},
	{ "%63: %64",  0},
	{ "%63: %54",  0},
	{ "%63: %56",  0},
	{ "%61: %63",  0},
	{ "%61: %48",  0},
	{ "%61: %57",  0},
	{ "%61: %65",  0},
	{ "%61: %66",  0},
	{ "%61: &011 &228 %12 %45",  0},
	{ "%61: &012 &228 %02 %45",  0},
	{ "%61: &013 &228 %02 %45",  0},
	{ "%61: &014 &228 %02 %45",  0},
	{ "%61: &015 &228 %12 %45",  0},
	{ "%61: &016 &228 %13 %45",  0},
	{ "%61: &017 &228 %12 %45",  0},
	{ "%61: &018 &228 %12 %45",  0},
	{ "%61: &019 &228 %35 %45",  0},
	{ "%61: &020 &228 %02 %45",  0},
	{ "%61: &021 &228 %02 %45",  0},
	{ "%61: &022 &228 %12 %45",  0},
	{ "%61: %07 %45",  0},
	{ "%61: &023 &228 %35 %45",  0},
	{ "%61: &024 &228 %35 %45",  0},
	{ "%61: &025 &228 %35 %45",  0},
	{ "%61: &026 &228 %35 %45",  0},
	{ "%61: &027 &228 %35 %45",  0},
	{ "%61: &028 &228 %35 %45",  0},
	{ "%61: &029 &228 %35 %45",  0},
	{ "%61: &030 &228 %35 %45",  0},
	{ "%61: &031 &228 %35 %45",  0},
	{ "%61: &032 &228 %35 %45",  0},
	{ "%61: &033 &228 %35 %45",  0},
	{ "%61: &034 &228 %13 %45",  0},
	{ "%61: &035 &228 %13 %45",  0},
	{ "%61: &036 &228 %13 %45",  0},
	{ "%61: &037 &228 %13 %45",  0},
	{ "%61: &038 &228 %13 %45",  0},
	{ "%61: &039 &228 %13 %45",  0},
	{ "%61: &040 &228 %13 %45",  0},
	{ "%61: &041 &228 %13 %45",  0},
	{ "%61: &042 &228 %13 %45",  0},
	{ "%61: &043 &228 %13 %45",  0},
	{ "%61: &044 &228 %13 %45",  0},
	{ "%61: &045 &228 %35 %45",  0},
	{ "%61: &046 &228 %12 %45",  0},
	{ "%61: &047 &228 %12 %45",  0},
	{ "%61: &048 &228 %02 %45",  0},
	{ "%61: &049 &228 %03 %45",  0},
	{ "%61: &050 &228 %03 %45",  0},
	{ "%61: &051 &228 %03 %45",  0},
	{ "%61: &052 &228 %35 %45",  0},
	{ "%61: &053 &228 %35 %45",  0},
	{ "%61: &054 &228 %35 %45",  0},
	{ "%61: &055 &228 %35 %45",  0},
	{ "%61: &056 &228 %14 %45",  0},
	{ "%61: &057 &228 %12 %45",  0},
	{ "%61: &058 &228 %12 %45",  0},
	{ "%61: &059 &228 %13 %45",  0},
	{ "%61: &060 &228 %35 %45",  0},
	{ "%61: &185 &228 %12 %45",  0},
	{ "%61: &186 &228 %35 %45",  0},
	{ "%61: &187 &228 %35 %45",  0},
	{ "%61: %67 %45",  0},
	{ "%61: &196 &228 %12 %45",  0},
	{ "%61: &197 &228 %35 %45",  0},
	{ "%61: &061 &228 %12 %45",  0},
	{ "%61: &062 &228 %12 %45",  0},
	{ "%61: &063 &228 %12 %45",  0},
	{ "%61: &064 &228 %12 %45",  0},
	{ "%61: &065 &228 %12 %45",  0},
	{ "%61: &066 &228 %12 %45",  0},
	{ "%61: &067 &228 %12 %45",  0},
	{ "%61: &068 &228 %12 %45",  0},
	{ "%61: &069 &228 %12 %45",  0},
	{ "%61: &070 &228 %12 %45",  0},
	{ "%61: &071 &228 %12 %45",  0},
	{ "%61: &072 &228 %12 %45",  0},
	{ "%61: &073 &228 %12 %45",  0},
	{ "%61: &074 &228 %12 %45",  0},
	{ "%61: &075 &228 %12 %45",  0},
	{ "%61: &076 &228 %12 %45",  0},
	{ "%61: &077 &228 %12 %45",  0},
	{ "%61: &078 &228 %12 %45",  0},
	{ "%61: &079 &228 %12 %45",  0},
	{ "%61: &080 &228 %12 %45",  0},
	{ "%61: &081 &228 %12 %45",  0},
	{ "%61: &082 &228 %12 %45",  0},
	{ "%61: &083 &228 %12 %45",  0},
	{ "%61: &084 &228 %12 %45",  0},
	{ "%61: &085 &228 %12 %45",  0},
	{ "%61: &086 &228 %12 %45",  0},
	{ "%61: &087 &228 %12 %45",  0},
	{ "%61: &088 &228 %12 %45",  0},
	{ "%61: &089 &228 %12 %45",  0},
	{ "%61: &090 &228 %12 %45",  0},
	{ "%61: &091 &228 %12 %45",  0},
	{ "%61: &092 &228 %12 %45",  0},
	{ "%61: &093 &228 %12 %45",  0},
	{ "%61: &095 &228 %13 %45",  0},
	{ "%61: &096 &228 %13 %45",  0},
	{ "%61: &097 &228 %13 %45",  0},
	{ "%61: &098 &228 %13 %45",  0},
	{ "%61: &099 &228 %13 %45",  0},
	{ "%61: &100 &228 %13 %45",  0},
	{ "%61: &101 &228 %13 %45",  0},
	{ "%61: &102 &228 %13 %45",  0},
	{ "%61: &103 &228 %13 %45",  0},
	{ "%61: &104 &228 %13 %45",  0},
	{ "%61: &105 &228 %13 %45",  0},
	{ "%61: &094 &228 %12 %45",  0},
	{ "%61: &106 &228 %12 %45",  0},
	{ "%61: &107 &228 %12 %45",  0},
	{ "%61: &108 &228 %12 %45",  0},
	{ "%61: &109 &228 %13 %45",  0},
	{ "%61: &188 &228 %35 %45",  0},
	{ "%61: &183 &228 %35 %45",  0},
	{ "%61: &184 &228 %35 %45",  0},
	{ "%61: &110 &228 %35 %45",  0},
	{ "%61: &111 &228 %35 %45",  0},
	{ "%61: &112 &228 %35 %45",  0},
	{ "%61: &113 &228 %35 %45",  0},
	{ "%61: &114 &228 %12 %45",  0},
	{ "%61: &115 &228 %09 %45",  0},
	{ "%61: &116 &228 %09 %45",  0},
	{ "%61: &117 &228 %13 %45",  0},
	{ "%61: &118 &228 %35 %45",  0},
	{ "%61: &119 &228 %12 %45",  0},
	{ "%61: &120 &228 %12 %45",  0},
	{ "%61: &121 &228 %12 %45",  0},
	{ "%61: &122 &228 %13 %45",  0},
	{ "%61: &131 &228 %35 %45",  0},
	{ "%61: &176 &228 %35 %45",  0},
	{ "%61: &222 &228 %12 %45",  0},
	{ "%61: &132 &228 %12 %45",  0},
	{ "%61: &130 &228 %12 %45",  0},
	{ "%61: %68 %45",  0},
	{ "%61: &152 &228 %35 %45",  0},
	{ "%61: &153 &228 %35 %45",  0},
	{ "%61: &154 &228 %35 %45",  0},
	{ "%61: &155 &228 %12 %45",  0},
	{ "%61: &156 &228 %12 %45",  0},
	{ "%61: &157 &228 %13 %45",  0},
	{ "%61: &158 &228 %13 %45",  0},
	{ "%61: &159 &228 %35 %45",  0},
	{ "%61: &160 &228 %35 %45",  0},
	{ "%61: &161 &228 %12 %45",  0},
	{ "%61: &162 &228 %12 %45",  0},
	{ "%61: &166 &228 %35 %45",  0},
	{ "%61: %69 %45",  0},
	{ "%61: &174 &228 %12 %45",  0},
	{ "%61: &175 &228 %35 %45",  0},
	{ "%61: %55 %45",  0},
	{ "%61: &163 &228 %35 %45",  0},
	{ "%61: &164 &228 %35 %45",  0},
	{ "%61: &165 &228 %35 %45",  0},
	{ "%61: &134 &228 %12 %45",  0},
	{ "%61: &001 &005",  0},
	{ "%67: &189 &228 %35",  0},
	{ "%67: &190 &228 %35",  0},
	{ "%67: &191 &228 %35",  0},
	{ "%67: &192 &228 %35",  0},
	{ "%67: &193 &228 %35",  0},
	{ "%67: &194 &228 %35",  0},
	{ "%67: &195 &228 %35",  0},
	{ "%69: &167 &228 %35",  0},
	{ "%69: &168 &228 %35",  0},
	{ "%69: &169 &228 %35",  0},
	{ "%69: &170 &228 %35",  0},
	{ "%69: &171 &228 %35",  0},
	{ "%69: &172 &228 %35",  0},
	{ "%69: &173 &228 %35",  0},
	{ "%55: &177 &228 %35",  0},
	{ "%55: &178 &228 %35",  0},
	{ "%55: &179 &228 %35",  0},
	{ "%55: &180 &228 %35",  0},
	{ "%55: &181 &228 %35",  0},
	{ "%55: &182 &228 %35",  0},
	{ "%54: &126 &230 %32 &231 &228 %08 %45",  0},
	{ "%07: &223 &228 %02",  4},
	{ "%70: %26 &232 %26",  0},
	{ "%70: %71",  0},
	{ "%72:",  0},
	{ "%72: %70",  0},
	{ "%74:",  0},
	{ "%73: &226 &230 %12 &231 &228 %02 %26 %74 %72 %45",  0},
	{ "%75: %73",  0},
	{ "%75: %75 %73",  0},
	{ "%65: &224 %45 %75 &225 %45",  0},
	{ "%29: &200",  2},
	{ "%29: &201",  2},
	{ "%29: &202",  2},
	{ "%29: &203",  2},
	{ "%29: &204",  2},
	{ "%29: &205",  2},
	{ "%29: &206",  2},
	{ "%29: &207",  2},
	{ "%29: &208",  2},
	{ "%29: &209",  2},
	{ "%29: &210",  2},
	{ "%30: &211",  2},
	{ "%30: &212",  2},
	{ "%30: &213",  2},
	{ "%30: &214",  2},
	{ "%30: &215",  2},
	{ "%30: &216",  2},
	{ "%30: &217",  2},
	{ "%30: &218",  2},
	{ "%30: &219",  2},
	{ "%30: &220",  2},
	{ "%30: &221",  2},
	{ "%76: %29 &228 %13 %45",  0},
	{ "%76: %30 &228 %13 %45",  0},
	{ "%77: %76",  0},
	{ "%77: %77 %76",  0},
	{ "%78:",  0},
	{ "%66: &198 &228 %12 %45 %78 %77 &199 %45",  0},
	{ "%32: %12",  2},
	{ "%79:",  0},
	{ "%64: &124 &228 %24 &232 %24 %45 %79 %80 &125 %45",  0},
	{ "%64: &123 &230 %24 &231 &228 %08 %45",  0},
	{ "%80: %81",  0},
	{ "%80: %80 %81",  0},
	{ "%81: &127 &230 %31 &231 &228 %08 %45",  0},
	{ "%01: &007",  4},
	{ "%15: %17",  2},
	{ "%41: %40 %45",  11},
	{ "%23: %17",  2},
	{ "%22: %17",  2},
	{ "%21: %17",  2},
	{ "%45: &005",  0},
	{ "%45: &006",  0},
	{ "%45: %45 &006",  0},
	{ "%45: %45 &005",  0},
	{ "%40: %17",  11},
	{ "%40: %40 &229 %17",  11},
	{ "%33: &144",  6},
	{ "%33: &145",  6},
	{ "%33: &146",  6},
	{ "%33: &147",  6},
	{ "%33: &148",  6},
	{ "%33: &149",  6},
	{ "%33: &150 &230 %24 &231",  6},
	{ "%33: %34",  6},
	{ "%34: &151 &230 %24 &232 %24 &231",  6},
	{ "%26: %13",  2},
	{ "%71: %26",  0},
	{ "%71: %71 &229 %26",  0},
	{ "%10: %09",  5},
	{ "%25: %12",  2},
	{ "%20: %12",  2},
	{ "%18: %13",  2},
	{ "%28: %12",  2},
	{ "%03: &007",  4},
	{ "%06: &010",  4},
	{ "%06: %06 &010",  4},
	{ "%68: &133 &228 %12",  0},
	{ "%68: &133 &228 %12 %06",  0},
	{ "%31: %13",  2},
	{ "%04: &007",  4},
	{ "%02: &007",  4},
	{ "%05: &007",  4},
	{ "%08: &007",  4},
	{ "%56: &227 %45",  0},
	{ "%56: &227",  0},
	{ "%09: %16",  5},
	{ "%09: %09 &229 %16",  5},
	{ "%16: %17",  2},
	{ "%12: %17",  2},
	{ "%13: %17",  2},
	{ "%14: %17",  2},
	{ "%35: %17",  7},
	{ "%24: %17",  2},
	{ "%17: &004",  2},
	{ "%17: &232 &004",  2},
{ "$accept",  0},{ "error",  0}
};
yyNamedType yyTokenTypes[] = {
	{ "$end",  0,  0},
	{ "error",  256,  0},
	{ "_KEYWORD",  257,  1},
	{ "_PROFIBUS_DP",  258,  1},
	{ "_INTEGER_LITERAL",  259,  2},
	{ "CRLF",  260,  1},
	{ "_COMMENT",  261,  1},
	{ "_VISIBLE_STRING",  262,  3},
	{ "_NAME_CHAR",  263,  3},
	{ "_OTHER_CHAR",  264,  3},
	{ "_SUB_FAMILY",  265,  3},
	{ "_GSD_REVISION",  266,  1},
	{ "_VENDOR_NAME",  267,  1},
	{ "_MODEL_NAME",  268,  1},
	{ "_REVISION",  269,  1},
	{ "_REVISION_NUMBER",  270,  1},
	{ "_IDENT_NUMBER",  271,  1},
	{ "_PROTOCOL_IDENT",  272,  1},
	{ "_STATION_TYPE",  273,  1},
	{ "_FMS_SUPP",  274,  1},
	{ "_HW_RELEASE",  275,  1},
	{ "_SW_RELEASE",  276,  1},
	{ "_PHYSICAL_LAYER",  277,  1},
	{ "_9_6_SUPP",  278,  1},
	{ "_19_2_SUPP",  279,  1},
	{ "_93_75_SUPP",  280,  1},
	{ "_187_5_SUPP",  281,  1},
	{ "_500_SUPP",  282,  1},
	{ "_1_5M_SUPP",  283,  1},
	{ "_3M_SUPP",  284,  1},
	{ "_6M_SUPP",  285,  1},
	{ "_12M_SUPP",  286,  1},
	{ "_31_25_SUPP",  287,  1},
	{ "_45_45_SUPP",  288,  1},
	{ "_MAXTSDR_9_6",  289,  1},
	{ "_MAXTSDR_19_2",  290,  1},
	{ "_MAXTSDR_93_75",  291,  1},
	{ "_MAXTSDR_187_5",  292,  1},
	{ "_MAXTSDR_500",  293,  1},
	{ "_MAXTSDR_1_5M",  294,  1},
	{ "_MAXTSDR_3M",  295,  1},
	{ "_MAXTSDR_6M",  296,  1},
	{ "_MAXTSDR_12M",  297,  1},
	{ "_MAXTSDR_31_25",  298,  1},
	{ "_MAXTSDR_45_45",  299,  1},
	{ "_REDUNDANCY",  300,  1},
	{ "_REPEATER_CTRL_SIG",  301,  1},
	{ "_24V_PINS",  302,  1},
	{ "_IMPL_TYPE",  303,  1},
	{ "_BMP_DEVICE",  304,  1},
	{ "_BMP_DIAG",  305,  1},
	{ "_BMP_SF",  306,  1},
	{ "_DOWNLOAD_SUPP",  307,  1},
	{ "_UPLOAD_SUPP",  308,  1},
	{ "_ACT_PARA_BRCT_SUPP",  309,  1},
	{ "_ACT_PARAM_SUPP",  310,  1},
	{ "_MAX_MPS_LENGTH",  311,  1},
	{ "_MAX_LSDU_MS",  312,  1},
	{ "_MAX_LSDU_MM",  313,  1},
	{ "_MIN_POLL_TIMEOUT",  314,  1},
	{ "_DPV1_MASTER",  315,  1},
	{ "_TRDY_9_6",  316,  1},
	{ "_TRDY_19_2",  317,  1},
	{ "_TRDY_93_75",  318,  1},
	{ "_TRDY_187_5",  319,  1},
	{ "_TRDY_500",  320,  1},
	{ "_TRDY_1_5M",  321,  1},
	{ "_TRDY_3M",  322,  1},
	{ "_TRDY_6M",  323,  1},
	{ "_TRDY_12M",  324,  1},
	{ "_TRDY_31_25",  325,  1},
	{ "_TRDY_45_45",  326,  1},
	{ "_TQUI_9_6",  327,  1},
	{ "_TQUI_19_2",  328,  1},
	{ "_TQUI_93_75",  329,  1},
	{ "_TQUI_187_5",  330,  1},
	{ "_TQUI_500",  331,  1},
	{ "_TQUI_1_5M",  332,  1},
	{ "_TQUI_3M",  333,  1},
	{ "_TQUI_6M",  334,  1},
	{ "_TQUI_12M",  335,  1},
	{ "_TQUI_31_25",  336,  1},
	{ "_TQUI_45_45",  337,  1},
	{ "_TSET_9_6",  338,  1},
	{ "_TSET_19_2",  339,  1},
	{ "_TSET_93_75",  340,  1},
	{ "_TSET_187_5",  341,  1},
	{ "_TSET_500",  342,  1},
	{ "_TSET_1_5M",  343,  1},
	{ "_TSET_3M",  344,  1},
	{ "_TSET_6M",  345,  1},
	{ "_TSET_12M",  346,  1},
	{ "_TSET_31_25",  347,  1},
	{ "_TSET_45_45",  348,  1},
	{ "_LAS_LEN",  349,  1},
	{ "_TSDI_9_6",  350,  1},
	{ "_TSDI_19_2",  351,  1},
	{ "_TSDI_93_75",  352,  1},
	{ "_TSDI_187_5",  353,  1},
	{ "_TSDI_500",  354,  1},
	{ "_TSDI_1_5M",  355,  1},
	{ "_TSDI_3M",  356,  1},
	{ "_TSDI_6M",  357,  1},
	{ "_TSDI_12M",  358,  1},
	{ "_TSDI_31_25",  359,  1},
	{ "_TSDI_45_45",  360,  1},
	{ "_MAX_SLAVES_SUPP",  361,  1},
	{ "_MAX_MASTER_INP_LEN",  362,  1},
	{ "_MAX_MASTER_OUT_LEN",  363,  1},
	{ "_MAX_MASTER_DATA_LEN",  364,  1},
	{ "_FREEZE_MODE_SUPP",  365,  1},
	{ "_SYNC_MODE_SUPP",  366,  1},
	{ "_AUTO_BAUD_SUPP",  367,  1},
	{ "_SET_SLAVE_ADD_SUPP",  368,  1},
	{ "_USER_PRM_DATA_LEN",  369,  1},
	{ "_USER_PRM_DATA",  370,  1},
	{ "_USER_PRM_DATA_DEF",  371,  1},
	{ "_MIN_SLAVE_INTERVALL",  372,  1},
	{ "_MODULAR_STATION",  373,  1},
	{ "_MAX_MODULE",  374,  1},
	{ "_MAX_INPUT_LEN",  375,  1},
	{ "_MAX_OUTPUT_LEN",  376,  1},
	{ "_MAX_DATA_LEN",  377,  1},
	{ "_UNIT_DIAG_BIT",  378,  1},
	{ "_UNIT_DIAG_AREA",  379,  1},
	{ "_UNIT_DIAG_AREA_END",  380,  1},
	{ "_CHANNEL_DIAG",  381,  1},
	{ "_VALUE",  382,  1},
	{ "_MODULE",  383,  1},
	{ "_END_MODULE",  384,  1},
	{ "_MODUL_OFFSET",  385,  1},
	{ "_FAIL_SAFE",  386,  1},
	{ "_MAX_DIAG_DATA_LEN",  387,  1},
	{ "_SLAVE_FAMILY",  388,  1},
	{ "_MAX_USER_PRM_DATA_LEN",  389,  1},
	{ "_EXT_USR_PRM_DATA_REF",  390,  1},
	{ "_EXT_USR_PRM_DATA_CONST",  391,  1},
	{ "_EXT_MOD_PRM_DATA_LEN",  392,  1},
	{ "_EXT_USR_PRM_DATA",  393,  1},
	{ "_END_EXT_USR_PRM_DATA",  394,  1},
	{ "_PRM_TEXT_REF",  395,  1},
	{ "_PRM_TEXT",  396,  1},
	{ "_END_PRM_TEXT",  397,  1},
	{ "_TEXT",  398,  1},
	{ "_TYPE_UNSIGNED8",  399,  1},
	{ "_TYPE_UNSIGNED16",  400,  1},
	{ "_TYPE_UNSIGNED32",  401,  1},
	{ "_TYPE_SIGNED8",  402,  1},
	{ "_TYPE_SIGNED16",  403,  1},
	{ "_TYPE_SIGNED32",  404,  1},
	{ "_TYPE_BIT",  405,  1},
	{ "_TYPE_BIT_AREA",  406,  1},
	{ "_DPV1_SLAVE",  407,  1},
	{ "_C1_RW_SUPP",  408,  1},
	{ "_C2_RW_SUPP",  409,  1},
	{ "_C1_MAX_DATA_LEN",  410,  1},
	{ "_C2_MAX_DATA_LEN",  411,  1},
	{ "_C1_RESPONSE_TO",  412,  1},
	{ "_C2_RESPONSE_TO",  413,  1},
	{ "_C1_RW_REQ",  414,  1},
	{ "_C2_RW_REQ",  415,  1},
	{ "_C2_MAX_CNT_CHANNELS",  416,  1},
	{ "_MAX_INIT_PDU_LEN",  417,  1},
	{ "_DPV1_DATA_TYPES",  418,  1},
	{ "_WD_BASE_1MS_SUPP",  419,  1},
	{ "_CHECK_CFG_MODE",  420,  1},
	{ "_ALARM_SUPP",  421,  1},
	{ "_DIAGNOSTIC_ALARM_SUPP",  422,  1},
	{ "_PROCESS_ALARM_SUPP",  423,  1},
	{ "_PULL_PLUG_ALARM_SUPP",  424,  1},
	{ "_STATUS_ALARM_SUPP",  425,  1},
	{ "_UPDATE_ALARM_SUPP",  426,  1},
	{ "_MAN_SPEC_ALARM_SUPP",  427,  1},
	{ "_EXTRA_ALARM_SAP_SUPP",  428,  1},
	{ "_ALARM_SEQ_MODE_CNT",  429,  1},
	{ "_ALARM_TYPE_MODE_SUPP",  430,  1},
	{ "_FAIL_SAVE_REQUIRED",  431,  1},
	{ "_DIAGNOSTIC_ALARM_RQ",  432,  1},
	{ "_PROCESS_ALARM_RQ",  433,  1},
	{ "_PULL_PLUG_ALARM_RQ",  434,  1},
	{ "_STATUS_ALARM_RQ",  435,  1},
	{ "_UPDATE_ALARM_RQ",  436,  1},
	{ "_MAN_SPEC_ALARM_RQ",  437,  1},
	{ "_MASTER_SYNC_MODE_SUPP",  438,  1},
	{ "_MASTER_FAIL_SAFE_SUPP",  439,  1},
	{ "_DPV1_CONFORMANCE_CLASS",  440,  1},
	{ "_C1_MASTER_RW_SUPP",  441,  1},
	{ "_M_DPV1_ALARM_SUPP",  442,  1},
	{ "_MASTER_FREEZE_MODE_SUPP",  443,  1},
	{ "_M_DIAGNOSTIC_ALARM_SUPP",  444,  1},
	{ "_M_PROCESS_ALARM_SUPP",  445,  1},
	{ "_M_PULL_PLUG_ALARM_SUPP",  446,  1},
	{ "_M_STATUS_ALARM_SUPP",  447,  1},
	{ "_M_UPDATE_ALARM_SUPP",  448,  1},
	{ "_M_MAN_SPEC_ALARM_SUPP",  449,  1},
	{ "_M_EXTRA_ALARM_SAP_SUPP",  450,  1},
	{ "_M_ALARM_SEQ_MODE",  451,  1},
	{ "_M_ALARM_TYPE_MODE_SUPP",  452,  1},
	{ "_PHYSICAL_IF",  453,  1},
	{ "_END_PHYSICAL_IF",  454,  1},
	{ "_TX_DEL_9_6",  455,  1},
	{ "_TX_DEL_19_2",  456,  1},
	{ "_TX_DEL_31_25",  457,  1},
	{ "_TX_DEL_45_45",  458,  1},
	{ "_TX_DEL_93_75",  459,  1},
	{ "_TX_DEL_187_5",  460,  1},
	{ "_TX_DEL_500",  461,  1},
	{ "_TX_DEL_1_5M",  462,  1},
	{ "_TX_DEL_3M",  463,  1},
	{ "_TX_DEL_6M",  464,  1},
	{ "_TX_DEL_12M",  465,  1},
	{ "_RC_DEL_9_6",  466,  1},
	{ "_RC_DEL_19_2",  467,  1},
	{ "_RC_DEL_31_25",  468,  1},
	{ "_RC_DEL_45_45",  469,  1},
	{ "_RC_DEL_93_75",  470,  1},
	{ "_RC_DEL_187_5",  471,  1},
	{ "_RC_DEL_500",  472,  1},
	{ "_RC_DEL_1_5M",  473,  1},
	{ "_RC_DEL_3M",  474,  1},
	{ "_RC_DEL_6M",  475,  1},
	{ "_RC_DEL_12M",  476,  1},
	{ "_DIAG_UPDATE_DELAY",  477,  1},
	{ "_INFO_TEXT",  478,  1},
	{ "_SLOT_DEF",  479,  1},
	{ "_END_SLOT_DEF",  480,  1},
	{ "_SLOT",  481,  1},
	{ "_USER_KEYWORD",  482,  1},
	{ "'='",  61,  0},
	{ "','",  44,  0},
	{ "'('",  40,  0},
	{ "')'",  41,  0},
	{ "'-'",  45,  0}

};
#endif
static short yydef[] = {

	65535, 65531,  320,  294, 65527,  295,  303,  306,  308,  312, 
	  28,  165,  166,  158,  153,  152,  151,  150,  304,  305, 
	 307,  149,  148,  147,  146,  145,  144,  143,  142,  141, 
	 140,  139,  309,  138,  137,  136,  135,  134,  133,  132, 
	 131,  130,  129,  128,  127,  126,  125,  124,  123,  122, 
	 121,  120,  119,  118,  117,  116,  115,  114,  113,  112, 
	 111,  110,  109,  108,  107,  106,  105,  104,  103,  102, 
	 101,  100,   99,   98,   97,   96,   95,   94,   93,   92, 
	  91,   90,   89,   88,   87,   86,   85,   84,   83,   82, 
	  81,   80,   79,   78,   77,   76,   75,   74,   73,   72, 
	  71,   70,  310,  311,   69,   68,   67,   66,   65,   64, 
	  63,   62,   61,   60,   59,   58,   57,   56,   55,   54, 
	  53,   52,   51,   50,   49,   48,   47,   46,   45,   44, 
	  43,   42,   41,   40,   39,   38,   37,   36,   35,   34, 
	  33,   32,   31,   30,   29,   27,   26,   25,   24,   23, 
	  22,   21,   20,   19,   18,   17,   16,    5, 65523,  300, 
	65519, 65515, 65511,  296,    6, 65507,  318,    3,  160,  154, 
	  15,   14, 65503,    7,    4,  299, 65497, 65487,   13,  157, 
	 156,  162,  298, 65483,  302,  164,   10,    9,    8,  155, 
	  12,  161
};
static short yyex[] = {

	   0,  321, 65535,    1,    0,    0, 65535,    1,    0,  319, 
	65535,    1,  384,  317, 65535,    1,  384,  316, 65535,    1, 
	 384,  315, 65535,    1,  382,  159, 65535,    1,  384,  314, 
	65535,    1,  394,  313,  395,  313, 65535,    1,  260,  163, 
	 261,  163,   44,  163,   45,  297, 65535,    1,  394,   11, 
	65535,    1,  260,  301,  261,  301, 65535,    1
};
static short yyact[] = {

	64747,  258, 64635, 64634,  261,  260, 64776, 64924, 64923, 64922, 
	64921, 64920, 64919, 64918, 64917, 64916, 64915, 64914, 64913, 64911, 
	64910, 64909, 64908, 64907, 64906, 64905, 64904, 64903, 64902, 64901, 
	64900, 64899, 64898, 64897, 64896, 64895, 64894, 64893, 64892, 64891, 
	64890, 64889, 64888, 64887, 64886, 64885, 64884, 64883, 64882, 64881, 
	64880, 64879, 64878, 64877, 64876, 64875, 64874, 64867, 64866, 64865, 
	64864, 64863, 64862, 64861, 64860, 64859, 64858, 64857, 64856, 64855, 
	64854, 64853, 64852, 64851, 64850, 64849, 64848, 64847, 64846, 64845, 
	64844, 64843, 64842, 64841, 64840, 64839, 64838, 64837, 64836, 64835, 
	64823, 64834, 64833, 64832, 64831, 64830, 64829, 64828, 64827, 64826, 
	64825, 64824, 64822, 64821, 64820, 64819, 64815, 64814, 64813, 64812, 
	64811, 64810, 64809, 64808, 64807, 64806, 64805, 64804, 64803, 64750, 
	64751, 64755, 64929, 64798, 64802, 64799, 64749, 64777, 64925, 64926, 
	64927, 64928, 64796, 64795, 64794, 64793, 64792, 64791, 64790, 64789, 
	64788, 64787, 64786, 64780, 64779, 64778, 64785, 64768, 64767, 64766, 
	64765, 64764, 64763, 64762, 64783, 64782, 64801, 64761, 64760, 64759, 
	64758, 64757, 64756, 64817, 64816, 64873, 64872, 64871, 64818, 64775, 
	64774, 64773, 64772, 64771, 64770, 64769, 64869, 64868, 64752, 64800, 
	64754, 64753, 65532,  482,  479,  478,  477,  453,  452,  451, 
	 450,  449,  448,  447,  446,  445,  444,  443,  442,  441, 
	 440,  439,  438,  437,  436,  435,  434,  433,  432,  431, 
	 430,  429,  428,  427,  426,  425,  424,  423,  422,  421, 
	 420,  419,  418,  417,  416,  415,  414,  413,  412,  411, 
	 410,  409,  408,  407,  396,  393,  391,  390,  389,  388, 
	 387,  386,  385,  383,  381,  379,  378,  377,  376,  375, 
	 374,  373,  372,  371,  370,  369,  368,  367,  366,  365, 
	 364,  363,  362,  361,  360,  359,  358,  357,  356,  355, 
	 354,  353,  352,  351,  350,  349,  348,  347,  346,  345, 
	 344,  343,  342,  341,  340,  339,  338,  337,  336,  335, 
	 334,  333,  332,  331,  330,  329,  328,  327,  326,  325, 
	 324,  323,  322,  321,  320,  319,  318,  317,  316,  315, 
	 314,  313,  312,  311,  310,  309,  308,  307,  306,  305, 
	 304,  303,  302,  301,  300,  299,  298,  297,  296,  295, 
	 294,  293,  292,  291,  290,  289,  288,  287,  286,  285, 
	 284,  283,  282,  281,  280,  279,  278,  277,  276,  275, 
	 274,  273,  272,  271,  270,  269,  268,  267,  266,  256, 
	64632, 64633,  261,  260, 64930,   61, 64931,   40, 64932,   61, 
	64933,   61, 64935,   61, 64936,   40, 64937,   61, 64938,   61, 
	64939,   61, 64940,   61, 64941,   61, 64942,   61, 64943,   61, 
	64944,   61, 64945,   61, 64946,   61, 64947,   61, 64948,   61, 
	64949,   61, 64950,   61, 64951,   61, 64952,   61, 64953,   61, 
	64954,   61, 64955,   61, 64956,   61, 64667,  260, 64957,   61, 
	64958,   61, 64959,   61, 64960,   61, 64961,   61, 64962,   61, 
	64963,   61, 64964,   61, 64965,   61, 64966,   61, 64967,   61, 
	64968,   61, 64969,   61, 64970,   61, 64971,   61, 64972,   61, 
	64973,   61, 64974,   61, 64975,   61, 64976,   61, 64977,   61, 
	64978,   61, 64979,   61, 64980,   61, 64981,   61, 64982,   61, 
	64983,   61, 64984,   61, 64985,   61, 64986,   61, 64987,   61, 
	64988,   61, 64989,   61, 64990,   61, 64991,   61, 64992,   61, 
	64993,   61, 64994,   61, 64995,   61, 64996,   61, 64997,   61, 
	64998,   61, 64999,   61, 65000,   61, 65001,   61, 65002,   61, 
	65003,   61, 65004,   61, 65005,   61, 65006,   61, 65007,   61, 
	65008,   61, 65009,   61, 65010,   61, 65011,   61, 65012,   61, 
	65013,   61, 65014,   61, 65015,   61, 65016,   61, 65017,   61, 
	65018,   61, 65019,   61, 65020,   61, 65021,   61, 65022,   61, 
	65023,   61, 65024,   61, 65025,   61, 65026,   61, 65027,   61, 
	65028,   61, 65029,   61, 65030,   61, 65031,   61, 65032,   61, 
	65033,   61, 65034,   61, 65035,   61, 65036,   61, 65037,   61, 
	65038,   61, 65039,   61, 65040,   61, 65041,   61, 65042,   61, 
	65043,   61, 65044,   61, 65045,   61, 65046,   61, 65047,   61, 
	65048,   61, 65049,   61, 65050,   61, 65051,   61, 65052,   61, 
	65053,   61, 65054,   61, 65055,   61, 65056,   61, 65057,   61, 
	65058,   61, 65059,   61, 65060,   61, 65061,   61, 65062,   61, 
	65063,   61, 65064,   61, 65065,   61, 65066,   61, 65067,   61, 
	65068,   61, 65069,   61, 65070,   61, 65071,   61, 65072,   61, 
	65073,   61, 65074,   61, 65075,   61, 65076,   61, 65077,   61, 
	65078,   61, 65079,   61, 65080,   61, 65081,   61, 65082,   61, 
	65083,   61, 65084,   61, 65085,   61, 65086,   61, 65087,   61, 
	65088,   61, 65089,   61, 65090,   61, 65091,   61, 65092,   61, 
	65093,   61, 65094,   61, 65095,   61, 65096,   61, 65097,   61, 
	65098,   61, 65099,   61, 65100,   40, 65101,   40, 65102,   61, 
	65103,   61, 65104,   61, 65105, 64620,  259,   45, 64632, 64633, 
	65110,  481,  261,  260, 64739,  262, 64735,  262, 64738,  262, 
	64746,  259, 64736,  265, 65261,   41, 65262,   45, 65263, 65110, 
	 481,  480, 65264,   40, 65265,   41, 65266, 64635, 64634,  261, 
	 260,   44, 65267,   41, 65268,   41, 64740,  262, 64737,  265, 
	65271,   61, 65275,   61, 65276,   61, 65277,   61, 65280, 64632, 
	64633, 65279,  398,  261,  260,  256, 65282,   44, 65105, 65286, 
	64620, 64632, 64633, 64755, 64925, 64926, 65283, 64761, 64760, 64759, 
	64758, 64757, 64756, 64754, 65532,  482,  478,  437,  436,  435, 
	 434,  433,  432,  392,  391,  390,  381,  261,  260,  259, 
	 256,   45, 64741,  262, 64702, 64703, 64704, 64705, 64706, 64707, 
	64708, 64709, 64710, 64711, 64712, 64713, 64714, 64715, 64716, 64717, 
	64718, 64719, 64720, 64721, 64722, 64723,  476,  475,  474,  473, 
	 472,  471,  470,  469,  468,  467,  466,  465,  464,  463, 
	 462,  461,  460,  459,  458,  457,  456,  455, 65293,   41, 
	64632, 64633, 64726, 64727, 64728, 64729, 64730, 64731, 65298, 65297, 
	 406,  405,  404,  403,  402,  401,  400,  399,  261,  260, 
	65300,   40, 64696,  260, 65301, 65279,  398,  397, 65302,   61, 
	65286, 64755, 64925, 64926, 65283, 64761, 64760, 64759, 64758, 64757, 
	64756, 64754, 65532,  482,  478,  437,  436,  435,  434,  433, 
	 432,  392,  391,  390,  381,  256, 65303,  384, 64678,  260, 
	65305, 64702, 64703, 64704, 64705, 64706, 64707, 64708, 64709, 64710, 
	64711, 64712, 64713, 64714, 64715, 64716, 64717, 64718, 64719, 64720, 
	64721, 64722, 64723,  476,  475,  474,  473,  472,  471,  470, 
	 469,  468,  467,  466,  465,  464,  463,  462,  461,  460, 
	 459,  458,  457,  456,  455,  454, 65306,   61, 65307,   61, 
	65308,   61, 65266,   44, 65309,   40, 65310,   40, 65313,  382, 
	65322,   41, 65323,   40, 65324, 65313,  382,  380, 65325,   45, 
	64732,   41, 65326, 64635, 64634,  261,  260,   44, 65327,   45, 
	65328,  395, 65330,   61, 65334,   61, 65335,  394, 64724,  262, 
	65337,   41, 64733,   41, 65340,   61, 65341,   44, 65342,   45,   -1
};
static short yypact[] = {

	   1,  360,  362,    4,  183,  362,  362,  362,  362,  362, 
	 362,  733,  759,  362,  362,  362,  362,  362,  362,  362, 
	 362,  362,  362,  362,  362,  362,  362,  362,  362,  362, 
	 362,  362,  362,  362,  362,  362,  362,  362,  362,  362, 
	 362,  362,  362,  362,  362,  362,  362,  362,  362,  362, 
	 362,  362,  362,  362,  362,  362,  362,  362,  362,  362, 
	 362,  362,  362,  362,  362,  362,  362,  362,  362,  362, 
	 362,  362,  362,  362,  362,  362,  362,  362,  362,  362, 
	 362,  362,  362,  362,  362,  362,  362,  362,  362,  362, 
	 362,  362,  362,  362,  362,  362,  362,  362,  362,  362, 
	 362,  362,  362,  362,  362,  362,  362,  362,  362,  362, 
	 362,  362,  362,  362,  362,  362,  362,  362,  362,  362, 
	 362,  362,  362,  362,  362,  362,  362,  362,  362,  362, 
	 362,  362,  362,  362,  362,  362,  362,  362,  362,  362, 
	 362,  362,  362,  362,  362,  362,  362,  362,  362,  362, 
	 362,  362,  362,  362,  362,  362,  362,  777,  795,  362, 
	 903,  903,  362,  973,  362,  903,  362,  362,  362,  362, 
	 362,  362,  716,  362,  362,  362,  992, 1001,  362,  362, 
	 362,  362,  362,  716, 1017, 1019,  362,  362,  362,  362, 
	 362,  362,    4,  716,  716,  813,    4,    4, 1015,    4, 
	   4,  716,    4, 1013, 1011, 1009, 1007, 1005,  716,  716, 
	 716,    4,  716, 1003,  999,  995,  991,  989,  716,    4, 
	   4,  986,  983,    4,  981,  716,  716,  725,  716,  716, 
	   4,  979,    4,  716,    4,  716,  716,  977,  975,    4, 
	   4,    4,  971,  969,  967,  943,    4,    4,    4,  919, 
	 917,    4,  889,  716,  886,  883,  881,  870,  716,  716, 
	 813,  859,  836,    4,  813,  772,    4,  767,  765,  716, 
	 763,  716,    4,  716,  761,    4,  716,    4,  757,  755, 
	 753,    4,    4,    4,    4,    4,    4,    4,    4,    4, 
	   4,    4,    4,    4,    4,    4,    4,    4,    4,    4, 
	   4,    4,    4,    4,    4,    4,    4,    4,    4,    4, 
	   4,    4,    4,    4,    4,    4,    4,    4,    4,    4, 
	   4,    4,    4,    4,    4,    4,    4,    4,    4,    4, 
	   4,    4,    4,    4,    4,    4,    4,    4,    4,    4, 
	   4,    4,    4,    4,    4,    4,    4,    4,    4,    4, 
	   4,    4,    4,    4,    4,    4,    4,    4,    4,    4, 
	   4,    4,    4,    4,    4,    4,    4,    4,    4,    4, 
	   4,    4,    4,    4,    4,    4,    4,    4,    4,    4, 
	   4,    4,    4,    4,    4,    4,    4,    4,    4,    4, 
	   4,    4,    4,  749,  749,    4,    4,    4,    4,    4, 
	   4,    4,    4,    4,    4,    4,    4,    4,    4,    4, 
	   4,    4,    4,    4,    4,    4,    4,    4,    4,    4, 
	   4,    4,    4,    4,  745,  743,  740,    4,  737,  735, 
	 731,  729,  716,  716,  716,  716,  716,  725,  725,  725, 
	 716,  716,  716,  716,  716,  725,  725,  716,  716,  716, 
	 716,  716,  716,  716,  716,  716,  716,  716,  716,  716, 
	 716,  716,  716,  716,  716,  716,  716,  716,  716,  716, 
	 716,  716,  716,  725,  727,  727,  727,  716,  716,  716, 
	 716,  716,  716,  716,  716,  716,  716,  716,  716,  716, 
	 716,  716,  716,  716,  716,  716,  716,  716,  716,  716, 
	 716,  716,  716,  716,  716,  716,  716,  716,  716,  716, 
	 716,  716,  716,  716,  716,  716,  716,  716,  716,  716, 
	 716,  716,  716,  716,  716,  716,  716,  716,  716,  716, 
	 716,  716,  716,  716,  716,  716,  716,  716,  716,  716, 
	 716,  716,  716,  716,  716,  716,  716,  716,  716,  716, 
	 716,  716,  716,  716,  716,  716,  716,  716,  716,  716, 
	 716,  716,  716,  716,  716,  716,  716,  716,  716,  716, 
	 716,  716,  716,  716,  716,  716,  716,  716,  716,  716, 
	 716,  716,  716,  716,  716,  716,  716,  716,  716,  716, 
	 716,  716,  716,  716,  716,  716,  716,  716,  716,  716, 
	 725,  721,  716,  716,  716,  716,  713,  711,  709,  707, 
	 705,  703,  701,  699,  697,  695,  693,  691,  689,  687, 
	 685,  683,  681,    4,  679,  677,  675,  673,  671,  669, 
	 667,  665,  663,  661,  659,  657,  655,  653,  651,  649, 
	 647,  645,  643,  641,  639,  637,  635,  633,  631,  629, 
	 627,  625,  623,  621,  619,  617,  615,  613,  611,  609, 
	 607,  605,  603,  601,  599,    4,  597,  595,  593,  591, 
	 589,  587,  585,  583,  581,  579,  577,  575,  573,  571, 
	 569,  567,  565,  563,  561,  559,  557,  555,  553,  551, 
	 549,  547,  545,  543,  541,  539,  537,  535,  533,  531, 
	 529,  527,  525,  523,  521,  519,  517,  515,  513,  511, 
	 509,  507,  505,  503,  501,  499,  497,  495,  493,  491, 
	 489,  487,  485,  483,  481,  479,  477,  475,  473,  471, 
	 469,  467,  465,  463,  461,  459,  457,  455,    4,  453, 
	 451,  449,  447,  445,  443,  441,  439,  437,  435,  433, 
	 431,    4,  429,  427,    4,  425,  423,  421,  419,  417, 
	 415,  413,  411,  409,  407,  405,  403,  401,  399,  397, 
	 395,  393,  391,  389,  387,  385,  383,  381,  379,  377, 
	 375,  373,    4,  371,  369,  367,  365,  183,    4
};
static short yygo[] = {

	65336, 65317, 65253, 65252, 65251, 65245, 65244, 65217, 64699,  473, 
	 446,  445,  439,  438,  437,  227, 65216, 65215, 65214,  475, 
	 474, 65259, 65269, 65523, 64912, 64912, 65288,  787,    4, 65343, 
	65294, 65289,  260,  195, 65372, 65142, 65141,  548,  258, 65296, 
	65378, 64626, 65274, 64629, 64628, 65254, 65250, 65248, 65247, 65243, 
	65219, 65218, 65208, 65207, 65204, 65201, 65199, 65198, 65197, 65196, 
	65195, 65194, 65193, 65192, 65191, 65190, 65189, 65188, 65187, 65186, 
	65185, 65184, 65183, 65182, 65181, 65180, 65179, 65178, 65177, 65176, 
	65175, 65174, 65173, 65172, 65171, 65170, 65169, 65168, 65167, 65155, 
	65154, 65153, 65152, 65143, 65138, 65137, 65136, 65132, 65131, 65130, 
	65126, 65125, 65120, 65119, 65117, 65112, 64641, 65108, 65524,  602, 
	 599,  578,  573,  571,  570,  565,  564,  560,  559,  558, 
	 554,  553,  552,  547,  538,  537,  536,  535,  523,  522, 
	 521,  520,  519,  518,  517,  516,  515,  514,  513,  512, 
	 511,  510,  509,  508,  507,  506,  505,  504,  503,  502, 
	 501,  500,  499,  498,  497,  496,  495,  494,  493,  492, 
	 491,  489,  486,  483,  482,  472,  471,  447,  443,  442, 
	 440,  436,  435,  434,  271,  233, 64627, 64625, 65316, 65315, 
	64627, 64627, 64627, 65249, 65231, 65230, 65229, 65228, 65227, 65226, 
	65225, 65224, 65223, 65222, 65221, 65206, 65166, 65165, 65164, 65163, 
	65162, 65161, 65160, 65159, 65158, 65157, 65156, 65151, 65140, 65135, 
	65124, 65123, 64630,  567,  566,  555,  550,  539,  534,  533, 
	 532,  531,  530,  529,  528,  527,  526,  525,  524,  484, 
	 469,  468,  467,  466,  465,  464,  463,  462,  461,  460, 
	 459,  441,  433,  432,  259,  229,  228,  212,  201, 65209, 
	65311, 64693, 64743, 64692, 64742,  276,  269,  253, 64623, 65359, 
	64623, 64623, 64623, 64623, 64637, 64725, 64621, 64623, 64623, 64621, 
	64621, 64623, 64623, 64638, 64636, 64744, 64744, 64623, 64744, 64621, 
	64744, 64623, 64623, 64623, 64745, 64745, 64745, 64745, 64745, 64745, 
	64745, 64745, 64745, 64745, 64745, 64745, 64623, 64623, 64623, 64623, 
	64623, 64623, 64623, 64623, 64623, 64623, 64623, 64745, 64745, 64745, 
	64745, 64745, 64622, 64623, 64745, 64745, 64745, 64745, 64623, 64623, 
	64623, 64623, 64623, 64623, 64623, 64623, 64623, 64623, 64623, 64623, 
	64745, 64745, 64745, 64745, 64745, 64745, 64745, 64744, 64744, 64623, 
	64745, 64623, 64745, 64745, 64745, 64745, 64745, 64623, 64623, 64745, 
	64745, 64745, 64745, 64745, 64745, 64745, 64745, 64745, 64745, 64745, 
	64745, 64745, 64745, 64745, 64745, 64745, 64745, 64745, 64745, 64745, 
	64745, 64745, 64745, 64745, 64745, 64745, 64621, 64621, 64624,  604, 
	 603,  598,  597,  596,  595,  594,  593,  592,  591,  590, 
	 589,  588,  587,  586,  585,  584,  583,  582,  581,  580, 
	 579,  577,  576,  575,  574,  572,  569,  568,  567,  566, 
	 563,  562,  561,  557,  556,  555,  551,  550,  549,  548, 
	 546,  545,  544,  543,  542,  541,  540,  539,  534,  533, 
	 532,  531,  530,  529,  528,  527,  526,  525,  524,  490, 
	 488,  487,  485,  484,  481,  480,  479,  478,  477,  470, 
	 469,  468,  467,  466,  465,  464,  463,  462,  461,  460, 
	 459,  458,  457,  456,  455,  454,  453,  452,  451,  450, 
	 449,  448,  444,  441,  433,  432,  276,  273,  269,  259, 
	 258,  253,  236,  235,  229,  228,  226,  225,  218,  212, 
	 210,  209,  208,  201,  194,  193,  183,  172,  158, 65339, 
	65295, 65258, 65257,  432,  259,  201, 64698, 65255, 65363, 65321, 
	65333, 65332, 65319, 65318, 65272, 65107, 65106,  603,  273,  226, 
	 225,  210, 65256, 65350, 64700, 64734, 64701, 65284,  218,  194, 
	 193,  183, 64691, 65312, 65292, 65291, 65331, 65111, 65299, 64631, 
	65246, 65242, 65241, 65240, 65239, 65238, 65237, 65236, 65235, 65234, 
	65233, 65232, 65220, 65213, 65212, 65211, 65210, 65205, 65203, 65202, 
	65200, 65150, 65149, 65148, 65147, 65146, 65145, 65144, 65139, 65134, 
	65133, 65129, 65128, 65127, 65122, 65121, 65118, 65116, 65115, 65114, 
	65113, 64666, 64665, 64664, 64663, 64662, 64661, 64660, 64659, 64658, 
	64657, 64656, 64655, 64654, 64653, 64652, 64651, 64650, 64649, 64648, 
	64647,  597,  596,  595,  594,  593,  592,  591,  590,  589, 
	 588,  587,  586,  585,  584,  583,  582,  581,  580,  579, 
	 577,  576,  575,  574,  572,  569,  568,  563,  562,  561, 
	 557,  556,  551,  546,  545,  544,  543,  542,  541,  540, 
	 490,  488,  487,  485,  480,  479,  478,  477,  470,  458, 
	 457,  456,  455,  454,  453,  452,  451,  450,  449,  448, 
	 444, 64695, 64694,  254, 65281, 65329, 64687, 65320, 64697, 65534, 
	64748, 64690, 65530, 65344, 65345, 65346, 65347, 65348, 65349, 65353, 
	65354, 65355, 65356, 65357, 65360, 65361, 65362, 65364, 65365, 65366, 
	65367, 65368, 65369, 65371, 65373, 65278, 65376, 65377, 65270, 65379, 
	65380, 65381, 65382, 65383, 65384, 65385, 65386, 65387, 65388, 65389, 
	65390, 65391, 65392, 65393, 65394, 65395, 65396, 65397, 65398, 65399, 
	65400, 65401, 65402, 65403, 65404, 65405, 65406, 65407, 65408, 65409, 
	65410, 65411, 65412, 65413, 65414, 65415, 65416, 65417, 65418, 65419, 
	65420, 65421, 65422, 65423, 65424, 65425, 65426, 65427, 65428, 65429, 
	65430, 65431, 65432, 65433, 65434, 65435, 65436, 65437, 65438, 65439, 
	65440, 65441, 65442, 65443, 65444, 65445, 65446, 65447, 65448, 65449, 
	65450, 65451, 65452, 65453, 65454, 65455, 65456, 65457, 65458, 65459, 
	65460, 65461, 65462, 65463, 65464, 65465, 65466, 65467, 65468, 65469, 
	65470, 65471, 65472, 65473, 65474, 65475, 65476, 65477, 65478, 65479, 
	65480, 65481, 65482, 65483, 65484, 65485, 65486, 65487, 65488, 65489, 
	65490, 65491, 65492, 65493, 65494, 65495, 65496, 65497, 65498, 65499, 
	65500, 65501, 65502, 65503, 65504, 65505, 65506, 65507, 65508, 65509, 
	65510, 65511, 65512, 65513, 65514, 65515, 65516, 65517, 65518, 65519, 
	65520, 65521, 65522, 65525, 65526, 65527, 65528, 65529, 64934, 65533, 
	 782,  754,  751,  738,  665,  623,  427,  423,  422,  421, 
	 420,  419,  418,  417,  416,  415,  414,  413,  412,  411, 
	 410,  409,  408,  407,  406,  405,  404,  403,  402,  401, 
	 400,  399,  398,  397,  396,  395,  394,  393,  392,  391, 
	 390,  389,  388,  387,  386,  385,  384,  383,  382,  381, 
	 380,  379,  378,  377,  376,  375,  374,  373,  372,  371, 
	 370,  369,  368,  367,  366,  365,  364,  363,  362,  361, 
	 360,  359,  358,  357,  356,  355,  354,  353,  352,  351, 
	 350,  349,  348,  347,  346,  345,  344,  343,  342,  341, 
	 340,  339,  338,  337,  336,  335,  334,  333,  332,  331, 
	 330,  329,  328,  327,  326,  325,  324,  323,  322,  321, 
	 320,  319,  318,  317,  316,  315,  314,  313,  312,  311, 
	 310,  309,  308,  307,  306,  305,  304,  303,  302,  301, 
	 300,  299,  298,  297,  296,  295,  294,  293,  292,  291, 
	 290,  289,  288,  287,  286,  285,  284,  283,  282,  281, 
	 277,  275,  272,  266,  263,  251,  248,  247,  246,  241, 
	 240,  239,  234,  232,  230,  223,  220,  219,  215,  211, 
	 202,  200,  199,  197,  196,  192,    3, 64689, 65531, 64671, 
	64688, 64686, 64686, 64681,  787,    4, 64685, 64685, 64680,  787, 
	   4, 65370, 65374,  160, 64683, 64683, 64684,  165,  161, 64674, 
	64674, 64682,  787,    4, 64781, 64781, 65287,  787,    4, 64673, 
	64673, 64679,  787,    4, 64670, 65260, 65285, 65375, 64676, 64677, 
	   4, 65358, 64672, 64675, 64669, 64668, 64870, 64797, 64784, 64646, 
	65351, 65338, 64644, 64645,  426, 65352, 65109, 64642, 64643,  245, 
	65290, 65273, 65304, 65314, 64639, 64640,  221,   -1
};
static short yypgo[] = {

	   0,    0,    0, 1046, 1064, 1065, 1067, 1030,  662,  666, 
	1071,  665,  506,  532, 1033, 1038, 1069, 1069, 1069, 1069, 
	1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 
	1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 
	1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 
	1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 
	1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 
	1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 
	1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 
	1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 
	1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 
	1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 
	1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 
	1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 
	1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 
	1069, 1069, 1069, 1069, 1051, 1083, 1088, 1088, 1091, 1092, 
	1073, 1095,  668,  667, 1080, 1077, 1077,  378,  600,  254, 
	  36,   36,   31,   22,    8,   21,   23,   23,   18, 1080, 
	 539,  538,  538,  538,  538,  538,  538,  538,  667,    0, 
	 535,  535,  535,  535,  535,  535,  535,  535,  535,  535, 
	 535,  534,  534,  534,  534,  534,  534,  534,  534,  534, 
	 534,  534, 1085, 1079,   26,  665, 1071,  664,  664,  664, 
	  40,   40, 1046,  669,  671, 1029, 1029, 1029, 1029, 1042, 
	1042, 1046, 1046, 1046, 1046, 1046, 1028, 1028, 1072, 1072, 
	1072, 1069, 1069, 1069, 1069, 1069, 1069, 1076, 1076, 1076, 
	1076, 1076, 1076, 1076, 1078, 1078, 1078, 1078, 1078, 1078, 
	1078, 1056, 1056, 1056, 1056, 1056, 1056, 1081, 1086, 1086, 
	1090, 1090,  537, 1093, 1093,  250,  510,  508,  849,  849, 
	 849,  849,  538,  527,  522,  507,  502,  533,  536,  108, 
	 212,  249,  516,  378, 1061, 1061,   39,  509, 1073, 1075, 
	1074, 1081, 1079, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 
	1069, 1069, 1069, 1071, 1066, 1066, 1066, 1066, 1046, 1027, 
	 670,  669,    0
};
static short yyrlen[] = {

	   0,    0,    0,    2,    7,    2,    2,    7,    7,   11, 
	   4,    0,    4,    4,    7,    7,    4,    4,    4,    4, 
	   4,    4,    4,    4,    4,    4,    4,    4,    2,    4, 
	   4,    4,    4,    4,    4,    4,    4,    4,    4,    4, 
	   4,    4,    4,    4,    4,    4,    4,    4,    4,    4, 
	   4,    4,    4,    4,    4,    4,    4,    4,    4,    4, 
	   4,    4,    4,    4,    4,    4,    4,    4,    4,    4, 
	   4,    4,    4,    4,    4,    4,    4,    4,    4,    4, 
	   4,    4,    4,    4,    4,    4,    4,    4,    4,    4, 
	   4,    4,    4,    4,    4,    4,    4,    4,    4,    4, 
	   4,    4,    4,    4,    4,    4,    4,    4,    4,    4, 
	   4,    4,    4,    4,    4,    4,    4,    4,    4,    4, 
	   4,    4,    4,    4,    4,    4,    4,    4,    4,    4, 
	   4,    4,    4,    4,    4,    4,    4,    4,    4,    4, 
	   4,    4,    4,    4,    4,    4,    4,    4,    4,    4, 
	   4,    4,    4,    4,    7,   10,    4,    4,    0,    0, 
	   7,    7,    2,    1,    1,    3,    4,    2,    1,    1, 
	   3,    1,    1,    1,    1,    1,    2,    1,    1,    3, 
	   6,    4,    1,    1,    1,    1,    1,    1,    3,    1, 
	   1,    1,    1,    1,    1,    1,    1,    1,    1,    1, 
	   1,    1,    1,    1,    1,    1,    1,    1,    1,    1, 
	   1,    1,    0,    3,    3,    1,    1,    2,    2,    1, 
	   3,    1,    1,    2,    1,    1,    1,    1,    1,    1, 
	   2,    1,    1,    1,    1,    2,    1,    2,    1,    1, 
	   1,    1,    1,    1,    1,    1,    2,    3,    3,    3, 
	   3,    3,    3,    3,    3,    3,    3,    3,    3,    3, 
	   3,    3,    3,    3,    3,    3,    3,    1,    1,    2, 
	   1,    2,    1,    1,    2,    1,    1,    1,    1,    1, 
	   2,    2,    1,    1,    1,    1,    1,    1,    1,    1, 
	   1,    1,    1,    1,    1,    2,    1,    1,   10,    8, 
	   5,    0,    1,    2,    4,    4,    2,    4,    2,    4, 
	   4,    4,    2,    0,    2,    1,    1,    0,    2,    1, 
	   2,    0,    2
};
#define YYS0	0
#define YYDELTA	622
#define YYNPACT	789
#define YYNDEF	192

#define YYr320	0
#define YYr321	1
#define YYr322	2
#define YYr12	3
#define YYr20	4
#define YYr21	5
#define YYr28	6
#define YYr31	7
#define YYr35	8
#define YYr36	9
#define YYr38	10
#define YYr40	11
#define YYr42	12
#define YYr43	13
#define YYr44	14
#define YYr45	15
#define YYr54	16
#define YYr55	17
#define YYr56	18
#define YYr57	19
#define YYr58	20
#define YYr59	21
#define YYr60	22
#define YYr61	23
#define YYr62	24
#define YYr63	25
#define YYr64	26
#define YYr65	27
#define YYr66	28
#define YYr67	29
#define YYr68	30
#define YYr69	31
#define YYr70	32
#define YYr71	33
#define YYr72	34
#define YYr73	35
#define YYr74	36
#define YYr75	37
#define YYr76	38
#define YYr77	39
#define YYr78	40
#define YYr79	41
#define YYr80	42
#define YYr81	43
#define YYr82	44
#define YYr83	45
#define YYr84	46
#define YYr85	47
#define YYr86	48
#define YYr87	49
#define YYr88	50
#define YYr89	51
#define YYr90	52
#define YYr91	53
#define YYr92	54
#define YYr93	55
#define YYr94	56
#define YYr95	57
#define YYr96	58
#define YYr97	59
#define YYr98	60
#define YYr99	61
#define YYr100	62
#define YYr101	63
#define YYr102	64
#define YYr103	65
#define YYr104	66
#define YYr105	67
#define YYr106	68
#define YYr107	69
#define YYr111	70
#define YYr112	71
#define YYr113	72
#define YYr114	73
#define YYr115	74
#define YYr116	75
#define YYr117	76
#define YYr118	77
#define YYr119	78
#define YYr120	79
#define YYr121	80
#define YYr122	81
#define YYr123	82
#define YYr124	83
#define YYr125	84
#define YYr126	85
#define YYr127	86
#define YYr128	87
#define YYr129	88
#define YYr130	89
#define YYr131	90
#define YYr132	91
#define YYr133	92
#define YYr134	93
#define YYr135	94
#define YYr136	95
#define YYr137	96
#define YYr138	97
#define YYr139	98
#define YYr140	99
#define YYr141	100
#define YYr142	101
#define YYr143	102
#define YYr144	103
#define YYr145	104
#define YYr146	105
#define YYr147	106
#define YYr148	107
#define YYr149	108
#define YYr150	109
#define YYr151	110
#define YYr152	111
#define YYr153	112
#define YYr154	113
#define YYr155	114
#define YYr156	115
#define YYr157	116
#define YYr158	117
#define YYr159	118
#define YYr160	119
#define YYr161	120
#define YYr162	121
#define YYr163	122
#define YYr164	123
#define YYr165	124
#define YYr166	125
#define YYr167	126
#define YYr168	127
#define YYr169	128
#define YYr170	129
#define YYr171	130
#define YYr172	131
#define YYr173	132
#define YYr174	133
#define YYr175	134
#define YYr176	135
#define YYr177	136
#define YYr178	137
#define YYr179	138
#define YYr182	139
#define YYr183	140
#define YYr184	141
#define YYr185	142
#define YYr186	143
#define YYr187	144
#define YYr188	145
#define YYr189	146
#define YYr190	147
#define YYr191	148
#define YYr192	149
#define YYr198	150
#define YYr199	151
#define YYr200	152
#define YYr201	153
#define YYr223	154
#define YYr230	155
#define YYr256	156
#define YYr257	157
#define YYr260	158
#define YYr263	159
#define YYr265	160
#define YYr268	161
#define YYr271	162
#define YYr279	163
#define YYr291	164
#define YYr301	165
#define YYr302	166
#define YYr319	167
#define YYr316	168
#define YYr312	169
#define YYr311	170
#define YYr310	171
#define YYr307	172
#define YYr306	173
#define YYr305	174
#define YYr304	175
#define YYr300	176
#define YYr299	177
#define YYr298	178
#define YYr292	179
#define YYr289	180
#define YYr287	181
#define YYr286	182
#define YYr285	183
#define YYr284	184
#define YYr283	185
#define YYr282	186
#define YYr281	187
#define YYr280	188
#define YYr269	189
#define YYr255	190
#define YYr254	191
#define YYr253	192
#define YYr252	193
#define YYr251	194
#define YYr250	195
#define YYr249	196
#define YYr248	197
#define YYr247	198
#define YYr246	199
#define YYr245	200
#define YYr244	201
#define YYr243	202
#define YYr242	203
#define YYr241	204
#define YYr240	205
#define YYr239	206
#define YYr238	207
#define YYr237	208
#define YYr236	209
#define YYr235	210
#define YYr234	211
#define YYr229	212
#define YYr225	213
#define YYr224	214
#define YYr41	215
#define YYr39	216
#define YYr34	217
#define YYr33	218
#define YYr32	219
#define YYr23	220
#define YYr22	221
#define YYr17	222
#define YYrACCEPT	YYr320
#define YYrERROR	YYr321
#define YYrLR2	YYr322
#if YYDEBUG
char * yysvar[] = {
	"$accept",
	"visible_text",
	"name_string",
	"bmp_file_name",
	"module_name",
	"ext_user_prm_data_name",
	"sub_family",
	"info_text",
	"diag_text",
	"octet_string",
	"const_prm_data",
	"config",
	"unsigned8",
	"unsigned16",
	"unsigned32",
	"prm_data_value",
	"octet",
	"numeric",
	"reference_number",
	"prm_text_ref",
	"reference_offset",
	"default_value",
	"min_value",
	"max_value",
	"bit_number",
	"const_offset",
	"module_reference",
	"ext_module_prm_data_len",
	"ext_mod_prm_len",
	"tx_delay",
	"rc_delay",
	"value",
	"error_type",
	"data_type_name",
	"bit_area",
	"Boolean",
	"text_item",
	"text_list",
	"ext_user_prm_data_def_opt",
	"ext_user_prm_data_def",
	"data_type_array",
	"allowed_values",
	"gsd",
	"gsd_header",
	"gsd_body",
	"line_end",
	"standard_gsd",
	"unit_definition_list",
	"extended_gsd_item",
	"prm_text_def",
	"ext_user_prm_data_const",
	"ext_user_prm_data_ref",
	"module_def_list",
	"module_def_item",
	"channel_diag_def",
	"alarm_requirement",
	"user_definition",
	"module_definition",
	"module_def_config",
	"opt_module_def_ext",
	"mod_ref_line",
	"unit_def_item",
	"ext_user_prm_data_def_values_opt",
	"diag_def",
	"unit_diag_area_def",
	"slot_def",
	"ph_interface_def",
	"master_alarm_support",
	"slave_family",
	"alarm_support",
	"module_refs",
	"mod_ref_string",
	"opt_module_refs",
	"slot_item",
	"$229",
	"slot_list",
	"ph_delay_item",
	"ph_delay_list",
	"$260",
	"$263",
	"value_list",
	"value_item",
	0
};
short yyrmap[] = {

	 320,  321,  322,   12,   20,   21,   28,   31,   35,   36, 
	  38,   40,   42,   43,   44,   45,   54,   55,   56,   57, 
	  58,   59,   60,   61,   62,   63,   64,   65,   66,   67, 
	  68,   69,   70,   71,   72,   73,   74,   75,   76,   77, 
	  78,   79,   80,   81,   82,   83,   84,   85,   86,   87, 
	  88,   89,   90,   91,   92,   93,   94,   95,   96,   97, 
	  98,   99,  100,  101,  102,  103,  104,  105,  106,  107, 
	 111,  112,  113,  114,  115,  116,  117,  118,  119,  120, 
	 121,  122,  123,  124,  125,  126,  127,  128,  129,  130, 
	 131,  132,  133,  134,  135,  136,  137,  138,  139,  140, 
	 141,  142,  143,  144,  145,  146,  147,  148,  149,  150, 
	 151,  152,  153,  154,  155,  156,  157,  158,  159,  160, 
	 161,  162,  163,  164,  165,  166,  167,  168,  169,  170, 
	 171,  172,  173,  174,  175,  176,  177,  178,  179,  182, 
	 183,  184,  185,  186,  187,  188,  189,  190,  191,  192, 
	 198,  199,  200,  201,  223,  230,  256,  257,  260,  263, 
	 265,  268,  271,  279,  291,  301,  302,  319,  316,  312, 
	 311,  310,  307,  306,  305,  304,  300,  299,  298,  292, 
	 289,  287,  286,  285,  284,  283,  282,  281,  280,  269, 
	 255,  254,  253,  252,  251,  250,  249,  248,  247,  246, 
	 245,  244,  243,  242,  241,  240,  239,  238,  237,  236, 
	 235,  234,  229,  225,  224,   41,   39,   34,   33,   32, 
	  23,   22,   17,    2,    4,    6,    7,    8,    9,   10, 
	  11,   13,   14,   15,   18,   19,   29,   30,   46,   47, 
	  48,   49,   50,   51,   52,   53,  202,  203,  204,  205, 
	 206,  207,  208,  209,  210,  211,  212,  213,  214,  215, 
	 216,  217,  218,  219,  220,  221,  222,  228,  231,  232, 
	 258,  259,  262,  266,  267,  270,  272,  274,  275,  276, 
	 277,  278,  288,  290,  294,  295,  296,  297,  303,  313, 
	 314,  315,  317,  318,  309,  308,  293,  273,  264,  261, 
	 233,  227,  226,  197,  196,  195,  194,  193,  181,  180, 
	 110,  109,  108,   37,   27,   26,   25,   24,   16,    5, 
	   3,    1,    0
};
short yysmap[] = {

	   0,    3,    6,    7,  202,  207,  240,  243,  256,  329, 
	 371,  393,  585,  589,  594,  595,  596,  597,  598,  599, 
	 600,  601,  602,  603,  604,  605,  606,  607,  608,  609, 
	 610,  611,  612,  613,  614,  615,  616,  617,  618,  619, 
	 620,  621,  622,  624,  625,  626,  627,  628,  629,  630, 
	 631,  632,  633,  634,  635,  636,  637,  638,  639,  640, 
	 641,  642,  643,  644,  645,  646,  647,  648,  649,  650, 
	 651,  652,  653,  654,  655,  656,  657,  658,  659,  660, 
	 661,  662,  663,  664,  665,  666,  667,  668,  669,  670, 
	 671,  672,  673,  674,  675,  676,  677,  678,  679,  680, 
	 681,  682,  683,  684,  685,  686,  687,  688,  689,  690, 
	 691,  692,  693,  694,  695,  696,  697,  698,  699,  700, 
	 701,  702,  703,  704,  705,  706,  707,  708,  709,  710, 
	 711,  712,  713,  714,  715,  716,  717,  718,  719,  720, 
	 721,  722,  723,  724,  725,  726,  727,  728,  729,  730, 
	 731,  732,  733,  734,  735,  736,  737,  744,  745,  750, 
	 765,  775,  779,  809,  827,  828,  831,  832,  834,  841, 
	 842,  843,  847,  850,  853,  857,  863,  867,  869,  873, 
	 874,  879,  887,  888,  900,  901,  903,  905,  906,  908, 
	 911,  915,  912,  910,  909,  907,  904,  898,  897,  896, 
	 894,  893,  892,  889,  886,  884,  883,  881,  880,  878, 
	 876,  872,  870,  868,  866,  864,  862,  861,  860,  859, 
	 858,  856,  854,  852,  849,  845,  844,  840,  839,  838, 
	 836,  835,  829,  826,  824,  821,  820,  813,  811,  810, 
	 808,  807,  806,  783,  782,  780,  778,  774,  770,  767, 
	 766,  764,  763,  761,  760,  758,  757,  756,  755,  754, 
	 752,  751,  749,  748,  747,  742,  741,  739,  738,  623, 
	 593,  592,  590,  588,  587,  583,  582,  580,  579,  577, 
	 575,  573,  572,  571,  570,  569,  568,  567,  566,  565, 
	 564,  563,  562,  561,  560,  559,  558,  557,  556,  555, 
	 554,  553,  552,  551,  550,  549,  548,  547,  546,  545, 
	 544,  543,  542,  541,  540,  539,  538,  537,  536,  535, 
	 534,  533,  531,  530,  529,  528,  527,  525,  524,  523, 
	 522,  521,  520,  519,  518,  517,  516,  515,  514,  513, 
	 512,  511,  510,  509,  508,  507,  506,  505,  504,  503, 
	 502,  501,  500,  499,  498,  497,  496,  495,  494,  493, 
	 492,  491,  490,  489,  488,  487,  486,  485,  484,  483, 
	 482,  481,  480,  479,  478,  477,  476,  475,  474,  473, 
	 472,  471,  470,  469,  468,  467,  466,  465,  464,  463, 
	 462,  461,  460,  459,  458,  455,  454,  453,  452,  451, 
	 450,  449,  448,  447,  446,  445,  444,  443,  442,  441, 
	 440,  439,  438,  436,  435,  434,  433,  432,  431,  430, 
	 429,  428,  427,  426,  404,  400,  398,  397,  396,  395, 
	 390,  388,  387,  386,  385,  384,  383,  382,  381,  380, 
	 379,  378,  377,  376,  375,  374,  373,  372,  370,  369, 
	 368,  367,  366,  365,  364,  363,  362,  361,  360,  359, 
	 358,  357,  356,  355,  354,  353,  352,  351,  350,  349, 
	 348,  347,  346,  345,  344,  343,  342,  341,  340,  339, 
	 338,  337,  336,  335,  334,  333,  332,  331,  330,  328, 
	 327,  326,  325,  324,  323,  322,  321,  320,  319,  318, 
	 317,  316,  315,  314,  313,  312,  311,  310,  309,  308, 
	 307,  306,  305,  304,  303,  302,  301,  300,  299,  298, 
	 297,  296,  295,  294,  293,  292,  291,  290,  289,  288, 
	 287,  286,  285,  284,  283,  282,  281,  280,  279,  278, 
	 277,  276,  275,  274,  273,  272,  271,  270,  269,  268, 
	 267,  266,  265,  264,  263,  262,  261,  260,  259,  258, 
	 257,  255,  254,  253,  252,  251,  250,  249,  248,  247, 
	 246,  245,  244,  242,  241,  239,  238,  237,  236,  234, 
	 233,  232,  231,  230,  229,  228,  227,  226,  225,  224, 
	 223,  222,  221,  220,  219,  218,  217,  216,  215,  214, 
	 213,  212,  211,  210,  209,  208,  197,  195,  194,  193, 
	 192,  183,  182,  181,  180,  179,  178,  177,  176,  175, 
	 174,  173,  172,  171,  170,  169,  168,  167,  166,  165, 
	 164,  163,  162,  161,  160,  159,  158,  157,  156,  155, 
	 154,  153,  152,  151,  150,  149,  148,  147,  146,  145, 
	 144,  143,  142,  141,  140,  139,  138,  137,  136,  135, 
	 134,  133,  132,  131,  130,  129,  128,  127,  126,  125, 
	 124,  123,  122,  121,  120,  119,  118,  117,  116,  115, 
	 114,  113,  112,  111,  110,  109,  108,  107,  106,  105, 
	 104,  103,  102,  101,  100,   99,   98,   97,   96,   95, 
	  94,   93,   92,   91,   90,   89,   88,   87,   86,   85, 
	  84,   83,   82,   81,   80,   79,   78,   77,   76,   75, 
	  74,   73,   72,   71,   70,   69,   68,   67,   66,   65, 
	  64,   63,   62,   61,   60,   59,   58,   57,   56,   55, 
	  54,   53,   52,   51,   50,   49,   48,   47,   46,   45, 
	  44,   43,   42,   41,   40,   39,   38,   37,   36,   35, 
	  34,   33,   32,   31,   30,   29,   28,   27,   26,   25, 
	  24,   23,   22,   21,   20,   19,   18,   17,   16,   15, 
	  14,   13,   12,   11,   10,    9,    8,    2,    1,  584, 
	 405,  456,  753,  457,  777,  740,  401,  581,  746,  586, 
	 532,  913,  902,  877,  814,  815,  816,  817,  818,  819, 
	 890,  895,  784,  785,  786,  787,  788,  789,  790,  791, 
	 792,  793,  794,  795,  796,  797,  798,  799,  800,  801, 
	 802,  803,  804,  805,  875,  914,  402,  882,  865,  822, 
	 823,  759,  825,  743,  769,  204,  203,  201,  200,  199, 
	 198,  776,  833,  773,  772,  771,  768,  830,  196,  389, 
	 191,  190,  189,  188,  187,  186,  185,  184,  235,  425, 
	 424,  423,  422,  421,  420,  419,  418,  417,  416,  415, 
	 414,  413,  412,  411,  410,  409,  408,  407,  406,  899, 
	 399,  591,  781,  837,  403,  855,  871,  848,  891,  846, 
	   5,    4,  206,  205,  812,  762,  576,  574,  578,  851, 
	 885,  392,  437,  526,  394,  391
};
int yy_parse::yyntoken = 233;
int yy_parse::yynvar = 82;
int yy_parse::yynstate = 916;
int yy_parse::yynrule = 323;
#endif



// C++ YACC parser code
// Copyright 1991 by Mortice Kern Systems Inc.  All rights reserved.
//
// If YYDEBUG is defined as 1 and yy_parse::yydebug is set to 1,
// yyparse() will print a travelogue of its actions as it reads
// and parses input.
//
// YYSYNC can be defined to cause yyparse() to attempt to always
// hold a lookahead token

const YY_MIN_STATE_NUM = 20;	// not useful to be too small!

#if YYDEBUG
#ifdef YYTRACE
long	* yy_parse::States	= yyStates;
#endif
yyTypedRules * yy_parse::Rules	= yyRules;
yyNamedType * yy_parse::TokenTypes = yyTokenTypes;

#define YY_TRACE(fn) { done = 0; fn(); if (done) YYRETURN(-1); }
#endif

// Constructor for yy_parse: user-provided tables
yy_parse::yy_parse(int sz, short * states, YYSTYPE * stack)
{
	mustfree = 0;
	if ((size = sz) < YY_MIN_STATE_NUM
	 || (stateStack = states) == (short *) 0
	 || (valueStack = stack) == (YYSTYPE *) 0) {
		fprintf(stderr,"Bad state/stack given");
		exit(1);
	}
	reset = 1;		// force reset
#if YYDEBUG
	yydebug = 0;
	typeStack = new short[size+1];
	if (typeStack == (short *) 0) {
		fprintf(stderr,"Cannot allocate typeStack");
		exit(1);
	}
#endif
}
// Constructor for yy_parse: allocate tables with new
yy_parse::yy_parse(int sz)
{
	size = sz;
	reset = 1;		// force reset
	mustfree = 1;		// delete space in deconstructor
#if YYDEBUG
	yydebug = 0;
	typeStack = new short[size+1];
#endif
	stateStack = new short[size+1];
	valueStack = new YYSTYPE[size+1];

	if (stateStack == (short *) 0 || valueStack == (YYSTYPE *) 0
#if YYDEBUG
		|| typeStack == (short *) 0
#endif
	    ) {
		fprintf(stderr,"Not enough space for parser stacks");
		exit(1);
	}
}
// Destructor for class yy_parse
//	Free up space
yy_parse::~yy_parse()
{
	if (mustfree) {
		delete stateStack;
		delete valueStack;
	}
	stateStack = (short *) 0;
#if YYDEBUG
	delete typeStack;
#endif
}

#ifdef YACC_WINDOWS

// The initial portion of the yacc parser.
// In an windows environment, it will load the desired
// resources, obtain pointers to them, and then call
// the protected member win_yyparse() to acutally begin the
// parsing. When complete, win_yyparse() will return a
// value back to our new yyparse() function, which will 
// record that value temporarily, release the resources
// from global memory, and finally return the value
// back to the caller of yyparse().

int
yy_parse::yyparse(yy_scan* ps)
{
	int wReturnValue;
	HANDLE hRes_table;
	short far *old_yydef;		// the following are used for saving
	short far *old_yyex;		// the current pointers
	short far *old_yyact;
	short far *old_yypact;
	short far *old_yygo;
	short far *old_yypgo;
	short far *old_yyrlen;

	// the following code will load the required
	// resources for a Windows based parser.

	hRes_table = LoadResource (hInst,
		FindResource (hInst, "UD_RES_yyYACC", "yyYACCTBL"));
	
	// return an error code if any
	// of the resources did not load

	if (hRes_table == (HANDLE)NULL)
		return (1);
	
	// the following code will lock the resources
	// into fixed memory locations for the parser
	// (also, save away the old pointer values)

	old_yydef = yydef;
	old_yyex = yyex;
	old_yyact = yyact;
	old_yypact = yypact;
	old_yygo = yygo;
	old_yypgo = yypgo;
	old_yyrlen = yyrlen;

	yydef = (short far *)LockResource (hRes_table);
	yyex = (short far *)(yydef + Sizeof_yydef);
	yyact = (short far *)(yyex + Sizeof_yyex);
	yypact = (short far *)(yyact + Sizeof_yyact);
	yygo = (short far *)(yypact + Sizeof_yypact);
	yypgo = (short far *)(yygo + Sizeof_yygo);
	yyrlen = (short far *)(yypgo + Sizeof_yypgo);

	// call the official yyparse() function

	wReturnValue = win_yyparse (ps);

	// unlock the resources

	UnlockResource (hRes_table);

	// and now free the resource

	FreeResource (hRes_table);

	//
	// restore previous pointer values
	//

	yydef = old_yydef;
	yyex = old_yyex;
	yyact = old_yyact;
	yypact = old_yypact;
	yygo = old_yygo;
	yypgo = old_yypgo;
	yyrlen = old_yyrlen;

	return (wReturnValue);
}	// end yyparse()


// The parser proper.
//	Note that this code is reentrant; you can return a value
//	and then resume parsing by recalling yyparse().
//	Call yyreset() before yyparse() if you want a fresh start

int
yy_parse::win_yyparse(yy_scan* ps)

#else /* YACC_WINDOWS */

// The parser proper.
//	Note that this code is reentrant; you can return a value
//	and then resume parsing by recalling yyparse().
//	Call yyreset() before yyparse() if you want a fresh start
int
yy_parse::yyparse(yy_scan* ps)

#endif /* YACC_WINDOWS */

{
#ifdef YACC_WINDOWS
	short far *yyp;	// needed as res tables locked in far memory
	short far *yyq;
#else
	short	* yyp, * yyq;		// table lookup
#endif /* YACC_WINDOWS */
	int	yyj;
#if YYDEBUG
	int	yyruletype = 0;
#endif

	if ((scan = ps) == (yy_scan *) 0) {	// scanner
		fprintf(stderr,"No scanner");
		exit(1);
	}

	if (reset) {			// start new parse
		yynerrs = 0;
		yyerrflag = 0;
		yyps = stateStack;
		yypv = valueStack;
#if YYDEBUG
		yytp = typeStack;
#endif
		yystate = YYS0;
		yyclearin();
		reset = 0;
	} else			// continue saved parse
		goto yyNext;			// after action

yyStack:
	if (++yyps > &stateStack[size]) {
		scan->yyerror("Parser stack overflow");
		YYABORT;
	}
	*yyps = yystate;	/* stack current state */
	*++yypv = yyval;	/* ... and value */
#if YYDEBUG
	if (yydebug) {
		*++yytp = yyruletype;	/* ... and type */
		YY_TRACE(yyShowState)
	}
#endif

	/*
	 * Look up next action in action table.
	 */
yyEncore:
#ifdef YYSYNC
	if (yychar < 0) {
		if ((yychar = scan->yylex()) < 0) {
			if (yychar == -2) YYABORT;
			yychar = 0;
		}	/* endif */
		yylval = ::yylval;
#if YYDEBUG
		if (yydebug)
			yyShowRead();	// show new input token
#endif
	}
#endif
#ifdef YACC_WINDOWS
	if (yystate >= Sizeof_yypact) 	/* simple state */
#else /* YACC_WINDOWS */
	if (yystate >= sizeof yypact/sizeof yypact[0]) 	/* simple state */
#endif /* YACC_WINDOWS */
		yyi = yystate - YYDELTA;	/* reduce in any case */
	else {
		if(*(yyp = &yyact[yypact[yystate]]) >= 0) {
			/* Look for a shift on yychar */
#ifndef YYSYNC
			if (yychar < 0) {
				if ((yychar = scan->yylex()) < 0) {
					if (yychar == -2) YYABORT;
					yychar = 0;
				}	/* endif */
				yylval = ::yylval;
#if YYDEBUG
				if (yydebug)
					yyShowRead();	// show new input token
#endif
			}
#endif
			yyq = yyp;
			yyi = yychar;
			while (yyi < *yyp++)
				;
			if (yyi == yyp[-1]) {
				yystate = yyneg(yyq[yyq-yyp]);
#if YYDEBUG
				if (yydebug) {
					yyruletype = yyGetType(yychar);
					YY_TRACE(yyShowShift)
				}
#endif
				yyval = yylval;		/* stack value */
				yyclearin();		/* clear token */
				if (yyerrflag)
					yyerrflag--;	/* successful shift */
				goto yyStack;
			}
		}

		/*
	 	 *	Fell through - take default action
	 	 */

#ifdef YACC_WINDOWS
		if (yystate >= Sizeof_yydef) 	/* simple state */
#else /* YACC_WINDOWS */
		if (yystate >= sizeof yydef /sizeof yydef[0])
#endif /* YACC_WINDOWS */
			goto yyError;
		if ((yyi = yydef[yystate]) < 0)	 { /* default == reduce? */

			/* Search exception table */
			yyp = &yyex[yyneg(yyi)];
#ifndef YYSYNC
			if (yychar < 0) {
				if ((yychar = scan->yylex()) < 0) {
					if (yychar == -2) YYABORT;
					yychar = 0;
				}	/* endif */
				yylval = ::yylval;
#if YYDEBUG
				if (yydebug)
					yyShowRead();	// show new input token
#endif
			}
#endif
			while((yyi = *yyp) >= 0 && yyi != yychar)
				yyp += 2;
			yyi = yyp[1];
		}
	}

	yyj = yyrlen[yyi];

#if YYDEBUG
	if (yydebug) {
		npop = yyj; rule = yyi;
		YY_TRACE(yyShowReduce)
		yytp -= yyj;
	}
#endif
	yyps -= yyj;		/* pop stacks */
	yypvt = yypv;		/* save top */
	yypv -= yyj;
	yyval = yypv[1];	/* default action $ = $1 */
#if YYDEBUG
	if (yydebug)
		yyruletype = yyRules[yyrmap[yyi]].type;
#endif
	switch (yyi) {		/* perform semantic action */
		
case YYr12: {	/* module_def_item :  info_text line_end */
 SET_MODULE_STRING(m_strInfoText,yypvt[-1].pString)
} break;

case YYr17: {	/* module_def_item :  ext_module_prm_data_len */

                                        if (CURRENT_MODULE != NULL)
                                        {
                                            CURRENT_MODULE->m_lExtModParamLen = yypvt[0].ulVal;
                                        }
                                    
} break;

case YYr20: {	/* module_definition :  _MODULE '=' module_def_config line_end opt_module_def_ext _END_MODULE line_end */

										FC_RELEASE_PTR(CURRENT_MODULE);
                                    
} break;

case YYr21: {	/* module_def_config :  module_name config */

										HRESULT hr = THIS_PTR->CreateModule(*yypvt[-1].pString,yypvt[0].pOctets);
										SAFE_DELETE(yypvt[-1].pString);
										SAFE_DELETE(yypvt[0].pOctets);

                                        if (FAILED(hr)) {
                                            YYRETURN(-1);
                                        }
                                    
} break;

case YYr22: {	/* config :  octet */
 
                                        yyval.pOctets = new CByteArray; GUARD(yyval.pOctets);
                                        yyval.pOctets->SetSize(0, 10);
                                        yyval.pOctets->Add((BYTE) yypvt[0].ulVal);
                                    
} break;

case YYr23: {	/* config :  config ',' octet */

                                        GUARD(yypvt[-2].pOctets);
                                        yyval.pOctets->Add((BYTE) yypvt[0].ulVal);
                                    
} break;

case YYr28: {	/* mod_ref_line :  module_reference line_end */

            if (CURRENT_MODULE != NULL)
            {
                CURRENT_MODULE->m_lModuleReference = yypvt[-1].ulVal;
            }
        
} break;

case YYr31: {	/* prm_text_def :  _PRM_TEXT '=' reference_number line_end text_list _END_PRM_TEXT line_end */

                                        if (yypvt[-2].pTextDef != NULL) 
                                        {
                                            yypvt[-2].pTextDef->PutRefNumber(yypvt[-4].ulVal);
                                            CPrmTextDef* pDef = NULL;
                                            if (PRM_TEXT_TABLE.Lookup(yypvt[-4].ulVal, pDef))
                                            {
                                                *pDef = *yypvt[-2].pTextDef;
                                                delete yypvt[-2].pTextDef;
                                                pDef->PutRefNumber(yypvt[-4].ulVal);
                                            }
                                            else
                                            {
                                                PRM_TEXT_TABLE.SetAt(yypvt[-4].ulVal, yypvt[-2].pTextDef);
                                            }
                                        }
                                        // Empty Text-Lists are ignored!
                                    
} break;

case YYr32: {	/* text_list :  text_item */

                                        yyval.pTextDef = new CPrmTextDef;
                                        GUARD(yyval.pTextDef);
                                        yyval.pTextDef->AddItem(yypvt[0].pTextItem);
                                    
} break;

case YYr33: {	/* text_list :  text_list text_item */

                                        GUARD(yypvt[-1].pTextDef);
                                        yyval.pTextDef->AddItem(yypvt[0].pTextItem);
                                    
} break;

case YYr34: {	/* text_list :  error CRLF */
 yyval.pTextDef = NULL; 
} break;

case YYr35: {	/* text_item :  _TEXT '(' prm_data_value ')' '=' visible_text line_end */
 
                                        yyval.pTextItem = new CPrmTextItem(yypvt[-4].ulVal, *yypvt[-1].pString);
                                        GUARD(yyval.pTextItem);
                                        SAFE_DELETE(yypvt[-1].pString);
                                    
} break;

case YYr36: {	/* ext_user_prm_data_def :  _EXT_USR_PRM_DATA '=' reference_number ext_user_prm_data_name line_end data_type_name default_value ext_user_prm_data_def_values_opt ext_user_prm_data_def_opt _END_EXT_USR_PRM_DATA line_end */

                                        if (CURRENT_USR_PRM_DEF == NULL) {
                                            CURRENT_USR_PRM_DEF = new CExtParamDefinition;
                                        }
                                        GUARD(CURRENT_USR_PRM_DEF);
                                        CURRENT_USR_PRM_DEF->m_dataType = yypvt[-5].dType;        // yypvt[-5].dType=data_type_name                                      
                                        CURRENT_USR_PRM_DEF->m_strName = *yypvt[-7].pString;        // yypvt[-7].pString=ext_user_prm_data_name
                                        SAFE_DELETE(yypvt[-7].pString);
                                        CURRENT_USR_PRM_DEF->m_lReference = yypvt[-8].ulVal;
                                        CURRENT_USR_PRM_DEF->m_lDefaultValue = yypvt[-4].ulVal;   // yypvt[-4].ulVal=default_value
                                        if (yypvt[-2].pTextDef != NULL)
                                        {
                                            // have also text definitions!
                                            CURRENT_USR_PRM_DEF->m_textDef = *yypvt[-2].pTextDef;    // yypvt[-2].pTextDef=ext_user_prm_data_def_opt
                                        }
                                        USR_PRM_DEF_DB.AddDefinition(CURRENT_USR_PRM_DEF);
                                        CURRENT_USR_PRM_DEF = NULL;
                                    
} break;

case YYr38: {	/* ext_user_prm_data_def_values_opt :  min_value '-' max_value line_end */

                                        if (CURRENT_USR_PRM_DEF == NULL) {
                                            CURRENT_USR_PRM_DEF = new CExtParamDefinition;
                                        }
                                        GUARD(CURRENT_USR_PRM_DEF);
                                        CURRENT_USR_PRM_DEF->m_lMinValue = yypvt[-3].ulVal;
                                        CURRENT_USR_PRM_DEF->m_lMaxValue = yypvt[-1].ulVal;
                                        CURRENT_USR_PRM_DEF->m_paramType = CExtParamDefinition::variableRange;
                                    
} break;

case YYr39: {	/* ext_user_prm_data_def_values_opt :  allowed_values */

                                        if (CURRENT_USR_PRM_DEF == NULL) {
                                            CURRENT_USR_PRM_DEF = new CExtParamDefinition;
                                        }
                                        GUARD(CURRENT_USR_PRM_DEF);
                                        CURRENT_USR_PRM_DEF->m_paramType = CExtParamDefinition::variableEnum;
                                        POSITION pos;
                                        GUARD(yypvt[0].pEnumValues);
                                        for (pos = yypvt[0].pEnumValues->GetHeadPosition(); pos != NULL; )
                                        {
                                            CURRENT_USR_PRM_DEF->m_listEnumValues.AddTail(yypvt[0].pEnumValues->GetNext(pos));
                                        }
                                        SAFE_DELETE(yypvt[0].pEnumValues);
                                    
} break;

case YYr40: {	/* ext_user_prm_data_def_opt :  */
 yyval.pTextDef = NULL; 
} break;

case YYr41: {	/* ext_user_prm_data_def_opt :  prm_text_ref */

                                        CPrmTextDef*    pDef = NULL;
                                        if (PRM_TEXT_TABLE.Lookup(yypvt[0].ulVal, pDef)) 
                                        {
                                            // text definition exists!
                                            yyval.pTextDef = pDef;
                                        }
                                        else 
                                        {
                                            // Create Forward Declaration of entry that is still to come in GSD
                                            yyval.pTextDef = new CPrmTextDef; 
                                        }
                                        GUARD(yyval.pTextDef)
                                    
} break;

case YYr42: {	/* prm_text_ref :  _PRM_TEXT_REF '=' reference_number line_end */

                                        yyval.ulVal = yypvt[-1].ulVal;
                                    
} break;

case YYr43: {	/* ext_module_prm_data_len :  _EXT_MOD_PRM_DATA_LEN '=' ext_mod_prm_len line_end */

                                        yyval.ulVal = yypvt[-1].ulVal;
                                    
} break;

case YYr44: {	/* ext_user_prm_data_const :  _EXT_USR_PRM_DATA_CONST '(' const_offset ')' '=' const_prm_data line_end */

                                        CDPExtUserParamObject *pParam = NULL;
                                        HRESULT hr = CComObject<CDP_ExtUserParam>::CreateInstance(&pParam);
                                        if (FAILED(hr)) {
                                            YYRETURN(-1);
                                        }
                                        pParam->AddRef();
                                        
                                        pParam->m_lOffset = yypvt[-4].ulVal;
                                        pParam->m_paramType = CExtParamDefinition::constantValue;
                                        SET_OCTET_VALUE(pParam, m_usrParamBytes, yypvt[-1].pOctets);
                                        
                                        if (CURRENT_MODULE != NULL) {
                                            // ext params belong to module
                                            CURRENT_MODULE->m_listExtUserParamObject.Add(pParam);
                                        }
                                        else
                                        {
                                            // ext params are device level
                                            STATION->m_listExtUserParamObject.Add(pParam);
                                        }

                                    
} break;

case YYr45: {	/* ext_user_prm_data_ref :  _EXT_USR_PRM_DATA_REF '(' reference_offset ')' '=' reference_number line_end */

                                        CDPExtUserParamObject *pParam = NULL;
                                        HRESULT hr = CComObject<CDP_ExtUserParam>::CreateInstance(&pParam);
                                        if (FAILED(hr)) {
                                            YYRETURN(-1);
                                        }
                                        pParam->AddRef();
                                        
                                        pParam->m_lRefNum = yypvt[-1].ulVal;
                                        pParam->m_lOffset = yypvt[-4].ulVal;
                                        pParam->m_paramType = CExtParamDefinition::referenceValue;

                                        
                                        if (CURRENT_MODULE != NULL) {
                                            // ext params belong to module
                                            CURRENT_MODULE->m_listExtUserParamObject.Add(pParam);
                                        }
                                        else
                                        {
                                            // ext params are device level
                                            STATION->m_listExtUserParamObject.Add(pParam);
                                        }
                                    
} break;

case YYr54: {	/* unit_def_item :  _GSD_REVISION '=' unsigned8 line_end */
   
													if(THIS_PTR->CheckRevision(yypvt[-1].ulVal) == false) {
														YYRETURN(-2);
													}
                                                
} break;

case YYr55: {	/* unit_def_item :  _VENDOR_NAME '=' name_string line_end */

                                                    SET_STRING_VALUE(STATION, m_strVendorName, yypvt[-1].pString);
                                                
} break;

case YYr56: {	/* unit_def_item :  _MODEL_NAME '=' name_string line_end */
   
                                                    SET_STRING_VALUE(STATION, m_strModelName, yypvt[-1].pString);
                                                
} break;

case YYr57: {	/* unit_def_item :  _REVISION '=' name_string line_end */

                                                    SET_STRING_VALUE(STATION, m_strRevision, yypvt[-1].pString);
                                                
} break;

case YYr58: {	/* unit_def_item :  _REVISION_NUMBER '=' unsigned8 line_end */

                                                    SET_INT_VALUE(STATION, m_lRevisionNumber, yypvt[-1].ulVal);
                                                
} break;

case YYr59: {	/* unit_def_item :  _IDENT_NUMBER '=' unsigned16 line_end */

                                                    SET_INT_VALUE(STATION, m_lIdentNumber, yypvt[-1].ulVal);
                                                
} break;

case YYr60: {	/* unit_def_item :  _PROTOCOL_IDENT '=' unsigned8 line_end */

                                                    SET_INT_VALUE(STATION, m_lProtocolIdent, yypvt[-1].ulVal);
                                                
} break;

case YYr61: {	/* unit_def_item :  _STATION_TYPE '=' unsigned8 line_end */

                                                    SET_INT_VALUE(STATION, m_lStationType, yypvt[-1].ulVal);
                                                    if (0 == yypvt[-1].ulVal) {
                                                        STATION->m_stationCategory = DP_Slave;
                                                    }
                                                    else {
                                                        STATION->m_stationCategory = DP_Master;
                                                    }
                                                
} break;

case YYr62: {	/* unit_def_item :  _FMS_SUPP '=' Boolean line_end */
   
                                                    SET_INT_VALUE(STATION, m_bFMS_Supported, yypvt[-1].bVal);
                                                
} break;

case YYr63: {	/* unit_def_item :  _HW_RELEASE '=' name_string line_end */

                                                    SET_STRING_VALUE(STATION, m_strHW_Release, yypvt[-1].pString);
                                                
} break;

case YYr64: {	/* unit_def_item :  _SW_RELEASE '=' name_string line_end */

                                                    SET_STRING_VALUE(STATION, m_strSW_Release, yypvt[-1].pString);
                                                
} break;

case YYr65: {	/* unit_def_item :  _PHYSICAL_LAYER '=' unsigned8 line_end */
   SET_INT_VALUE(STATION, m_lPhysLayer, yypvt[-1].ulVal); 
} break;

case YYr66: {	/* unit_def_item :  info_text line_end */
	SET_STRING_VALUE(STATION, m_strInfoText, yypvt[-1].pString); 
} break;

case YYr67: {	/* unit_def_item :  _9_6_SUPP '=' Boolean line_end */
   if (yypvt[-1].bVal) STATION->AddSupportedBaudrate(KBAUD_9_6); 
} break;

case YYr68: {	/* unit_def_item :  _19_2_SUPP '=' Boolean line_end */
   if (yypvt[-1].bVal) STATION->AddSupportedBaudrate(KBAUD_19_2); 
} break;

case YYr69: {	/* unit_def_item :  _93_75_SUPP '=' Boolean line_end */
   if (yypvt[-1].bVal) STATION->AddSupportedBaudrate(KBAUD_93_75); 
} break;

case YYr70: {	/* unit_def_item :  _187_5_SUPP '=' Boolean line_end */
   if (yypvt[-1].bVal) STATION->AddSupportedBaudrate(KBAUD_187_5); 
} break;

case YYr71: {	/* unit_def_item :  _500_SUPP '=' Boolean line_end */
   if (yypvt[-1].bVal) STATION->AddSupportedBaudrate(KBAUD_500); 
} break;

case YYr72: {	/* unit_def_item :  _1_5M_SUPP '=' Boolean line_end */
   if (yypvt[-1].bVal) STATION->AddSupportedBaudrate(MBAUD_1_5); 
} break;

case YYr73: {	/* unit_def_item :  _3M_SUPP '=' Boolean line_end */
   if (yypvt[-1].bVal) STATION->AddSupportedBaudrate(MBAUD_3); 
} break;

case YYr74: {	/* unit_def_item :  _6M_SUPP '=' Boolean line_end */
   if (yypvt[-1].bVal) STATION->AddSupportedBaudrate(MBAUD_6); 
} break;

case YYr75: {	/* unit_def_item :  _12M_SUPP '=' Boolean line_end */
   if (yypvt[-1].bVal) STATION->AddSupportedBaudrate(MBAUD_12); 
} break;

case YYr76: {	/* unit_def_item :  _31_25_SUPP '=' Boolean line_end */
   if (yypvt[-1].bVal) STATION->AddSupportedBaudrate(KBAUD_31_25); 
} break;

case YYr77: {	/* unit_def_item :  _45_45_SUPP '=' Boolean line_end */
   if (yypvt[-1].bVal) STATION->AddSupportedBaudrate(KBAUD_45_45); 
} break;

case YYr78: {	/* unit_def_item :  _MAXTSDR_9_6 '=' unsigned16 line_end */
   STATION->m_mapMaxTsdr.SetAt(KBAUD_9_6, yypvt[-1].ulVal); 
} break;

case YYr79: {	/* unit_def_item :  _MAXTSDR_19_2 '=' unsigned16 line_end */
   STATION->m_mapMaxTsdr.SetAt(KBAUD_19_2, yypvt[-1].ulVal); 
} break;

case YYr80: {	/* unit_def_item :  _MAXTSDR_93_75 '=' unsigned16 line_end */
   STATION->m_mapMaxTsdr.SetAt(KBAUD_93_75, yypvt[-1].ulVal); 
} break;

case YYr81: {	/* unit_def_item :  _MAXTSDR_187_5 '=' unsigned16 line_end */
   STATION->m_mapMaxTsdr.SetAt(KBAUD_187_5, yypvt[-1].ulVal); 
} break;

case YYr82: {	/* unit_def_item :  _MAXTSDR_500 '=' unsigned16 line_end */
   STATION->m_mapMaxTsdr.SetAt(KBAUD_500, yypvt[-1].ulVal); 
} break;

case YYr83: {	/* unit_def_item :  _MAXTSDR_1_5M '=' unsigned16 line_end */
   STATION->m_mapMaxTsdr.SetAt(MBAUD_1_5, yypvt[-1].ulVal); 
} break;

case YYr84: {	/* unit_def_item :  _MAXTSDR_3M '=' unsigned16 line_end */
   STATION->m_mapMaxTsdr.SetAt(MBAUD_3, yypvt[-1].ulVal); 
} break;

case YYr85: {	/* unit_def_item :  _MAXTSDR_6M '=' unsigned16 line_end */
   STATION->m_mapMaxTsdr.SetAt(MBAUD_6, yypvt[-1].ulVal); 
} break;

case YYr86: {	/* unit_def_item :  _MAXTSDR_12M '=' unsigned16 line_end */
   STATION->m_mapMaxTsdr.SetAt(MBAUD_12, yypvt[-1].ulVal); 
} break;

case YYr87: {	/* unit_def_item :  _MAXTSDR_31_25 '=' unsigned16 line_end */
   STATION->m_mapMaxTsdr.SetAt(KBAUD_31_25, yypvt[-1].ulVal); 
} break;

case YYr88: {	/* unit_def_item :  _MAXTSDR_45_45 '=' unsigned16 line_end */
   STATION->m_mapMaxTsdr.SetAt(KBAUD_45_45, yypvt[-1].ulVal); 
} break;

case YYr89: {	/* unit_def_item :  _REDUNDANCY '=' Boolean line_end */
   
                                                    SET_INT_VALUE(STATION, m_bRedundancy, yypvt[-1].bVal);
                                                
} break;

case YYr90: {	/* unit_def_item :  _REPEATER_CTRL_SIG '=' unsigned8 line_end */
   
                                                    SET_INT_VALUE(STATION, m_lRepeaterCtrlSig, yypvt[-1].ulVal);
                                                
} break;

case YYr91: {	/* unit_def_item :  _24V_PINS '=' unsigned8 line_end */
   
                                                    SET_INT_VALUE(STATION, m_lPins_24V, yypvt[-1].ulVal);
                                                
} break;

case YYr92: {	/* unit_def_item :  _IMPL_TYPE '=' name_string line_end */

                                                    SET_STRING_VALUE(STATION, m_strImplementationType, yypvt[-1].pString);
                                                
} break;

case YYr93: {	/* unit_def_item :  _BMP_DEVICE '=' bmp_file_name line_end */

                                                    SET_STRING_VALUE(STATION, m_strBitmapDevice, yypvt[-1].pString);
                                                
} break;

case YYr94: {	/* unit_def_item :  _BMP_DIAG '=' bmp_file_name line_end */

                                                    SET_STRING_VALUE(STATION, m_strBitmapDiag, yypvt[-1].pString);
                                                
} break;

case YYr95: {	/* unit_def_item :  _BMP_SF '=' bmp_file_name line_end */

                                                    SET_STRING_VALUE(STATION, m_strBitmapSF, yypvt[-1].pString);
                                                
} break;

case YYr96: {	/* unit_def_item :  _DOWNLOAD_SUPP '=' Boolean line_end */
   SET_INT_VALUE(STATION, m_bDownloadSupp, yypvt[-1].bVal); 
} break;

case YYr97: {	/* unit_def_item :  _UPLOAD_SUPP '=' Boolean line_end */
   SET_INT_VALUE(STATION, m_bUploadSupp, yypvt[-1].bVal); 
} break;

case YYr98: {	/* unit_def_item :  _ACT_PARA_BRCT_SUPP '=' Boolean line_end */
   SET_INT_VALUE(STATION, m_bActParaBrctSupp, yypvt[-1].bVal); 
} break;

case YYr99: {	/* unit_def_item :  _ACT_PARAM_SUPP '=' Boolean line_end */
   SET_INT_VALUE(STATION, m_bActParamSupp, yypvt[-1].bVal); 
} break;

case YYr100: {	/* unit_def_item :  _MAX_MPS_LENGTH '=' unsigned32 line_end */
   SET_INT_VALUE(STATION, m_lMaxMPSLen, yypvt[-1].ulVal); 
} break;

case YYr101: {	/* unit_def_item :  _MAX_LSDU_MS '=' unsigned8 line_end */
   SET_INT_VALUE(STATION, m_lMaxLsduMS, yypvt[-1].ulVal); 
} break;

case YYr102: {	/* unit_def_item :  _MAX_LSDU_MM '=' unsigned8 line_end */
   SET_INT_VALUE(STATION, m_lMaxLsduMM, yypvt[-1].ulVal); 
} break;

case YYr103: {	/* unit_def_item :  _MIN_POLL_TIMEOUT '=' unsigned16 line_end */
   SET_INT_VALUE(STATION, m_lMinPollTimeout, yypvt[-1].ulVal); 
} break;

case YYr104: {	/* unit_def_item :  _DPV1_MASTER '=' Boolean line_end */
   SET_INT_VALUE(STATION, m_bDPV1Master, yypvt[-1].bVal); 
} break;

case YYr105: {	/* unit_def_item :  _DPV1_CONFORMANCE_CLASS '=' unsigned8 line_end */
	SET_INT_VALUE(STATION,m_nDPV1ConformanceClass,(short)yypvt[-1].ulVal); 
} break;

case YYr106: {	/* unit_def_item :  _C1_MASTER_RW_SUPP '=' Boolean line_end */
	SET_INT_VALUE(STATION,m_bMasterC1RWSupp,yypvt[-1].bVal); 
} break;

case YYr107: {	/* unit_def_item :  _M_DPV1_ALARM_SUPP '=' Boolean line_end */
	SET_INT_VALUE(STATION,m_bDPV1AlarmSupp,yypvt[-1].bVal); 
} break;

case YYr111: {	/* unit_def_item :  _TRDY_9_6 '=' unsigned8 line_end */
   STATION->m_mapTrdy.SetAt(KBAUD_9_6, yypvt[-1].ulVal); 
} break;

case YYr112: {	/* unit_def_item :  _TRDY_19_2 '=' unsigned8 line_end */
   STATION->m_mapTrdy.SetAt(KBAUD_19_2, yypvt[-1].ulVal); 
} break;

case YYr113: {	/* unit_def_item :  _TRDY_93_75 '=' unsigned8 line_end */
   STATION->m_mapTrdy.SetAt(KBAUD_93_75, yypvt[-1].ulVal); 
} break;

case YYr114: {	/* unit_def_item :  _TRDY_187_5 '=' unsigned8 line_end */
   STATION->m_mapTrdy.SetAt(KBAUD_187_5, yypvt[-1].ulVal); 
} break;

case YYr115: {	/* unit_def_item :  _TRDY_500 '=' unsigned8 line_end */
   STATION->m_mapTrdy.SetAt(KBAUD_500, yypvt[-1].ulVal); 
} break;

case YYr116: {	/* unit_def_item :  _TRDY_1_5M '=' unsigned8 line_end */
   STATION->m_mapTrdy.SetAt(MBAUD_1_5, yypvt[-1].ulVal); 
} break;

case YYr117: {	/* unit_def_item :  _TRDY_3M '=' unsigned8 line_end */
   STATION->m_mapTrdy.SetAt(MBAUD_3, yypvt[-1].ulVal); 
} break;

case YYr118: {	/* unit_def_item :  _TRDY_6M '=' unsigned8 line_end */
   STATION->m_mapTrdy.SetAt(MBAUD_6, yypvt[-1].ulVal); 
} break;

case YYr119: {	/* unit_def_item :  _TRDY_12M '=' unsigned8 line_end */
   STATION->m_mapTrdy.SetAt(MBAUD_12, yypvt[-1].ulVal); 
} break;

case YYr120: {	/* unit_def_item :  _TRDY_31_25 '=' unsigned8 line_end */
   STATION->m_mapTrdy.SetAt(KBAUD_31_25, yypvt[-1].ulVal); 
} break;

case YYr121: {	/* unit_def_item :  _TRDY_45_45 '=' unsigned8 line_end */
   STATION->m_mapTrdy.SetAt(KBAUD_45_45, yypvt[-1].ulVal); 
} break;

case YYr122: {	/* unit_def_item :  _TQUI_9_6 '=' unsigned8 line_end */
   STATION->m_mapTqui.SetAt(KBAUD_9_6, yypvt[-1].ulVal); 
} break;

case YYr123: {	/* unit_def_item :  _TQUI_19_2 '=' unsigned8 line_end */
   STATION->m_mapTqui.SetAt(KBAUD_19_2, yypvt[-1].ulVal); 
} break;

case YYr124: {	/* unit_def_item :  _TQUI_93_75 '=' unsigned8 line_end */
   STATION->m_mapTqui.SetAt(KBAUD_93_75, yypvt[-1].ulVal); 
} break;

case YYr125: {	/* unit_def_item :  _TQUI_187_5 '=' unsigned8 line_end */
   STATION->m_mapTqui.SetAt(KBAUD_187_5, yypvt[-1].ulVal); 
} break;

case YYr126: {	/* unit_def_item :  _TQUI_500 '=' unsigned8 line_end */
   STATION->m_mapTqui.SetAt(KBAUD_500, yypvt[-1].ulVal); 
} break;

case YYr127: {	/* unit_def_item :  _TQUI_1_5M '=' unsigned8 line_end */
   STATION->m_mapTqui.SetAt(MBAUD_1_5, yypvt[-1].ulVal); 
} break;

case YYr128: {	/* unit_def_item :  _TQUI_3M '=' unsigned8 line_end */
   STATION->m_mapTqui.SetAt(MBAUD_3, yypvt[-1].ulVal); 
} break;

case YYr129: {	/* unit_def_item :  _TQUI_6M '=' unsigned8 line_end */
   STATION->m_mapTqui.SetAt(MBAUD_6, yypvt[-1].ulVal); 
} break;

case YYr130: {	/* unit_def_item :  _TQUI_12M '=' unsigned8 line_end */
   STATION->m_mapTqui.SetAt(MBAUD_12, yypvt[-1].ulVal); 
} break;

case YYr131: {	/* unit_def_item :  _TQUI_31_25 '=' unsigned8 line_end */
   STATION->m_mapTqui.SetAt(KBAUD_31_25, yypvt[-1].ulVal); 
} break;

case YYr132: {	/* unit_def_item :  _TQUI_45_45 '=' unsigned8 line_end */
   STATION->m_mapTqui.SetAt(KBAUD_45_45, yypvt[-1].ulVal); 
} break;

case YYr133: {	/* unit_def_item :  _TSET_9_6 '=' unsigned8 line_end */
   STATION->m_mapTset.SetAt(KBAUD_9_6, yypvt[-1].ulVal); 
} break;

case YYr134: {	/* unit_def_item :  _TSET_19_2 '=' unsigned8 line_end */
   STATION->m_mapTset.SetAt(KBAUD_19_2, yypvt[-1].ulVal); 
} break;

case YYr135: {	/* unit_def_item :  _TSET_93_75 '=' unsigned8 line_end */
   STATION->m_mapTset.SetAt(KBAUD_93_75, yypvt[-1].ulVal); 
} break;

case YYr136: {	/* unit_def_item :  _TSET_187_5 '=' unsigned8 line_end */
   STATION->m_mapTset.SetAt(KBAUD_187_5, yypvt[-1].ulVal); 
} break;

case YYr137: {	/* unit_def_item :  _TSET_500 '=' unsigned8 line_end */
   STATION->m_mapTset.SetAt(KBAUD_500, yypvt[-1].ulVal); 
} break;

case YYr138: {	/* unit_def_item :  _TSET_1_5M '=' unsigned8 line_end */
   STATION->m_mapTset.SetAt(MBAUD_1_5, yypvt[-1].ulVal); 
} break;

case YYr139: {	/* unit_def_item :  _TSET_3M '=' unsigned8 line_end */
   STATION->m_mapTset.SetAt(MBAUD_3, yypvt[-1].ulVal); 
} break;

case YYr140: {	/* unit_def_item :  _TSET_6M '=' unsigned8 line_end */
   STATION->m_mapTset.SetAt(MBAUD_6, yypvt[-1].ulVal); 
} break;

case YYr141: {	/* unit_def_item :  _TSET_12M '=' unsigned8 line_end */
   STATION->m_mapTset.SetAt(MBAUD_12, yypvt[-1].ulVal); 
} break;

case YYr142: {	/* unit_def_item :  _TSET_31_25 '=' unsigned8 line_end */
   STATION->m_mapTset.SetAt(KBAUD_31_25, yypvt[-1].ulVal); 
} break;

case YYr143: {	/* unit_def_item :  _TSET_45_45 '=' unsigned8 line_end */
   STATION->m_mapTset.SetAt(KBAUD_45_45, yypvt[-1].ulVal); 
} break;

case YYr144: {	/* unit_def_item :  _TSDI_9_6 '=' unsigned16 line_end */
   STATION->m_mapTsdi.SetAt(KBAUD_9_6, yypvt[-1].ulVal); 
} break;

case YYr145: {	/* unit_def_item :  _TSDI_19_2 '=' unsigned16 line_end */
   STATION->m_mapTsdi.SetAt(KBAUD_19_2, yypvt[-1].ulVal); 
} break;

case YYr146: {	/* unit_def_item :  _TSDI_93_75 '=' unsigned16 line_end */
   STATION->m_mapTsdi.SetAt(KBAUD_93_75, yypvt[-1].ulVal); 
} break;

case YYr147: {	/* unit_def_item :  _TSDI_187_5 '=' unsigned16 line_end */
   STATION->m_mapTsdi.SetAt(KBAUD_187_5, yypvt[-1].ulVal); 
} break;

case YYr148: {	/* unit_def_item :  _TSDI_500 '=' unsigned16 line_end */
   STATION->m_mapTsdi.SetAt(KBAUD_500, yypvt[-1].ulVal); 
} break;

case YYr149: {	/* unit_def_item :  _TSDI_1_5M '=' unsigned16 line_end */
   STATION->m_mapTsdi.SetAt(MBAUD_1_5, yypvt[-1].ulVal); 
} break;

case YYr150: {	/* unit_def_item :  _TSDI_3M '=' unsigned16 line_end */
   STATION->m_mapTsdi.SetAt(MBAUD_3, yypvt[-1].ulVal); 
} break;

case YYr151: {	/* unit_def_item :  _TSDI_6M '=' unsigned16 line_end */
   STATION->m_mapTsdi.SetAt(MBAUD_6, yypvt[-1].ulVal); 
} break;

case YYr152: {	/* unit_def_item :  _TSDI_12M '=' unsigned16 line_end */
   STATION->m_mapTsdi.SetAt(MBAUD_12, yypvt[-1].ulVal); 
} break;

case YYr153: {	/* unit_def_item :  _TSDI_31_25 '=' unsigned16 line_end */
   STATION->m_mapTsdi.SetAt(KBAUD_31_25, yypvt[-1].ulVal); 
} break;

case YYr154: {	/* unit_def_item :  _TSDI_45_45 '=' unsigned16 line_end */
   STATION->m_mapTsdi.SetAt(KBAUD_45_45, yypvt[-1].ulVal); 
} break;

case YYr155: {	/* unit_def_item :  _LAS_LEN '=' unsigned8 line_end */
   SET_INT_VALUE(STATION, m_lLasLen, yypvt[-1].ulVal); 
} break;

case YYr156: {	/* unit_def_item :  _MAX_SLAVES_SUPP '=' unsigned8 line_end */
   SET_INT_VALUE(STATION, m_lMaxSlavesSupp, yypvt[-1].ulVal); 
} break;

case YYr157: {	/* unit_def_item :  _MAX_MASTER_INP_LEN '=' unsigned8 line_end */
   SET_INT_VALUE(STATION, m_lMaxMasterInputLen, yypvt[-1].ulVal); 
} break;

case YYr158: {	/* unit_def_item :  _MAX_MASTER_OUT_LEN '=' unsigned8 line_end */
   SET_INT_VALUE(STATION, m_lMaxMasterOutputLen, yypvt[-1].ulVal); 
} break;

case YYr159: {	/* unit_def_item :  _MAX_MASTER_DATA_LEN '=' unsigned16 line_end */
   SET_INT_VALUE(STATION, m_lMaxMasterDataLen, yypvt[-1].ulVal); 
} break;

case YYr160: {	/* unit_def_item :  _MASTER_FREEZE_MODE_SUPP '=' Boolean line_end */
	SET_INT_VALUE(STATION, m_bMasterFreezeModeSupp, yypvt[-1].bVal); 
} break;

case YYr161: {	/* unit_def_item :  _MASTER_SYNC_MODE_SUPP '=' Boolean line_end */
	SET_INT_VALUE(STATION, m_bMasterSyncModeSupp, yypvt[-1].bVal); 
} break;

case YYr162: {	/* unit_def_item :  _MASTER_FAIL_SAFE_SUPP '=' Boolean line_end */
	SET_INT_VALUE(STATION, m_bFailSafeSupp, yypvt[-1].bVal); 
} break;

case YYr163: {	/* unit_def_item :  _FREEZE_MODE_SUPP '=' Boolean line_end */
   
                                                    SET_INT_VALUE(STATION, m_bFreezeModeSupp, yypvt[-1].bVal);
                                                
} break;

case YYr164: {	/* unit_def_item :  _SYNC_MODE_SUPP '=' Boolean line_end */
   
                                                    SET_INT_VALUE(STATION, m_bSyncModeSupp, yypvt[-1].bVal);
                                                
} break;

case YYr165: {	/* unit_def_item :  _AUTO_BAUD_SUPP '=' Boolean line_end */
   
                                                    SET_INT_VALUE(STATION, m_bAutoBaudSupp, yypvt[-1].bVal);
                                                
} break;

case YYr166: {	/* unit_def_item :  _SET_SLAVE_ADD_SUPP '=' Boolean line_end */
   
                                                    SET_INT_VALUE(STATION, m_bSetSlaveAddSupp, yypvt[-1].bVal);
                                                
} break;

case YYr167: {	/* unit_def_item :  _USER_PRM_DATA_LEN '=' unsigned8 line_end */
   
                                                    SET_INT_VALUE(STATION, m_lenUserPrmData, yypvt[-1].ulVal);
                                                
} break;

case YYr168: {	/* unit_def_item :  _USER_PRM_DATA '=' octet_string line_end */

                                                    SET_OCTET_VALUE(STATION, m_userPrmData, yypvt[-1].pOctets);
                                                
} break;

case YYr169: {	/* unit_def_item :  _USER_PRM_DATA_DEF '=' octet_string line_end */
 SAFE_DELETE(yypvt[-1].pOctets); 
} break;

case YYr170: {	/* unit_def_item :  _MIN_SLAVE_INTERVALL '=' unsigned16 line_end */
   
                                                    SET_INT_VALUE(STATION, m_lMinSlaveIntervall, yypvt[-1].ulVal);
                                                
} break;

case YYr171: {	/* unit_def_item :  _MODULAR_STATION '=' Boolean line_end */
   
                                                    GUARD(STATION);
                                                    STATION->m_bModularStation = (yypvt[-1].bVal != 0);
                                                    if (STATION->m_bModularStation) {
                                                        STATION->m_lMaxModule    = (STATION->m_lMaxModule != NOT_SPECIFIED) ? STATION->m_lMaxModule : MISSING;
                                                        STATION->m_lMaxInputLen  = (STATION->m_lMaxInputLen != NOT_SPECIFIED) ? STATION->m_lMaxInputLen : MISSING;
                                                        STATION->m_lMaxOutputLen = (STATION->m_lMaxOutputLen != NOT_SPECIFIED) ? STATION->m_lMaxOutputLen : MISSING;
                                                        STATION->m_lMaxDataLen   = (STATION->m_lMaxDataLen != NOT_SPECIFIED) ? STATION->m_lMaxDataLen : MISSING;
                                                    }
                                                    else {
                                                        STATION->m_lMaxModule    = NOT_SPECIFIED;
                                                        STATION->m_lMaxInputLen  = NOT_SPECIFIED;
                                                        STATION->m_lMaxOutputLen = NOT_SPECIFIED;
                                                        STATION->m_lMaxDataLen   = NOT_SPECIFIED;
                                                    }
                                                
} break;

case YYr172: {	/* unit_def_item :  _MAX_MODULE '=' unsigned8 line_end */
   
                                                    SET_INT_VALUE(STATION, m_lMaxModule, yypvt[-1].ulVal);
                                                
} break;

case YYr173: {	/* unit_def_item :  _MAX_INPUT_LEN '=' unsigned8 line_end */
   
                                                    SET_INT_VALUE(STATION, m_lMaxInputLen, yypvt[-1].ulVal);
                                                
} break;

case YYr174: {	/* unit_def_item :  _MAX_OUTPUT_LEN '=' unsigned8 line_end */
   
                                                    SET_INT_VALUE(STATION, m_lMaxOutputLen, yypvt[-1].ulVal);
                                                
} break;

case YYr175: {	/* unit_def_item :  _MAX_DATA_LEN '=' unsigned16 line_end */
   
                                                    SET_INT_VALUE(STATION, m_lMaxDataLen, yypvt[-1].ulVal);
                                                
} break;

case YYr176: {	/* unit_def_item :  _FAIL_SAFE '=' Boolean line_end */
   
                                                    SET_INT_VALUE(STATION, m_bFailSafe, yypvt[-1].bVal);
                                                
} break;

case YYr177: {	/* unit_def_item :  _FAIL_SAVE_REQUIRED '=' Boolean line_end */
 SET_INT_VALUE(STATION, m_bFailSafeRq, yypvt[-1].bVal);
} break;

case YYr178: {	/* unit_def_item :  _DIAG_UPDATE_DELAY '=' unsigned8 line_end */
 SET_INT_VALUE(STATION, m_nDiagUpdateDelay,(short)yypvt[-1].ulVal);
} break;

case YYr179: {	/* unit_def_item :  _MAX_DIAG_DATA_LEN '=' unsigned8 line_end */
 SET_INT_VALUE(STATION, m_lMaxDiagDataLen, yypvt[-1].ulVal);
} break;

case YYr182: {	/* unit_def_item :  _DPV1_SLAVE '=' Boolean line_end */
 SET_INT_VALUE(STATION, m_bDPV1Slave, yypvt[-1].bVal);
} break;

case YYr183: {	/* unit_def_item :  _C1_RW_SUPP '=' Boolean line_end */
 SET_INT_VALUE(STATION,m_CommRel[C1-1].m_bReadWriteSupp,yypvt[-1].bVal);
} break;

case YYr184: {	/* unit_def_item :  _C2_RW_SUPP '=' Boolean line_end */
 SET_INT_VALUE(STATION,m_CommRel[C2-1].m_bReadWriteSupp,yypvt[-1].bVal);
} break;

case YYr185: {	/* unit_def_item :  _C1_MAX_DATA_LEN '=' unsigned8 line_end */
 SET_INT_VALUE(STATION,m_CommRel[C1-1].m_nMaxDataLen,(short)yypvt[-1].ulVal);
} break;

case YYr186: {	/* unit_def_item :  _C2_MAX_DATA_LEN '=' unsigned8 line_end */
 SET_INT_VALUE(STATION,m_CommRel[C2-1].m_nMaxDataLen,(short)yypvt[-1].ulVal);
} break;

case YYr187: {	/* unit_def_item :  _C1_RESPONSE_TO '=' unsigned16 line_end */
 SET_INT_VALUE(STATION,m_CommRel[C1-1].m_lResponseTimeOut,yypvt[-1].ulVal);
} break;

case YYr188: {	/* unit_def_item :  _C2_RESPONSE_TO '=' unsigned16 line_end */
 SET_INT_VALUE(STATION,m_CommRel[C2-1].m_lResponseTimeOut,yypvt[-1].ulVal);
} break;

case YYr189: {	/* unit_def_item :  _C1_RW_REQ '=' Boolean line_end */
 SET_INT_VALUE(STATION,m_CommRel[C1-1].m_bReadWriteRequired,yypvt[-1].bVal);
} break;

case YYr190: {	/* unit_def_item :  _C2_RW_REQ '=' Boolean line_end */
 SET_INT_VALUE(STATION,m_CommRel[C2-1].m_bReadWriteRequired,yypvt[-1].bVal);
} break;

case YYr191: {	/* unit_def_item :  _C2_MAX_CNT_CHANNELS '=' unsigned8 line_end */
 SET_INT_VALUE(STATION,m_CommRel[C2-1].m_nMaxCountChannels,(short)yypvt[-1].ulVal);
} break;

case YYr192: {	/* unit_def_item :  _MAX_INIT_PDU_LEN '=' unsigned8 line_end */
 SET_INT_VALUE(STATION,m_nMaxInitPDULen,(short)yypvt[-1].ulVal);
} break;

case YYr198: {	/* unit_def_item :  _DPV1_DATA_TYPES '=' Boolean line_end */
 SET_INT_VALUE(STATION,m_bDPV1DataTypes,yypvt[-1].bVal); 
} break;

case YYr199: {	/* unit_def_item :  _WD_BASE_1MS_SUPP '=' Boolean line_end */
 SET_INT_VALUE(STATION,m_bWDBase1msSupp,yypvt[-1].bVal); 
} break;

case YYr200: {	/* unit_def_item :  _CHECK_CFG_MODE '=' Boolean line_end */
 SET_INT_VALUE(STATION,m_bCheckCfgMode, yypvt[-1].bVal); 
} break;

case YYr201: {	/* unit_def_item :  _MAX_USER_PRM_DATA_LEN '=' unsigned8 line_end */
 SET_INT_VALUE(STATION, m_lMaxUserPrmDataLen, yypvt[-1].ulVal);
} break;

case YYr223: {	/* channel_diag_def :  _CHANNEL_DIAG '(' error_type ')' '=' diag_text line_end */
 
			HRESULT hr = THIS_PTR->CreateChannelDiag(yypvt[-4].ulVal,*yypvt[-1].pString);
			SAFE_DELETE(yypvt[-1].pString);
			if (FAILED(hr)) {
				YYRETURN(-1);
			}
		
} break;

case YYr224: {	/* info_text :  _INFO_TEXT '=' name_string */
 yyval.pString = yypvt[0].pString; 
} break;

case YYr225: {	/* module_refs :  module_reference '-' module_reference */
 THIS_PTR->AddModRef(yypvt[-2].ulVal,yypvt[0].ulVal); 
} break;

case YYr229: {	/* slot_item :  _SLOT '(' unsigned8 ')' '=' name_string module_reference */
 THIS_PTR->ClearModRefList(); 
} break;

case YYr230: {	/* slot_item :  _SLOT '(' unsigned8 ')' '=' name_string module_reference $229 opt_module_refs line_end */
	
			GUARD(yypvt[-4].pString);
			HRESULT hr = THIS_PTR->CreateSlot(yypvt[-7].ulVal,yypvt[-4].pString,yypvt[-3].ulVal); 
			//clean up first
			SAFE_DELETE(yypvt[-4].pString);
			THIS_PTR->ClearModRefList();
			if (FAILED(hr)) {
				YYRETURN(-1);
			}
		
} break;

case YYr234: {	/* tx_delay :  _TX_DEL_9_6 */
 yyval.ulVal = KBAUD_9_6; 
} break;

case YYr235: {	/* tx_delay :  _TX_DEL_19_2 */
 yyval.ulVal = KBAUD_19_2; 
} break;

case YYr236: {	/* tx_delay :  _TX_DEL_31_25 */
 yyval.ulVal = KBAUD_31_25; 
} break;

case YYr237: {	/* tx_delay :  _TX_DEL_45_45 */
 yyval.ulVal = KBAUD_45_45; 
} break;

case YYr238: {	/* tx_delay :  _TX_DEL_93_75 */
 yyval.ulVal = KBAUD_93_75; 
} break;

case YYr239: {	/* tx_delay :  _TX_DEL_187_5 */
 yyval.ulVal = KBAUD_187_5; 
} break;

case YYr240: {	/* tx_delay :  _TX_DEL_500 */
 yyval.ulVal = KBAUD_500; 
} break;

case YYr241: {	/* tx_delay :  _TX_DEL_1_5M */
 yyval.ulVal = MBAUD_1_5; 
} break;

case YYr242: {	/* tx_delay :  _TX_DEL_3M */
 yyval.ulVal = MBAUD_3; 
} break;

case YYr243: {	/* tx_delay :  _TX_DEL_6M */
 yyval.ulVal = MBAUD_6; 
} break;

case YYr244: {	/* tx_delay :  _TX_DEL_12M */
 yyval.ulVal = MBAUD_12; 
} break;

case YYr245: {	/* rc_delay :  _RC_DEL_9_6 */
 yyval.ulVal = KBAUD_9_6; 
} break;

case YYr246: {	/* rc_delay :  _RC_DEL_19_2 */
 yyval.ulVal = KBAUD_19_2 ; 
} break;

case YYr247: {	/* rc_delay :  _RC_DEL_31_25 */
 yyval.ulVal = KBAUD_31_25; 
} break;

case YYr248: {	/* rc_delay :  _RC_DEL_45_45 */
 yyval.ulVal = KBAUD_45_45; 
} break;

case YYr249: {	/* rc_delay :  _RC_DEL_93_75 */
 yyval.ulVal = KBAUD_93_75; 
} break;

case YYr250: {	/* rc_delay :  _RC_DEL_187_5 */
 yyval.ulVal = KBAUD_187_5; 
} break;

case YYr251: {	/* rc_delay :  _RC_DEL_500 */
 yyval.ulVal = KBAUD_500; 
} break;

case YYr252: {	/* rc_delay :  _RC_DEL_1_5M */
 yyval.ulVal = MBAUD_1_5; 
} break;

case YYr253: {	/* rc_delay :  _RC_DEL_3M */
 yyval.ulVal = MBAUD_3; 
} break;

case YYr254: {	/* rc_delay :  _RC_DEL_6M */
 yyval.ulVal = MBAUD_6; 
} break;

case YYr255: {	/* rc_delay :  _RC_DEL_12M */
 yyval.ulVal = MBAUD_12; 
} break;

case YYr256: {	/* ph_delay_item :  tx_delay '=' unsigned16 line_end */
	if(CURRENT_PI) { CURRENT_PI->AddTXDelay(yypvt[-3].ulVal,yypvt[-1].ulVal); } 
} break;

case YYr257: {	/* ph_delay_item :  rc_delay '=' unsigned16 line_end */
	if(CURRENT_PI) { CURRENT_PI->AddRCDelay(yypvt[-3].ulVal,yypvt[-1].ulVal); } 
} break;

case YYr260: {	/* ph_interface_def :  _PHYSICAL_IF '=' unsigned8 line_end */
 
			HRESULT hr = THIS_PTR->CreatePIObject(yypvt[-1].ulVal); 
			if (FAILED(hr)) {
				YYRETURN(-1);
			}
		
} break;

case YYr263: {	/* unit_diag_area_def :  _UNIT_DIAG_AREA '=' bit_number '-' bit_number line_end */

			HRESULT hr = THIS_PTR->CreateUnitDiag(DiagArea,yypvt[-3].ulVal,yypvt[-1].ulVal); 
			//clean up first
			if (FAILED(hr)) {
				YYRETURN(-1);
			}
		
} break;

case YYr265: {	/* unit_diag_area_def :  _UNIT_DIAG_BIT '(' bit_number ')' '=' diag_text line_end */

			HRESULT hr = THIS_PTR->CreateUnitDiag(DiagBit,yypvt[-4].ulVal,NOT_SPECIFIED);
			//clean up first
			if (FAILED(hr)) {
				SAFE_DELETE(yypvt[-1].pString);
				YYRETURN(-1);
			}

			if(CURRENT_DIAG != NULL) { 
				CURRENT_DIAG->AddValue(1,*yypvt[-1].pString);
			}

			SAFE_DELETE(yypvt[-1].pString);
		
} break;

case YYr268: {	/* value_item :  _VALUE '(' value ')' '=' diag_text line_end */

			if(CURRENT_DIAG != NULL) { 
				CURRENT_DIAG->AddValue(yypvt[-4].ulVal,*yypvt[-1].pString);
			}

			SAFE_DELETE(yypvt[-1].pString);
		
} break;

case YYr269: {	/* visible_text :  _VISIBLE_STRING */
 yyval.pString = new CString(yypvt[0].pszText);  GUARD(yyval.pString); 
} break;

case YYr271: {	/* allowed_values :  data_type_array line_end */
 yyval.pEnumValues = yypvt[-1].pEnumValues; 
} break;

case YYr279: {	/* data_type_array :  numeric */

                                        yyval.pEnumValues = new listEnumValues;
                                        GUARD(yyval.pEnumValues);
                                        yyval.pEnumValues->AddTail(yypvt[0].ulVal);
//                                        if (CURRENT_USR_PRM_DEF == NULL) {
//                                            CURRENT_USR_PRM_DEF = new CExtParamDefinition;
//                                        }
//                                        GUARD(CURRENT_USR_PRM_DEF);
//                                        CURRENT_USR_PRM_DEF->m_paramType = CExtParamDefinition::variableEnum;
                                    
} break;

case YYr280: {	/* data_type_array :  data_type_array ',' numeric */

                                        GUARD(yypvt[-2].pEnumValues);
                                        yyval.pEnumValues->AddTail(yypvt[0].ulVal);
                                    
} break;

case YYr281: {	/* data_type_name :  _TYPE_UNSIGNED8 */
 yyval.dType=uSignedInt8;  
} break;

case YYr282: {	/* data_type_name :  _TYPE_UNSIGNED16 */
 yyval.dType=uSignedInt16; 
} break;

case YYr283: {	/* data_type_name :  _TYPE_UNSIGNED32 */
 yyval.dType=uSignedInt32; 
} break;

case YYr284: {	/* data_type_name :  _TYPE_SIGNED8 */
 yyval.dType=signedInt8;   
} break;

case YYr285: {	/* data_type_name :  _TYPE_SIGNED16 */
 yyval.dType=signedInt16;  
} break;

case YYr286: {	/* data_type_name :  _TYPE_SIGNED32 */
 yyval.dType=signedInt32;  
} break;

case YYr287: {	/* data_type_name :  _TYPE_BIT '(' bit_number ')' */

                                        if (CURRENT_USR_PRM_DEF == NULL) {
                                            CURRENT_USR_PRM_DEF = new CExtParamDefinition;
                                        }
                                        GUARD(CURRENT_USR_PRM_DEF);
                                        CURRENT_USR_PRM_DEF->m_lAreaStart = yypvt[-1].ulVal;
                                        CURRENT_USR_PRM_DEF->m_lAreaLength = 1;                                      
                                        yyval.dType=bitArea;
                                    
} break;

case YYr289: {	/* bit_area :  _TYPE_BIT_AREA '(' bit_number '-' bit_number ')' */

                                        if (CURRENT_USR_PRM_DEF == NULL) {
                                            CURRENT_USR_PRM_DEF = new CExtParamDefinition;
                                        }
                                        GUARD(CURRENT_USR_PRM_DEF);
                                        CURRENT_USR_PRM_DEF->m_lAreaStart = yypvt[-3].ulVal;
                                        CURRENT_USR_PRM_DEF->m_lAreaLength = (yypvt[-1].ulVal - yypvt[-3].ulVal) + 1;
                                        yyval.dType=bitArea;
                                    
} break;

case YYr291: {	/* mod_ref_string :  module_reference */
 THIS_PTR->AddModRef(yypvt[0].ulVal); 
} break;

case YYr292: {	/* mod_ref_string :  mod_ref_string ',' module_reference */
 THIS_PTR->AddModRef(yypvt[0].ulVal); 
} break;

case YYr298: {	/* bmp_file_name :  _VISIBLE_STRING */
 yyval.pString = new CString(yypvt[0].pszText);  GUARD(yyval.pString); 
} break;

case YYr299: {	/* sub_family :  _SUB_FAMILY */
 yyval.pString = new CString(yypvt[0].pszText); GUARD(yyval.pString); 
} break;

case YYr300: {	/* sub_family :  sub_family _SUB_FAMILY */
 GUARD(yypvt[-1].pString); *(yypvt[-1].pString) += yypvt[0].pszText; yyval.pString = yypvt[-1].pString;
} break;

case YYr301: {	/* slave_family :  _SLAVE_FAMILY '=' unsigned8 */
 THIS_PTR->SetSlaveFamily(yypvt[0].ulVal,NULL); 
} break;

case YYr302: {	/* slave_family :  _SLAVE_FAMILY '=' unsigned8 sub_family */
 THIS_PTR->SetSlaveFamily(yypvt[-1].ulVal,yypvt[0].pString); SAFE_DELETE(yypvt[0].pString);
} break;

case YYr304: {	/* module_name :  _VISIBLE_STRING */
 yyval.pString = new CString(yypvt[0].pszText);  GUARD(yyval.pString); 
} break;

case YYr305: {	/* name_string :  _VISIBLE_STRING */
 yyval.pString = new CString(yypvt[0].pszText);  GUARD(yyval.pString); 
} break;

case YYr306: {	/* ext_user_prm_data_name :  _VISIBLE_STRING */
 yyval.pString = new CString(yypvt[0].pszText);  GUARD(yyval.pString); 
} break;

case YYr307: {	/* diag_text :  _VISIBLE_STRING */
 yyval.pString = new CString(yypvt[0].pszText);  GUARD(yyval.pString); 
} break;

case YYr310: {	/* octet_string :  octet */
 
                                        yyval.pOctets = new CByteArray; GUARD(yyval.pOctets);
                                        yyval.pOctets->SetSize(0, 10);
                                        yyval.pOctets->Add((BYTE) yypvt[0].ulVal);
                                    
} break;

case YYr311: {	/* octet_string :  octet_string ',' octet */

                                        GUARD(yypvt[-2].pOctets);
                                        yyval.pOctets->Add((BYTE) yypvt[0].ulVal);
                                    
} break;

case YYr312: {	/* octet :  numeric */
 
                                        if (yypvt[0].ulVal > 0xff) {    // must be a byte value!
                                            YYRETURN(-1);
                                        }
                                        yyval.ulVal = yypvt[0].ulVal;
                                    
} break;

case YYr316: {	/* Boolean :  numeric */
 yyval.bVal = (BOOL) (yypvt[0].ulVal != 0); 
} break;

case YYr319: {	/* numeric :  '-' _INTEGER_LITERAL */
 yyval.ulVal = -yypvt[0].ulVal; 
} break;
	case YYrACCEPT:
		YYACCEPT;
	case YYrERROR:
		goto yyError;
	}
yyNext:
	/*
	 *	Look up next state in goto table.
	 */

	yyp = &yygo[yypgo[yyi]];
	yyq = yyp++;
	yyi = *yyps;
	while (yyi < *yyp++)		/* busy little loop */
		;
	yystate = yyneg(yyi == *--yyp? yyq[yyq-yyp]: *yyq);
#if YYDEBUG
	if (yydebug)
		YY_TRACE(yyShowGoto)
#endif
	goto yyStack;

yyerrlabel:	;		/* come here from YYERROR	*/
	yyerrflag = 1;
	if (yyi == YYrERROR) {
		yyps--, yypv--;
#if YYDEBUG
		if (yydebug) yytp--;
#endif
	}
	
yyError:
	switch (yyerrflag) {

	case 0:		/* new error */
		yynerrs++;
		yyi = yychar;
		scan->yyerror("Syntax error");
		if (yyi != yychar) {
			/* user has changed the current token */
			/* try again */
			yyerrflag++;	/* avoid loops */
			goto yyEncore;
		}

	case 1:		/* partially recovered */
	case 2:
		yyerrflag = 3;	/* need 3 valid shifts to recover */
			
		/*
		 *	Pop states, looking for a
		 *	shift on `error'.
		 */

		for ( ; yyps > stateStack; yyps--, yypv--
#if YYDEBUG
					, yytp--
#endif
		) {
#ifdef YACC_WINDOWS
			if (*yyps >= Sizeof_yypact) 	/* simple state */
#else /* YACC_WINDOWS */
			if (*yyps >= sizeof yypact/sizeof yypact[0])
#endif /* YACC_WINDOWS */
				continue;
			yyp = &yyact[yypact[*yyps]];
			yyq = yyp;
			do
				;
			while (YYERRCODE < *yyp++);
			if (YYERRCODE == yyp[-1]) {
				yystate = yyneg(yyq[yyq-yyp]);
				goto yyStack;
			}
				
			/* no shift in this state */
#if YYDEBUG
			if (yydebug && yyps > stateStack+1)
				YY_TRACE(yyShowErrRecovery)
#endif
			/* pop stacks; try again */
		}
		/* no shift on error - abort */
		break;

	case 3:
		/*
		 *	Erroneous token after
		 *	an error - discard it.
		 */

		if (yychar == 0)  /* but not EOF */
			break;
#if YYDEBUG
		if (yydebug)
			YY_TRACE(yyShowErrDiscard)
#endif
		yyclearin();
		goto yyEncore;	/* try again in same state */
	}
	YYABORT;

}
#if YYDEBUG
/*
 * Return type of token
 */
int
yy_parse::yyGetType(int tok)
{
	yyNamedType * tp;
	for (tp = &yyTokenTypes[yyntoken-1]; tp > yyTokenTypes; tp--)
		if (tp->token == tok)
			return tp->type;
	return 0;
}

	
// Print a token legibly.
char *
yy_parse::yyptok(int tok)
{
	yyNamedType * tp;
	for (tp = &yyTokenTypes[yyntoken-1]; tp > yyTokenTypes; tp--)
		if (tp->token == tok)
			return tp->name;
	return "";
}
/*
 * Read state 'num' from YYStatesFile
 */
#ifdef YYTRACE

char *
yy_parse::yygetState(int num)
{
	int	size;
	char	*cp;
	static FILE *yyStatesFile = (FILE *) 0;
	static char yyReadBuf[YYMAX_READ+1];

	if (yyStatesFile == (FILE *) 0
	 && (yyStatesFile = fopen(YYStatesFile, "r")) == (FILE *) 0)
		return "yyExpandName: cannot open states file";

	if (num < yynstate - 1)
		size = (int)(States[num+1] - States[num]);
	else {
		/* length of last item is length of file - ptr(last-1) */
		if (fseek(yyStatesFile, 0L, 2) < 0)
			goto cannot_seek;
		size = (int) (ftell(yyStatesFile) - States[num]);
	}
	if (size < 0 || size > YYMAX_READ)
		return "yyExpandName: bad read size";
	if (fseek(yyStatesFile, States[num], 0) < 0) {
	cannot_seek:
		return "yyExpandName: cannot seek in states file";
	}

	(void) fread(yyReadBuf, 1, size, yyStatesFile);
	yyReadBuf[size] = '\0';
	return yyReadBuf;
}
#endif /* YYTRACE */
/*
 * Expand encoded string into printable representation
 * Used to decode yyStates and yyRules strings.
 * If the expansion of 's' fits in 'buf', return 1; otherwise, 0.
 */
int
yy_parse::yyExpandName(int num, int isrule, char * buf, int len)
{
	int	i, n, cnt, type;
	char	* endp, * cp, * s;

	if (isrule)
		s = yyRules[num].name;
	else
#ifdef YYTRACE
		s = yygetState(num);
#else
		s = "*no states*";
#endif

	for (endp = buf + len - 8; *s; s++) {
		if (buf >= endp) {		/* too large: return 0 */
		full:	(void) strcpy(buf, " ...\n");
			return 0;
		} else if (*s == '%') {		/* nonterminal */
			type = 0;
			cnt = yynvar;
			goto getN;
		} else if (*s == '&') {		/* terminal */
			type = 1;
			cnt = yyntoken;
		getN:
			if (cnt < 100)
				i = 2;
			else if (cnt < 1000)
				i = 3;
			else
				i = 4;
			for (n = 0; i-- > 0; )
				n = (n * 10) + *++s - '0';
			if (type == 0) {
				if (n >= yynvar)
					goto too_big;
				cp = yysvar[n];
			} else if (n >= yyntoken) {
			    too_big:
				cp = "<range err>";
			} else
				cp = yyTokenTypes[n].name;

			if ((i = strlen(cp)) + buf > endp)
				goto full;
			(void) strcpy(buf, cp);
			buf += i;
		} else
			*buf++ = *s;
	}
	*buf = '\0';
	return 1;
}
#ifndef YYTRACE
/*
 * Show current state of yyparse
 */
void
yy_parse::yyShowState()
{
	(void) printf("state %d (%d), char %s (%d)\n%d stateStack entries\n",
		yysmap[yystate],yystate,yyptok(yychar),yychar,
		yypv - valueStack);
}
// show results of reduction: yyi is rule number
void
yy_parse::yyShowReduce()
{
	(void) printf("Reduce by rule %d (pop#=%d)\n", yyrmap[rule], npop);
}
// show read token
void
yy_parse::yyShowRead()
{
	(void) printf("read %s (%d)\n", yyptok(yychar), yychar);
}
// show Goto
void
yy_parse::yyShowGoto()
{
	(void) printf("goto %d (%d)\n", yysmap[yystate], yystate);
}
// show Shift
void
yy_parse::yyShowShift()
{
	(void) printf("shift %d (%d)\n", yysmap[yystate], yystate);
}
// show error recovery
void
yy_parse::yyShowErrRecovery()
{
	(void) printf("Error recovery pops state %d (%d), uncovers %d (%d)\n",
		yysmap[*(yyps-1)], *(yyps-1), yysmap[yystate], yystate);
}
// show token discards in error processing
void
yy_parse::yyShowErrDiscard()
{
	(void) printf("Error recovery discards %s (%d), ",
		yyptok(yychar), yychar);
}
#endif	/* ! YYTRACE */
#endif	/* YYDEBUG */
//------------------------------------------------------------------*
/**
 * Default ctor of GSD Parser object. Creates station object of 
 * type CDP_Station.
 * @see	~gsd_Parser(), CDP_Station
*/
gsd_Parser::gsd_Parser(int sz)
  : yy_parse(sz),
    m_pCurrUserParamDef(NULL),
    m_pCurrModule(NULL),
	m_pPI(NULL),
	m_ModRefList(),
	m_pUnitDiag(NULL)
{
    HRESULT hr = CComObject<CDP_Station>::CreateInstance(&m_pStation);
    _ASSERTE(SUCCEEDED(hr));
    _ASSERTE(m_pStation != NULL);
    if (m_pStation != NULL) {
        m_pStation->AddRef();
    }
}

//------------------------------------------------------------------*
/**
 * Dtor of GSD Parser object. Releases the hold reference of the 
 * station object CDP_Station and cleans up members.
 * @see	gsd_Parser(), CDP_Station
*/
gsd_Parser::~gsd_Parser()
{
    // now clean up our own stuff
	FC_RELEASE_PTR(m_pStation);
	FC_RELEASE_PTR(m_pPI);
	FC_RELEASE_PTR(m_pUnitDiag);
	FC_RELEASE_PTR(m_pCurrModule)
	ClearModRefList();

    POSITION pos;
    for (pos = m_mapTextDefDB.GetStartPosition(); pos != NULL; )
    {
        LONG    lRef;
        CPrmTextDef*    pDef = NULL;
        m_mapTextDefDB.GetNextAssoc(pos, lRef, pDef);
        ASSERT(pDef != NULL);
        if (pDef != NULL) {
            delete pDef;
        }
    }
    m_mapTextDefDB.RemoveAll();
}

//------------------------------------------------------------------*
HRESULT gsd_Parser::GetDP_Station(IUnknown **pUnk)
{
    HRESULT hr = S_OK;
    if (pUnk == NULL) {
        return E_POINTER;
    }

    if (m_pStation != NULL) {
        *pUnk = m_pStation->GetUnknown();
        (*pUnk)->AddRef();
    }
    else {
        *pUnk = NULL;
        hr = E_NOINTERFACE;
    }
    return hr;
}

//------------------------------------------------------------------*

void gsd_Parser::processObjectList(listExtUserParamObject* exList)
{
	int iCount = exList->GetCount();
    if (!iCount) {	// ready, as there are no used references
        return;
    }

    for (int i=0;i < iCount;i++) {
		//[] operator makes implicit addref()
        CDPExtUserParamObject* pExt = (*exList)[i];
		if(!pExt) {
			_ASSERTE(pExt);
			continue;
		}

        CExtParamDefinition *pDefinition = NULL;
        if (pExt->m_paramType != CExtParamDefinition::constantValue)
        {
            if (USR_PRM_DEF_DB.GetDefinition(pExt->m_lRefNum, pDefinition))
            {
                /* copy contents of definition */
                pExt->CopyDefinitionValues(pDefinition);
            }
            else
            {
				CString str;
				GSD_FormatMessage(str, E_GSD_TEXT_REF,(int)pExt->m_lRefNum);
				Message(E_GSD_TEXT_REF,str);
            }
        }

		FC_RELEASE_PTR(pExt);
    }
}

void gsd_Parser::PostProcess()
{
    int iCount;
	CDPModuleObject* pModule= NULL;

	// process list of errors and messages.
	processMessages();
    processObjectList(&(STATION->m_listExtUserParamObject));

    // iterate through all MODULES
	iCount = STATION->m_listModules.GetCount();

	for(int i= 0; i< iCount; i++) {
		pModule = STATION->m_listModules[i];
		if(pModule) {
			processObjectList(&(pModule->m_listExtUserParamObject));
			pModule->Release();
		}
	}

	STATION->Check();
	STATION->SlotAssignment();
}

//------------------------------------------------------------------*
/**
 * Checks revision of GSD agains supported GSD. GSD parser upports up 
 * to GSD revision 2.0. Issues a warning if GSD revision is higher 
 * than the supported revision, but continues parsing.
 *
 * @param			lRevision - GSD revision number scanned from GSD.
 * @see				gsd_parser, define SUPPORTED_GSD_REVISION.
*/
bool gsd_Parser::CheckRevision(long lRevision)
{
	CString str;
	m_pStation->m_lGSD_Revision = lRevision;
	
	if(lRevision > SUPPORTED_GSD_REVISION) {
		GSD_FormatMessage(str, E_GSD_REVISION,(int)lRevision,SUPPORTED_GSD_REVISION);
		Message(E_GSD_REVISION,str);
		return false;
	}

	return true;
}

void gsd_Parser::SetSlaveFamily(long lMainFamily, CString *pOptSubFamily)
{
	if(!m_pStation) {
		return;
	}

	m_pStation->m_lMainFamily = lMainFamily;
	m_pStation->m_strSlaveFamily.Format(_T("%d"),lMainFamily);
	if(pOptSubFamily) {
		m_pStation->m_strSlaveFamily += *pOptSubFamily;
	}
}

HRESULT gsd_Parser::CreatePIObject(long lInterfaceId)
{
    CDP_PIObject *pPI = NULL;
	CDP_PIObject *pTemp = NULL;

    HRESULT hr = CComObject<CDP_PhysicalInterface>::CreateInstance(&pPI);
    if (FAILED(hr)) {
        return hr;
    }

	pPI->m_lInterfaceId = lInterfaceId;
	pPI->AddRef(); //this reference is for the list.
    m_pStation->m_listPI.Add(pPI);

	pTemp = m_pPI;
	pPI->AddRef(); //for the current physical inteface reference.
	m_pPI = pPI; //assign new one

	FC_RELEASE_PTR(pTemp); //release the old one
	return S_OK;
}

HRESULT gsd_Parser::CreateSlot(long lSlotNo, CString* pstrName, long lDefault)
{
	CDP_SlotObject* pSlot = NULL;

    HRESULT hr = CComObject<CDP_Slot>::CreateInstance(&pSlot);
    if (FAILED(hr)) {
        return hr;
    }

	pSlot->m_lSlotNo = lSlotNo;
	if(pstrName) {
		pSlot->m_strName = *pstrName;
	}
	pSlot->m_lDefRef = lDefault;
	pSlot->AddModuleReferences(&m_ModRefList);
	pSlot->AddRef(); //this reference is for the list.
    m_pStation->m_listSlot.Add(pSlot);
	return S_OK;
}

void gsd_Parser::ClearModRefList()
{
	m_ModRefList.RemoveAll();	
}

void gsd_Parser::AddModRef(long lStart, long lEnd)
{
	if(lEnd == 0L) {
		m_ModRefList.AddTail(lStart);
	}
	else {
		long l;
		if(lEnd < lStart) {
			l = lStart;
			lStart = lEnd;
			lEnd = l;
		}

		for(l = lStart; l<= lEnd; l++) {
			m_ModRefList.AddTail(l);
		}
	}
}

HRESULT gsd_Parser::CreateModule(LPCTSTR pszName,CByteArray *pOctets)
{
	CDPModuleObject *pModule = NULL;
	CDPModuleObject *pTemp = NULL;

	FC_PCHECK_HR(pszName,E_POINTER);
	FC_PCHECK_HR(pOctets,E_POINTER);

	HRESULT hr = CComObject<CDP_Module>::CreateInstance(&pModule);
	if (FAILED(hr)) {
		return hr;
	}
	
	pModule->m_strName = pszName;
	pModule->m_configBytes.Copy(*pOctets);

	pModule->AddRef(); //this reference is for the list.
	m_pStation->m_listModules.Add(pModule);

	pTemp = m_pCurrModule;
	pModule->AddRef(); //for the current module.
	m_pCurrModule = pModule; //assign new one

	FC_RELEASE_PTR(pTemp); //release the old one
	return S_OK;
}

void gsd_Parser::processMessages()
{
	CString strFile;

	CGsdScan *pScan = dynamic_cast<CGsdScan*>(scan);
	if(!pScan) {
		return;
	}

	pScan->SetMessages(m_pStation);
	strFile = pScan->GetGsdFile();
	m_pStation->SetGsdFile(strFile);
}

void gsd_Parser::Message(HRESULT hr,LPCTSTR pszMessage)
{
    CGsdScan *pScan = dynamic_cast<CGsdScan*>(scan);
    if(!pScan) {
        return;
    }
	pScan->Message(hr,pszMessage);
}

HRESULT gsd_Parser::CreateUnitDiag(DIAG_TYPE type, long lBitStart,long lBitEnd)
{
	CDP_UnitDiagObject* p = NULL;
	CDP_UnitDiagObject* pTemp = NULL;

    HRESULT hr = CComObject<CDP_UnitDiag>::CreateInstance(&p);
    if (FAILED(hr)) {
        return hr;
    }

	p->m_Type = type;
	p->m_lBitAreaStart = lBitStart;
	p->m_lBitAreaEnd = lBitEnd;
	p->AddRef(); //this reference is for the list.
    //add to list of unit diagnostic definitions 
	m_pStation->m_listUnitDiag.Add(p);

	pTemp = m_pUnitDiag;
	p->AddRef(); //for the current unit diagnostic definition.
	m_pUnitDiag = p; //assign new one

	FC_RELEASE_PTR(pTemp); //release the old one
	return S_OK;
}

HRESULT gsd_Parser::CreateChannelDiag(long lErrorType, LPCTSTR pszDiagText)
{
	CDP_UnitDiagObject* p = NULL;
	CDP_UnitDiagObject* pTemp = NULL;

    HRESULT hr = CComObject<CDP_UnitDiag>::CreateInstance(&p);
    if (FAILED(hr)) {
        return hr;
    }

	p->m_Type = DiagChannel;
	p->m_lBitAreaStart = -1L;
	p->m_lBitAreaEnd = -1L;
	//this reference is for the list.
	p->AddValue(lErrorType, pszDiagText);
	p->AddRef(); 

	if(m_pCurrModule != NULL) { //module specific
		m_pCurrModule->m_listDiag.Add(p);
	}
	else { //station specific
	    //add to list of unit diagnostic definitions 
		m_pStation->m_listUnitDiag.Add(p);
	}

	return S_OK;
}





