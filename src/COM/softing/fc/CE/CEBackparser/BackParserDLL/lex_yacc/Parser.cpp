/* yacc -l -LC -P lex_yacc\proto\Yyparse.cpp -D lex_yacc\Parser.h -o lex_yacc\Parser.cpp lex_yacc\Parser.y */

// disable warning C4786: symbol greater than 255 character,
// okay to ignore
#pragma warning(disable: 4786)

#include <iostream>

using namespace std;

#include "Global.h"
#include "Grammar.h"

#define exit throw_fatal_error

void throw_fatal_error(int i);
extern YYSTYPE yylval;
#if YYDEBUG
enum YY_Types { YY_t_NoneDefined, YY_t_lexval, YY_t_syscmnt
};
#endif
#if YYDEBUG
yyTypedRules yyRules[] = {
	{ "&000: %022 &000",  0},
	{ "%023:",  0},
	{ "%022: %001 %023 %024",  0},
	{ "%024: %025",  0},
	{ "%024: %026",  0},
	{ "%024: %027",  0},
	{ "%024: %028",  0},
	{ "%024: %029",  0},
	{ "%024: %030",  0},
	{ "%024: %031",  0},
	{ "%024:",  0},
	{ "%024: &001",  0},
	{ "%032:",  0},
	{ "%025: &013 &130 %032 %033 &014",  0},
	{ "%034:",  0},
	{ "%026: &015 &130 %034 %035 %033 %036 %037 &017",  0},
	{ "%035: &016 &130",  0},
	{ "%035:",  0},
	{ "%036: %038",  0},
	{ "%036:",  0},
	{ "%038: %039",  0},
	{ "%038: %038 %039",  0},
	{ "%040:",  0},
	{ "%041:",  0},
	{ "%043:",  0},
	{ "%039: &019 &130 %040 %001 %041 &137 %042 &138 %043 &104",  0},
	{ "%042: %044",  0},
	{ "%042:",  0},
	{ "%044: %044 &106 %045",  0},
	{ "%044: %045",  0},
	{ "%045: &130 &125 %046",  0},
	{ "%037: %047",  0},
	{ "%037:",  0},
	{ "%047: %048 &104",  0},
	{ "%047: %047 %048 &104",  0},
	{ "%049:",  0},
	{ "%050:",  0},
	{ "%052:",  0},
	{ "%048: &020 %006 &130 %049 %001 %050 %051 &105 &130 %052 %053",  0},
	{ "%051: &018 &130",  0},
	{ "%051:",  0},
	{ "%053: &137 %054 &138",  0},
	{ "%053:",  0},
	{ "%054: %055",  0},
	{ "%054: %054 &105 %055",  0},
	{ "%055: &130 &018 &130",  0},
	{ "%055: &130 &125 %046",  0},
	{ "%055: &130 &126 %046",  0},
	{ "%056:",  0},
	{ "%057:",  0},
	{ "%027: &020 &130 %056 %033 %057 %058",  0},
	{ "%058: &021",  0},
	{ "%058:",  0},
	{ "%059:",  0},
	{ "%060:",  0},
	{ "%028: &022 &130 %059 %033 %060 %061",  0},
	{ "%061: &023",  0},
	{ "%061:",  0},
	{ "%062:",  0},
	{ "%064:",  0},
	{ "%029: &024 %009 %062 %063 %033 %064 %065",  0},
	{ "%065: &025",  0},
	{ "%065:",  0},
	{ "%009: %008",  1},
	{ "%009: &119",  1},
	{ "%008: &130",  1},
	{ "%008: &115",  1},
	{ "%008: &116",  1},
	{ "%008: &117",  1},
	{ "%008: &118",  1},
	{ "%063: &105 %016",  0},
	{ "%063:",  0},
	{ "%066:",  0},
	{ "%030: &009 &130 %066 &105 %033 &104 &010",  0},
	{ "%067:",  0},
	{ "%031: %067 %068",  0},
	{ "%069:",  0},
	{ "%001: &002 %069 %070 &003",  2},
	{ "%001:",  2},
	{ "%070: %071",  0},
	{ "%070: %071 &106",  0},
	{ "%070:",  0},
	{ "%071: %072",  0},
	{ "%071: %071 &106 %072",  0},
	{ "%072: %002 &109 %003",  0},
	{ "%002: &130",  1},
	{ "%003: %004",  1},
	{ "%003: &130",  1},
	{ "%003:",  1},
	{ "%004: &133",  1},
	{ "%004: &145",  1},
	{ "%004: &135",  1},
	{ "%004: &136",  1},
	{ "%004: &134",  1},
	{ "%004: &131",  1},
	{ "%004: &132",  1},
	{ "%004: &143",  1},
	{ "%004: &146",  1},
	{ "%004: &144",  1},
	{ "%005: %004",  1},
	{ "%005: &121 %004",  1},
	{ "%005: &122 %004",  1},
	{ "%005: &130",  1},
	{ "%005: &121 &130",  1},
	{ "%005: &122 &130",  1},
	{ "%016: %017",  1},
	{ "%016: &130",  1},
	{ "%016: &147 %073 &148 %017",  1},
	{ "%016: &147 %073 &148 &130",  1},
	{ "%073: &139 %074 &140",  0},
	{ "%073:",  0},
	{ "%074: %046 &108 %046",  0},
	{ "%074: %074 &106 %046 &108 %046",  0},
	{ "%017: %010",  1},
	{ "%017: %011",  1},
	{ "%017: %012",  1},
	{ "%017: %018",  1},
	{ "%018: &041",  1},
	{ "%018: &041 &139 %046 &140",  1},
	{ "%018: &042",  1},
	{ "%018: &042 &139 %046 &140",  1},
	{ "%010: &027",  1},
	{ "%010: &028",  1},
	{ "%010: &035",  1},
	{ "%010: &036",  1},
	{ "%010: &037",  1},
	{ "%010: &038",  1},
	{ "%010: &039",  1},
	{ "%010: &040",  1},
	{ "%010: &043",  1},
	{ "%010: &044",  1},
	{ "%010: &045",  1},
	{ "%010: &046",  1},
	{ "%010: &047",  1},
	{ "%010: &026",  1},
	{ "%010: &029",  1},
	{ "%010: &030",  1},
	{ "%010: &031",  1},
	{ "%010: &032",  1},
	{ "%010: &033",  1},
	{ "%010: &034",  1},
	{ "%010: &048",  1},
	{ "%011: &149",  1},
	{ "%011: &150",  1},
	{ "%011: &151",  1},
	{ "%011: &152",  1},
	{ "%011: &153",  1},
	{ "%011: &154",  1},
	{ "%011: &155",  1},
	{ "%011: &156",  1},
	{ "%011: &157",  1},
	{ "%011: &158",  1},
	{ "%012: &097",  1},
	{ "%012: &098",  1},
	{ "%012: &099",  1},
	{ "%012: &100",  1},
	{ "%012: &101",  1},
	{ "%012: &102",  1},
	{ "%046: %075",  0},
	{ "%046: &122 %046",  0},
	{ "%046: &121 %046",  0},
	{ "%046: &119 %046",  0},
	{ "%046: %076",  0},
	{ "%075: %046 &117 %046",  0},
	{ "%075: %046 &118 %046",  0},
	{ "%075: %046 &116 %046",  0},
	{ "%075: %046 &109 %046",  0},
	{ "%075: %046 &110 %046",  0},
	{ "%075: %046 &111 %046",  0},
	{ "%075: %046 &112 %046",  0},
	{ "%075: %046 &113 %046",  0},
	{ "%075: %046 &114 %046",  0},
	{ "%075: %046 &121 %046",  0},
	{ "%075: %046 &122 %046",  0},
	{ "%075: %046 &123 %046",  0},
	{ "%075: %046 &124 %046",  0},
	{ "%075: %046 &115 %046",  0},
	{ "%075: %046 &120 %046",  0},
	{ "%076: %004",  0},
	{ "%076: %077",  0},
	{ "%076: %078",  0},
	{ "%076: %008 %079",  0},
	{ "%076: %012 %079",  0},
	{ "%078: &137 %046 &138",  0},
	{ "%079: &137 %080 &138",  0},
	{ "%080: %081",  0},
	{ "%080:",  0},
	{ "%081: %046",  0},
	{ "%081: %081 &106 %046",  0},
	{ "%033: %068",  0},
	{ "%033:",  0},
	{ "%068: %082",  0},
	{ "%068: %068 %082",  0},
	{ "%083:",  0},
	{ "%082: %007 %006 %083 %084 %019",  0},
	{ "%082: &163 &146",  0},
	{ "%019: &006",  1},
	{ "%019: &012",  1},
	{ "%019: &008",  1},
	{ "%019: &096",  1},
	{ "%084: %085",  0},
	{ "%084:",  0},
	{ "%085: %086",  0},
	{ "%085: %085 %086",  0},
	{ "%089:",  0},
	{ "%086: %087 %088 &104 %089 %090",  0},
	{ "%087: %091 &105",  0},
	{ "%093:",  0},
	{ "%087: %092 &049 %093 %015 &105",  0},
	{ "%015: &159",  1},
	{ "%015: &130",  1},
	{ "%088: %016 %013 %006 %094",  0},
	{ "%091: %092",  0},
	{ "%095:",  0},
	{ "%091: %091 &106 %095 %092",  0},
	{ "%096:",  0},
	{ "%092: &130 %096 %001",  0},
	{ "%007: &054",  1},
	{ "%007: &055",  1},
	{ "%007: &056",  1},
	{ "%007: &057",  1},
	{ "%007: &058",  1},
	{ "%007: &060",  1},
	{ "%007: &061",  1},
	{ "%007: &011",  1},
	{ "%007: &007",  1},
	{ "%007: &005",  1},
	{ "%007: &095",  1},
	{ "%006: %020",  1},
	{ "%006:",  1},
	{ "%020: %021",  1},
	{ "%020: %020 %021",  1},
	{ "%021: &160",  1},
	{ "%021: &161",  1},
	{ "%021: &162",  1},
	{ "%013: &053",  1},
	{ "%013: &052",  1},
	{ "%013:",  1},
	{ "%090: &004",  0},
	{ "%090:",  0},
	{ "%077: &159",  0},
	{ "%077: %097",  0},
	{ "%097: %014",  0},
	{ "%097: %098",  0},
	{ "%014: &130",  1},
	{ "%098: %099",  0},
	{ "%098: %100",  0},
	{ "%099: %097 &139 %081 &140",  0},
	{ "%100: %097 &107 &130",  0},
	{ "%101:",  0},
	{ "%094: &125 %101 %102",  0},
	{ "%094:",  0},
	{ "%102: %046",  0},
	{ "%102: &139 %103 &140",  0},
	{ "%102: %104",  0},
	{ "%104: &137 %105 &138",  0},
	{ "%105: &130 &125 %102",  0},
	{ "%105: %105 &106 &130 &125 %102",  0},
	{ "%103: %106",  0},
	{ "%103: %103 &106 %106",  0},
	{ "%106: %107",  0},
	{ "%106: %005 %108",  0},
	{ "%106: %078 %108",  0},
	{ "%108: &137 %109 &138",  0},
	{ "%109: %103",  0},
	{ "%109:",  0},
	{ "%107: %005",  0},
	{ "%107: %078",  0},
	{ "%107: %104",  0},
{ "$accept",  0},{ "error",  0}
};
yyNamedType yyTokenTypes[] = {
	{ "$end",  0,  0},
	{ "error",  256,  0},
	{ "SYSTEM_COMMENT_BEGIN",  257,  1},
	{ "SYSTEM_COMMENT_END",  258,  1},
	{ "VARIABLE_COMMENT",  259,  1},
	{ "VAR_GLOBAL",  260,  1},
	{ "END_VAR",  261,  1},
	{ "TOKEN_CONST",  262,  1},
	{ "TOKEN_END_CONST",  263,  1},
	{ "TYPE",  264,  1},
	{ "END_TYPE",  265,  1},
	{ "STRUCT",  266,  1},
	{ "END_STRUCT",  267,  1},
	{ "CONFIGURATION",  268,  1},
	{ "END_CONFIGURATION",  269,  1},
	{ "RESOURCE",  270,  1},
	{ "ON",  271,  1},
	{ "END_RESOURCE",  272,  1},
	{ "WITH",  273,  1},
	{ "TASK",  274,  1},
	{ "PROGRAM",  275,  1},
	{ "END_PROGRAM",  276,  1},
	{ "FUNCTION_BLOCK",  277,  1},
	{ "END_FUNCTION_BLOCK",  278,  1},
	{ "FUNCTION",  279,  1},
	{ "END_FUNCTION",  280,  1},
	{ "SINT",  281,  1},
	{ "TOKEN_INT",  282,  1},
	{ "DINT",  283,  1},
	{ "LINT",  284,  1},
	{ "USINT",  285,  1},
	{ "TOKEN_UINT",  286,  1},
	{ "UDINT",  287,  1},
	{ "ULINT",  288,  1},
	{ "REAL",  289,  1},
	{ "LREAL",  290,  1},
	{ "TOKEN_DATE",  291,  1},
	{ "TIME_OF_DAY",  292,  1},
	{ "TOD",  293,  1},
	{ "DATE_AND_TIME",  294,  1},
	{ "DT",  295,  1},
	{ "STRING",  296,  1},
	{ "WSTRING",  297,  1},
	{ "TIME",  298,  1},
	{ "TOKEN_BOOL",  299,  1},
	{ "TOKEN_BYTE",  300,  1},
	{ "TOKEN_WORD",  301,  1},
	{ "TOKEN_DWORD",  302,  1},
	{ "LWORD",  303,  1},
	{ "AT",  304,  1},
	{ "EN",  305,  1},
	{ "ENO",  306,  1},
	{ "R_EDGE",  307,  1},
	{ "F_EDGE",  308,  1},
	{ "VAR",  309,  1},
	{ "VAR_INPUT",  310,  1},
	{ "VAR_OUTPUT",  311,  1},
	{ "VAR_IN_OUT",  312,  1},
	{ "VAR_EXTERNAL",  313,  1},
	{ "VAR_ACCESS",  314,  1},
	{ "VAR_TEMP",  315,  1},
	{ "VAR_IN_EXT",  316,  1},
	{ "VAR_CONFIG",  317,  1},
	{ "READ_ONLY",  318,  1},
	{ "READ_WRITE",  319,  1},
	{ "STEP",  320,  1},
	{ "END_STEP",  321,  1},
	{ "INITIAL_STEP",  322,  1},
	{ "TRANSITION",  323,  1},
	{ "END_TRANSITION",  324,  1},
	{ "ACTION",  325,  1},
	{ "END_ACTION",  326,  1},
	{ "FROM",  327,  1},
	{ "IF",  328,  1},
	{ "THEN",  329,  1},
	{ "ELSE",  330,  1},
	{ "ELSIF",  331,  1},
	{ "END_IF",  332,  1},
	{ "CASE",  333,  1},
	{ "END_CASE",  334,  1},
	{ "WHILE",  335,  1},
	{ "DO",  336,  1},
	{ "END_WHILE",  337,  1},
	{ "REPEAT",  338,  1},
	{ "UNTIL",  339,  1},
	{ "END_REPEAT",  340,  1},
	{ "FOR",  341,  1},
	{ "TO",  342,  1},
	{ "BY",  343,  1},
	{ "END_FOR",  344,  1},
	{ "EXIT",  345,  1},
	{ "RETURN",  346,  1},
	{ "GOTO",  347,  1},
	{ "SYNCHRONIZED",  348,  1},
	{ "END_SYNCHRONIZED",  349,  1},
	{ "VAR_NATIVE",  350,  1},
	{ "END_NATIVE",  351,  1},
	{ "QVT_BOOL",  352,  1},
	{ "QVT_BYTE",  353,  1},
	{ "QVT_WORD",  354,  1},
	{ "QVT_DWORD",  355,  1},
	{ "QVT_DINT",  356,  1},
	{ "QVT_LREAL",  357,  1},
	{ "CURL",  358,  1},
	{ "SEMICOLON",  359,  1},
	{ "COLON",  360,  1},
	{ "COMMA",  361,  1},
	{ "DOT",  362,  1},
	{ "DOTDOT",  363,  1},
	{ "EQ",  364,  1},
	{ "NE",  365,  1},
	{ "LT",  366,  1},
	{ "LE",  367,  1},
	{ "GT",  368,  1},
	{ "GE",  369,  1},
	{ "MOD",  370,  1},
	{ "AND",  371,  1},
	{ "OR",  372,  1},
	{ "XOR",  373,  1},
	{ "NOT",  374,  1},
	{ "POW",  375,  1},
	{ "PLUS",  376,  1},
	{ "MINUS",  377,  1},
	{ "TIMES",  378,  1},
	{ "DIV",  379,  1},
	{ "BECOMES",  380,  1},
	{ "RIGHT_ARROW",  381,  1},
	{ "PERIOD",  382,  1},
	{ "PIPE",  383,  1},
	{ "FILENAME",  384,  1},
	{ "IDENTIFIER",  385,  1},
	{ "DT_LITERAL",  386,  1},
	{ "TOD_LITERAL",  387,  1},
	{ "INT_LITERAL",  388,  1},
	{ "DATE_LITERAL",  389,  1},
	{ "TOKEN_TRUE",  390,  1},
	{ "TOKEN_FALSE",  391,  1},
	{ "PAREN_OPEN",  392,  1},
	{ "PAREN_CLOSE",  393,  1},
	{ "SQUARED_BRACKET_OPEN",  394,  1},
	{ "SQUARED_BRACKET_CLOSE",  395,  1},
	{ "CURLY_BRACES_OPEN",  396,  1},
	{ "CURLY_BRACES_CLOSE",  397,  1},
	{ "TIME_LITERAL",  398,  1},
	{ "BOOL_LITERAL",  399,  1},
	{ "FLOAT_LITERAL",  400,  1},
	{ "STRING_LITERAL",  401,  1},
	{ "ARRAY",  402,  1},
	{ "OF",  403,  1},
	{ "ANY",  404,  1},
	{ "ANY_NUM",  405,  1},
	{ "ANY_REAL",  406,  1},
	{ "ANY_INT",  407,  1},
	{ "ANY_BIT",  408,  1},
	{ "ANY_STRING",  409,  1},
	{ "ANY_DATE",  410,  1},
	{ "ANY_ELEMENTARY",  411,  1},
	{ "ANY_MAGNITUDE",  412,  1},
	{ "ANY_DERIVED",  413,  1},
	{ "DIRECT_VARIABLE",  414,  1},
	{ "RETAIN",  415,  1},
	{ "NON_RETAIN",  416,  1},
	{ "CONSTANT",  417,  1},
	{ "IMPORT_DIRECTIVE",  418,  1},
	{ "PRAGMA_DIRECTIVE",  419,  1}

};
#endif
static short yydef[] = {

	   7, 65535, 65531, 65527,  255, 65499,  254,   11,    6,  226, 
	 256, 65493, 65487,  270, 65481,  228, 65477, 65473,  231, 65467, 
	 227,  229,   10,    9, 65459, 65455, 65451, 65447, 65441,   12, 
	65433,  269, 65429, 65425,  224, 65419, 65415,  265, 65411,  225, 
	65407, 65403,  233,  235,  236,  237,  238,  239,  240,  241, 
	 242,  243,  244,  245,  246,  247,  248,  249,  251, 65399, 
	 221,  232,  250, 65393,  217,  218, 65389,  267, 65385, 65381, 
	 220,    4, 65377,  260,  261
};
static short yyex[] = {

	   0,    0, 65535,    1,  258,  253, 65535,    1,    0,    3, 
	 260,    5,  262,    5,  266,    5,  309,    5,  310,    5, 
	 311,    5,  312,    5,  313,    5,  315,    5,  316,    5, 
	 350,    5,  418,    5, 65535,    1,  258,    8,  361,    8, 
	65535,    1,    0,  230,  278,  230, 65535,    1,    0,  230, 
	 276,  230, 65535,    1,  269,  230, 65535,    1,  359,  230, 
	65535,    1,    0,  230,  280,  230, 65535,    1,  272,  230, 
	 274,  230,  275,  230, 65535,    1,  403,  252, 65535,    1, 
	   0,  258, 65535,    1,    0,  259, 65535,    1,  272,  268, 
	 275,  268, 65535,    1,  304,    7,  360,    7,  361,    7, 
	65535,    1,    0,  257, 65535,    1,  272,  264, 65535,    1, 
	 359,   11,  380,   11, 65535,    1,  392,  140, 65535,  223, 
	 385,   11, 65535,    1,  359,  222, 65535,    1,  393,  234, 
	65535,    1,  392,    7, 65535,    1,  273,    7,  360,    7, 
	65535,    1,  393,  266, 65535,    1,  392,  140, 65535,  223, 
	 360,  263, 65535,    1,  393,  219, 65535,    1,  359,  262, 
	65535,    1
};
static short yyact[] = {

	65288,  257, 65229,  385, 65263, 65367, 65372, 65371, 65370, 65369, 
	65368,  279,  277,  275,  270,  268,  264,  256, 65530,  364, 
	65529,  361, 65289,  258, 65357, 65356, 65184, 65191, 65190, 65189, 
	65188, 65187, 65186, 65185, 65183, 65373,  418,  350,  316,  315, 
	 313,  312,  311,  310,  309,  266,  262,  260, 65286,  385, 
	65235, 65234, 65233, 65232, 65237, 65236,  385,  374,  373,  372, 
	 371,  370, 65281,  385, 65279,  385, 65266,  385, 65264,  385, 
	65227, 65221, 65220, 65226, 65222, 65224, 65223, 65219, 65217, 65225, 
	65218,  401,  400,  399,  398,  391,  390,  389,  388,  387, 
	 386,  385, 65340,  401, 65180, 65179, 65358,  417,  416,  415, 
	65519,  360, 65375,  360, 65376,  271, 65354,  385, 65314, 65301, 
	65302, 65315, 65316, 65317, 65318, 65319, 65320, 65303, 65304, 65305, 
	65306, 65307, 65308, 65512, 65513, 65309, 65310, 65311, 65312, 65313, 
	65321, 65332, 65333, 65334, 65335, 65336, 65337, 65292, 65511, 65322, 
	65323, 65324, 65325, 65326, 65327, 65328, 65329, 65330, 65331,  413, 
	 412,  411,  410,  409,  408,  407,  406,  405,  404,  402, 
	 385,  357,  356,  355,  354,  353,  352,  303,  302,  301, 
	 300,  299,  298,  297,  296,  295,  294,  293,  292,  291, 
	 290,  289,  288,  287,  286,  285,  284,  283,  282,  281, 
	65268,  385, 65265,  269, 65348,  304, 65347, 65353,  361,  360, 
	65341, 65343, 65342, 65344,  351,  267,  263,  261, 65383,  359, 
	65384,  394, 65385,  394, 65386,  394, 65241,  278, 65243,  276, 
	65388,  274, 65360, 65359,  308,  307, 65345,  359, 65287,  265, 
	65332, 65333, 65334, 65335, 65336, 65337, 65235, 65234, 65233, 65232, 
	65394, 65395, 65396, 65500, 65221, 65220, 65226, 65222, 65224, 65223, 
	65391, 65219, 65217, 65225, 65218, 65178,  414,  401,  400,  399, 
	 398,  392,  391,  390,  389,  388,  387,  386,  385,  377, 
	 376,  374,  373,  372,  371,  370,  357,  356,  355,  354, 
	 353,  352, 65401,  403, 65239,  280, 65269,  385, 65499,  275, 
	65351, 65350,  414,  385, 65405, 65406,  394,  362, 65495,  392, 
	65419, 65418, 65417, 65416, 65415, 65414, 65409, 65420, 65422, 65421, 
	65408, 65413, 65412, 65411, 65410, 65300,  395,  379,  378,  377, 
	 376,  375,  373,  372,  371,  370,  369,  368,  367,  366, 
	 365,  364, 65419, 65418, 65417, 65416, 65415, 65414, 65409, 65420, 
	65422, 65421, 65408, 65413, 65412, 65411, 65410, 65299,  395,  379, 
	 378,  377,  376,  375,  373,  372,  371,  370,  369,  368, 
	 367,  366,  365,  364, 65423, 65419, 65418, 65417, 65416, 65415, 
	65414, 65409, 65420, 65422, 65421, 65408, 65413, 65412, 65411, 65410, 
	 379,  378,  377,  376,  375,  373,  372,  371,  370,  369, 
	 368,  367,  366,  365,  364,  363, 65424, 65210,  395,  361, 
	65314, 65301, 65302, 65315, 65316, 65317, 65318, 65319, 65320, 65303, 
	65304, 65305, 65306, 65307, 65308, 65512, 65513, 65309, 65310, 65311, 
	65312, 65313, 65321, 65332, 65333, 65334, 65335, 65336, 65337, 65294, 
	65322, 65323, 65324, 65325, 65326, 65327, 65328, 65329, 65330, 65331, 
	 413,  412,  411,  410,  409,  408,  407,  406,  405,  404, 
	 385,  357,  356,  355,  354,  353,  352,  303,  302,  301, 
	 300,  299,  298,  297,  296,  295,  294,  293,  292,  291, 
	 290,  289,  288,  287,  286,  285,  284,  283,  282,  281, 
	65273,  359, 65267,  272, 65349,  360, 65362,  380, 65361,  259, 
	65172,  385, 65419, 65418, 65417, 65416, 65415, 65414, 65409, 65420, 
	65422, 65421, 65408, 65413, 65412, 65411, 65410, 65198,  393,  379, 
	 378,  377,  376,  375,  373,  372,  371,  370,  369,  368, 
	 367,  366,  365,  364, 65275,  385, 65274,  359, 65431, 65173, 
	 395,  361, 65419, 65418, 65417, 65416, 65415, 65414, 65409, 65420, 
	65422, 65421, 65408, 65413, 65412, 65411, 65410,  379,  378,  377, 
	 376,  375,  373,  372,  371,  370,  369,  368,  367,  366, 
	 365,  364, 65431,  361, 65197,  393, 65408,  375, 65409, 65408, 
	65411, 65410,  379,  378,  375,  370, 65409, 65408, 65413, 65412, 
	65411, 65410,  379,  378,  377,  376,  375,  370, 65417, 65416, 
	65415, 65414, 65409, 65408, 65413, 65412, 65411, 65410,  379,  378, 
	 377,  376,  375,  370,  369,  368,  367,  366, 65419, 65418, 
	65417, 65416, 65415, 65414, 65409, 65408, 65413, 65412, 65411, 65410, 
	 379,  378,  377,  376,  375,  370,  369,  368,  367,  366, 
	 365,  364, 65419, 65418, 65417, 65416, 65415, 65414, 65409, 65420, 
	65408, 65413, 65412, 65411, 65410,  379,  378,  377,  376,  375, 
	 371,  370,  369,  368,  367,  366,  365,  364, 65419, 65418, 
	65417, 65416, 65415, 65414, 65409, 65420, 65421, 65408, 65413, 65412, 
	65411, 65410,  379,  378,  377,  376,  375,  373,  371,  370, 
	 369,  368,  367,  366,  365,  364, 65432, 65419, 65418, 65417, 
	65416, 65415, 65414, 65409, 65420, 65422, 65421, 65408, 65413, 65412, 
	65411, 65410,  379,  378,  377,  376,  375,  373,  372,  371, 
	 370,  369,  368,  367,  366,  365,  364,  363, 65332, 65333, 
	65334, 65335, 65336, 65337, 65235, 65234, 65233, 65232, 65394, 65395, 
	65396, 65500, 65221, 65220, 65226, 65222, 65224, 65223, 65435, 65434, 
	65219, 65217, 65225, 65218, 65178,  414,  401,  400,  399,  398, 
	 394,  392,  391,  390,  389,  388,  387,  386,  385,  377, 
	 376,  374,  373,  372,  371,  370,  357,  356,  355,  354, 
	 353,  352, 65472,  392, 65438, 65437, 65213, 65221, 65220, 65226, 
	65222, 65224, 65223, 65435, 65219, 65217, 65225, 65218,  401,  400, 
	 399,  398,  392,  391,  390,  389,  388,  387,  386,  385, 
	 377,  376, 65332, 65333, 65334, 65335, 65336, 65337, 65235, 65234, 
	65233, 65232, 65394, 65395, 65396, 65469, 65221, 65220, 65226, 65222, 
	65224, 65223, 65391, 65219, 65217, 65225, 65218, 65178,  414,  401, 
	 400,  399,  398,  392,  391,  390,  389,  388,  387,  386, 
	 385,  377,  376,  374,  373,  372,  371,  370,  357,  356, 
	 355,  354,  353,  352, 65440,  385, 65466,  392, 65442, 65171, 
	 395,  361, 65211, 65221, 65220, 65226, 65222, 65224, 65223, 65219, 
	65217, 65225, 65218,  401,  400,  399,  398,  391,  390,  389, 
	 388,  387,  386,  385, 65212, 65221, 65220, 65226, 65222, 65224, 
	65223, 65219, 65217, 65225, 65218,  401,  400,  399,  398,  391, 
	 390,  389,  388,  387,  386,  385, 65443, 65169,  393,  361, 
	65444,  380, 65445,  380, 65446,  361, 65271,  393, 65447,  273, 
	65450,  385, 65278,  385, 65452,  360, 65161,  393, 65442,  361, 
	65453,  380, 65272,  359, 65277,  385, 65454,  392, 65455,  385, 
	65459, 65458, 65457,  381,  380,  273, 65460, 65248,  393,  360, 
	65245,  385,   -1
};
static short yypact[] = {

	   1,    2,    3,   11,   21,   81,    3,   97,   36,   97, 
	 103,   36,   36,  105,   36,  107,   36,   36,   36,   36, 
	 195,  107,  211,  213,  215,  217,  219,  221,    1,  224, 
	 285,  221,  289,   97,  296,  332,   97,  289,  487,  489, 
	 256,    1,  547,  563,  567,  567,  567,  572,  572,  582, 
	 582,  582,  582,  598,  598,  620,  645,  672,  547,    1, 
	 547,  547,  547,  855,  857,  857,  911,  915,  919,  788, 
	 929,  547,  937,  547,  547,  939,  951,  256,  256,  948, 
	 943,  939,  745,  935,  933,  931,  927,  925,  923,  855, 
	 256,  745,  921,  788,  917,  913,  908,  895,  873,  860, 
	 828,  788,  773,  256,  256,  745,  702,  565,  530,  527, 
	 525,  256,  256,  256,  256,  256,  256,  256,  256,  256, 
	 256,  256,  256,  256,  256,  256,  256,  256,  508,  256, 
	 491,  485,  483,  481,  440,  398,  380,  348,  316,  256, 
	 256,  256,  299,  299,  256,  107,  292,  287,  283,  256, 
	 256,  256,  229,  227,  209,  204,  149,  198,  193,  191, 
	 149,  101,   93,   69,   67,   65,   63,   56,   49,   36, 
	  23,   19
};
static short yygo[] = {

	65355, 65270, 65276, 65262,   59,   41,   28, 65364, 65290, 65228, 
	65216, 65216, 65215, 65214, 65216, 65203,  101,   98,   97,   93, 
	  69,    5, 65470, 65497, 65425, 65338,   36,   33, 65528, 65238, 
	65393,  167, 65283, 65295, 65296, 65297, 65297, 65297, 65392,  160, 
	 156,  134, 65502, 65177, 65404, 65506, 65285,  156, 65293, 65291, 
	 134, 65298, 65339, 65526, 65181, 65182,    9, 65534, 65532, 65261, 
	65260, 65259, 65258, 65257, 65256, 65255, 65254, 65521, 65280, 65377, 
	65381, 65284, 65508, 65282,   19,   17,   16,   14,   12, 65522, 
	65516, 65503, 65403, 65504, 65252, 65253,   31, 65494, 65433, 65441, 
	65451, 65468, 65251, 65250,   89, 65493, 65461, 65462, 65464, 65407, 
	65473, 65474, 65429, 65477, 65478, 65479, 65480, 65481, 65482, 65483, 
	65484, 65485, 65486, 65487, 65488, 65489, 65490, 65491, 65204, 65493, 
	65208, 65207, 65206, 65407, 65399, 65398, 65397, 65475,  151,  150, 
	 149,  144,  141,  140,  139,  129,  127,  126,  125,  124, 
	 123,  122,  121,  120,  119,  118,  117,  116,  115,  114, 
	 113,  112,  111,  104,  103,  100,   90,   78,   77,   40, 
	65498, 65426, 65402,   37, 65476, 65467, 65448, 65463, 65249, 65456, 
	65246, 65247,   75, 65523, 65509, 65244, 65524, 65510, 65242, 65525, 
	65518, 65505, 65240, 65374, 65366, 65527, 65517,  169, 65533, 65365, 
	65531, 65230, 65231,    6, 65387, 65400, 65209, 65205, 65202, 65471, 
	65471, 65471, 65201,  101,   93,   69, 65200, 65199,  142, 65428, 
	65492, 65427,   40, 65195, 65195, 65196,   18,    8, 65520, 65380, 
	65514, 65193, 65194,   21, 65379, 65382, 65496, 65346, 65378, 65192, 
	65515,  145, 65389, 65352, 65390, 65507, 65501, 65176, 65175, 65174, 
	65430, 65167, 65168, 65363,   91,   82, 65465, 65436,   69, 65160, 
	65160, 65160, 65170,  101,   93,   69, 65439, 65165, 65166,   93, 
	65164, 65163, 65162,   65, 65449,   -1
};
static short yypgo[] = {

	   0,    0,    0,   59,   93,  184,   66,    3,    8,   51, 
	  51,   25,   42,  233,  240,  227,   42,   42,   55,   28, 
	  28,  230,  235,  234,  225,   44,   44,  224,  232,  224, 
	 222,  226,   52,   52,   52,   52,  215,  215,  218,   38, 
	  38,   38,   38,   38,   38,   34,   34,   34,   34,   34, 
	  34,   34,   34,   34,   34,   33,   33,   33,   33,   33, 
	  33,   33,   33,   33,   33,   33,   33,   33,   33,   33, 
	  33,   33,   33,   33,   33,   33,   51,   51,   49,   49, 
	  49,   49,   46,   46,   46,   46,  192,    3,  188,   65, 
	 183,  180,  181,  179,  177,  176,  174,  173,  166,  167, 
	 165,  164,  160,  160,   85,   90,   88,   87,   80,   61, 
	  79,   60,   67,   59,   58,   57,   59,   59,   59,   59, 
	  59,   59,   59,   83,   83,   91,   91,  162,  168,  169, 
	 169,  171,   62,  175,   63,  178,   64,  182,   32,   32, 
	  30,   30,   30,   30,   30,  190,  190,    7,    8,    8, 
	  15,   15,   15,   15,   15,   15,   15,   15,   15,   15, 
	  22,   22,   22,   22,   22,   22,  194,  127,  127,  127, 
	 127,  127,  196,  197,  197,  197,  197,  197,  202,  207, 
	 186,  186,  220,  220,  228,   28,   28,   28,   28,   28, 
	  28,   28,   28,   28,   53,   53,   55,   55,  198,  236, 
	 236,  237,  237,  238,  239,  243,  243,  252,  256,  256, 
	 247,  247,  258,  258,  258,  262,  260,  260,  260,  264, 
	 264,  243,  233,   43,  198,  227,   25,  228,  219,  219, 
	  73,   73,  211,  211,  209,  209,  196,  196,  196,  196, 
	 196,  196,  196,  196,  196,  196,  196,  196,  196,  196, 
	 195,  195,  194,  189,  189,  189,  180,  182,  178,  175, 
	 171,  171,  168,  166,   82,   82,   89,   89,   81,   81, 
	  80,    0
};
static short yyrlen[] = {

	   0,    0,    0,    0,    3,    0,    2,    0,    0,    1, 
	   1,    0,    0,    3,    0,    1,    1,    1,    1,    1, 
	   1,    3,    0,    0,    4,    1,    1,    5,    0,    2, 
	   5,    0,    1,    1,    1,    1,    2,    5,    0,    1, 
	   1,    1,    1,    1,    1,    1,    1,    1,    1,    1, 
	   1,    1,    1,    1,    1,    1,    1,    1,    1,    1, 
	   1,    1,    1,    1,    1,    1,    1,    1,    1,    1, 
	   1,    1,    1,    1,    1,    1,    4,    4,    1,    1, 
	   1,    1,    4,    4,    1,    1,    3,    4,    0,    7, 
	   0,    2,    0,    0,    0,    0,    0,    0,    2,    0, 
	   0,    0,    3,    2,   10,    0,    0,    0,    2,    8, 
	   0,    5,    0,    1,    0,    3,    1,    1,    1,    1, 
	   1,    1,    1,    1,    2,    3,    1,   11,    3,    1, 
	   3,    3,    6,    1,    6,    1,    7,    1,    1,    1, 
	   1,    1,    1,    1,    1,    1,    3,    1,    1,    1, 
	   1,    1,    1,    1,    1,    1,    1,    1,    1,    1, 
	   1,    2,    2,    1,    2,    2,    3,    1,    2,    2, 
	   2,    1,    3,    1,    1,    1,    2,    2,    3,    3, 
	   1,    2,    1,    2,    4,    1,    1,    1,    1,    1, 
	   1,    1,    1,    1,    1,    2,    1,    1,    1,    1, 
	   1,    1,    1,    4,    3,    3,    1,    3,    3,    5, 
	   1,    3,    1,    2,    2,    3,    1,    1,    1,    0, 
	   1,    1,    0,    1,    1,    0,    1,    1,    0,    1, 
	   0,    1,    3,    1,    0,    1,    3,    3,    3,    3, 
	   3,    3,    3,    3,    3,    3,    3,    3,    3,    3, 
	   5,    3,    0,    0,    2,    1,    0,    0,    0,    0, 
	   3,    3,    0,    0,    0,    1,    0,    1,    0,    1, 
	   0,    2
};
#define YYS0	0
#define YYDELTA	159
#define YYNPACT	172
#define YYNDEF	75

#define YYr269	0
#define YYr270	1
#define YYr271	2
#define YYr10	3
#define YYr30	4
#define YYr74	5
#define YYr75	6
#define YYr78	7
#define YYr88	8
#define YYr117	9
#define YYr119	10
#define YYr229	11
#define YYr237	12
#define YYr250	13
#define YYr249	14
#define YYr238	15
#define YYr236	16
#define YYr235	17
#define YYr234	18
#define YYr226	19
#define YYr225	20
#define YYr216	21
#define YYr215	22
#define YYr213	23
#define YYr211	24
#define YYr210	25
#define YYr209	26
#define YYr208	27
#define YYr207	28
#define YYr206	29
#define YYr205	30
#define YYr204	31
#define YYr199	32
#define YYr198	33
#define YYr197	34
#define YYr196	35
#define YYr195	36
#define YYr194	37
#define YYr193	38
#define YYr157	39
#define YYr156	40
#define YYr155	41
#define YYr154	42
#define YYr153	43
#define YYr152	44
#define YYr151	45
#define YYr150	46
#define YYr149	47
#define YYr148	48
#define YYr147	49
#define YYr146	50
#define YYr145	51
#define YYr144	52
#define YYr143	53
#define YYr142	54
#define YYr141	55
#define YYr140	56
#define YYr139	57
#define YYr138	58
#define YYr137	59
#define YYr136	60
#define YYr135	61
#define YYr134	62
#define YYr133	63
#define YYr132	64
#define YYr131	65
#define YYr130	66
#define YYr129	67
#define YYr128	68
#define YYr127	69
#define YYr126	70
#define YYr125	71
#define YYr124	72
#define YYr123	73
#define YYr122	74
#define YYr121	75
#define YYr120	76
#define YYr118	77
#define YYr116	78
#define YYr115	79
#define YYr114	80
#define YYr113	81
#define YYr108	82
#define YYr107	83
#define YYr106	84
#define YYr105	85
#define YYr84	86
#define YYr77	87
#define YYr76	88
#define YYr73	89
#define YYr72	90
#define YYr70	91
#define YYr59	92
#define YYr58	93
#define YYr54	94
#define YYr53	95
#define YYr49	96
#define YYr48	97
#define YYr39	98
#define YYr37	99
#define YYr36	100
#define YYr35	101
#define YYr34	102
#define YYr33	103
#define YYr25	104
#define YYr24	105
#define YYr23	106
#define YYr22	107
#define YYr16	108
#define YYr15	109
#define YYr14	110
#define YYr13	111
#define YYr12	112
#define YYr11	113
#define YYr1	114
#define YYrACCEPT	YYr269
#define YYrERROR	YYr270
#define YYrLR2	YYr271
#if YYDEBUG
char * yysvar[] = {
	"$accept",
	"opt_sys_comment",
	"syscmt_attr",
	"syscmt_val",
	"any_literal",
	"signed_lit_or_const",
	"opt_var_modifier",
	"local_decl_scope",
	"function_name",
	"function_name_h",
	"simple_type",
	"generic_type",
	"qvt_type",
	"opt_edge_detection",
	"variable_name",
	"any_direct_var",
	"type_name",
	"basic_type",
	"string_type",
	"var_declsection_end",
	"var_modifiers",
	"var_modifier",
	"iec_source_file",
	"$1",
	"opt_pou_declaration",
	"configuration_declaration",
	"resource_declaration",
	"program_declaration",
	"functionblock_declaration",
	"function_declaration",
	"data_type_declaration",
	"const_section_list",
	"$12",
	"opt_var_decl_sections",
	"$14",
	"opt_target",
	"opt_task_configuration_list",
	"opt_program_configuration_list",
	"task_configuration_list",
	"task_configuration",
	"$22",
	"$23",
	"opt_task_initialisation_list",
	"$24",
	"task_initialisation_list",
	"task_initialisation",
	"expression",
	"program_configuration_list",
	"program_configuration",
	"$35",
	"$36",
	"opt_task_name",
	"$37",
	"opt_conf_elements",
	"conf_elements",
	"conf_element",
	"$48",
	"$49",
	"opt_end_program",
	"$53",
	"$54",
	"opt_end_function_block",
	"$58",
	"opt_func_type_name",
	"$59",
	"opt_end_function",
	"$72",
	"$74",
	"var_decl_section_list",
	"$76",
	"opt_syscmt_attrval_list",
	"syscmt_attrval_list",
	"syscmt_attrval_assign",
	"opt_array_dim_list",
	"array_dim_list",
	"bin_expression",
	"primary_expression",
	"variable",
	"paren_expression",
	"paren_expression_list",
	"opt_expression_list",
	"expression_list",
	"var_decl_section",
	"$193",
	"opt_var_decl_list",
	"var_decl_list",
	"var_decl",
	"var_decl_head",
	"var_decl_tail",
	"$204",
	"opt_var_comment",
	"var_list",
	"var_list_elem",
	"$207",
	"opt_initializer",
	"$213",
	"$215",
	"symbolic_variable",
	"multi_element_variable",
	"array_variable",
	"structured_variable",
	"$249",
	"initializer",
	"array_initial_element_list",
	"paren_struct_init",
	"struct_init",
	"array_initial_element",
	"init_simple",
	"paren_array_initial_element_list",
	"opt_array_initial_elements",
	0
};
short yyrmap[] = {

	 269,  270,  271,   10,   30,   74,   75,   78,   88,  117, 
	 119,  229,  237,  250,  249,  238,  236,  235,  234,  226, 
	 225,  216,  215,  213,  211,  210,  209,  208,  207,  206, 
	 205,  204,  199,  198,  197,  196,  195,  194,  193,  157, 
	 156,  155,  154,  153,  152,  151,  150,  149,  148,  147, 
	 146,  145,  144,  143,  142,  141,  140,  139,  138,  137, 
	 136,  135,  134,  133,  132,  131,  130,  129,  128,  127, 
	 126,  125,  124,  123,  122,  121,  120,  118,  116,  115, 
	 114,  113,  108,  107,  106,  105,   84,   77,   76,   73, 
	  72,   70,   59,   58,   54,   53,   49,   48,   39,   37, 
	  36,   35,   34,   33,   25,   24,   23,   22,   16,   15, 
	  14,   13,   12,   11,    1,    2,    3,    4,    5,    6, 
	   7,    8,    9,   20,   21,   28,   29,   38,   41,   43, 
	  44,   45,   50,   51,   55,   56,   60,   61,   63,   64, 
	  65,   66,   67,   68,   69,   82,   83,   85,   86,   87, 
	  89,   90,   91,   92,   93,   94,   95,   96,   97,   98, 
	  99,  100,  101,  102,  103,  104,  109,  158,  159,  160, 
	 161,  162,  177,  178,  179,  180,  181,  182,  183,  184, 
	 191,  192,  202,  203,  214,  217,  218,  219,  220,  221, 
	 222,  223,  224,  227,  230,  231,  232,  233,  240,  242, 
	 243,  245,  246,  247,  248,  253,  254,  255,  256,  257, 
	 258,  259,  260,  261,  262,  263,  268,  267,  266,  265, 
	 264,  252,  251,  244,  241,  239,  228,  212,  201,  200, 
	 190,  189,  188,  187,  186,  185,  176,  175,  174,  173, 
	 172,  171,  170,  169,  168,  167,  166,  165,  164,  163, 
	 112,  111,  110,   81,   80,   79,   71,   62,   57,   52, 
	  47,   46,   42,   40,   32,   31,   27,   26,   19,   18, 
	  17,    0
};
short yysmap[] = {

	   0,    3,    4,    5,    9,   27,   28,   42,   44,   77, 
	  81,   82,   83,   84,   85,   87,   88,   90,   91,   95, 
	  98,  102,  142,  143,  148,  153,  154,  156,  158,  162, 
	 175,  182,  183,  189,  196,  210,  219,  221,  227,  228, 
	 232,  260,  272,  274,  277,  278,  279,  280,  281,  282, 
	 283,  284,  285,  286,  287,  288,  289,  290,  291,  302, 
	 307,  308,  309,  310,  313,  314,  323,  326,  328,  329, 
	 347,  351,  361,  372,  373,  370,  369,  368,  367,  366, 
	 364,  362,  357,  355,  353,  349,  346,  345,  344,  342, 
	 341,  340,  338,  332,  327,  324,  322,  320,  319,  317, 
	 306,  304,  301,  300,  298,  296,  292,  275,  271,  263, 
	 261,  256,  255,  252,  251,  250,  249,  248,  247,  246, 
	 245,  244,  243,  242,  241,  240,  239,  238,  231,  230, 
	 229,  225,  222,  220,  214,  213,  212,  211,  209,  207, 
	 206,  205,  200,  199,  198,  186,  185,  180,  174,  173, 
	 172,  171,  170,  163,  104,  103,  100,   99,   96,   94, 
	  89,   80,   41,   17,   16,   15,   14,   13,   12,   11, 
	  10,    7,  305,  266,  268,  187,  188,   73,   31,   32, 
	 184,   97,  160,  267,  223,  224,  265,  159,  161,  269, 
	 190,  165,  166,  167,  168,   72,  169,   78,  105,  106, 
	 107,  108,  109,  110,  111,  112,  113,  114,  115,  116, 
	 117,  118,  119,  120,  121,  122,  123,  124,  125,  126, 
	 127,  128,  129,  130,  131,  132,  133,  134,  135,  136, 
	 137,  138,  139,  140,  141,  253,  254,  144,  145,  146, 
	 147,  258,  259,  149,  150,   70,   29,    1,  191,   45, 
	 151,  152,   53,   92,   54,   93,   55,  354,  359,  311, 
	 294,  295,  262,  358,  343,  293,  217,  155,  264,   56, 
	 157,   57,   18,    2,   26,   25,   24,   23,   22,   21, 
	  20,   19,  181,  218,  352,  325,  363,  371,  365,  375, 
	 374,  179,  178,  177,  176,  216,  215,   52,   51,   50, 
	  49,   48,   47,   46,    8,   71,    6,   69,   68,   67, 
	  66,   65,   64,   63,   62,   61,   60,   59,   58,  321, 
	 337,  335,  318,  336,  334,  257,  208,  237,  236,  235, 
	 204,  276,  203,  202,  201,  234,  233,  273,  299,   43, 
	  79,  101,  164,  226,   40,   39,   38,   37,   36,   35, 
	  34,   33,   30,   76,   86,   75,   74,  197,  195,  194, 
	 193,  192,  297,  270,  333,  303,  339,  350,  360,  316, 
	 348,  315,  331,  330,  356,  312
};
int yy_parse::yyntoken = 165;
int yy_parse::yynvar = 110;
int yy_parse::yynstate = 376;
int yy_parse::yynrule = 272;
#endif



// C++ YACC parser code
// Copyright 1991 by Mortice Kern Systems Inc.  All rights reserved.
//
// If YYDEBUG is defined as 1 and yy_parse::yydebug is set to 1,
// yyparse() will print a travelogue of its actions as it reads
// and parses input.
//
// YYSYNC can be defined to cause yyparse() to attempt to always
// hold a lookahead token

const YY_MIN_STATE_NUM = 20;	// not useful to be too small!

#if YYDEBUG
#ifdef YYTRACE
long	* yy_parse::States	= yyStates;
#endif
yyTypedRules * yy_parse::Rules	= yyRules;
yyNamedType * yy_parse::TokenTypes = yyTokenTypes;

#define YY_TRACE(fn) { done = 0; fn(); if (done) YYRETURN(-1); }
#endif

// Constructor for yy_parse: user-provided tables
yy_parse::yy_parse(int sz, short * states, YYSTYPE * stack)
{
	mustfree = 0;
	if ((size = sz) < YY_MIN_STATE_NUM
	 || (stateStack = states) == (short *) 0
	 || (valueStack = stack) == (YYSTYPE *) 0) {
		fprintf(stderr,"Bad state/stack given");
		exit(1);
	}
	reset = 1;		// force reset
#if YYDEBUG
	yydebug = 0;
	typeStack = new short[size+1];
	if (typeStack == (short *) 0) {
		fprintf(stderr,"Cannot allocate typeStack");
		exit(1);
	}
#endif
}
// Constructor for yy_parse: allocate tables with new
yy_parse::yy_parse(int sz)
{
    //=== INSERTED
    AFX_MANAGE_STATE(AfxGetStaticModuleState( ));
    //=== END OF INSERTED

	size = sz;
	reset = 1;		// force reset
	mustfree = 1;		// delete space in deconstructor
#if YYDEBUG
	yydebug = 0;
	typeStack = new short[size+1];
#endif
	stateStack = new short[size+1];
	valueStack = new YYSTYPE[size+1];

	if (stateStack == (short *) 0 || valueStack == (YYSTYPE *) 0
#if YYDEBUG
		|| typeStack == (short *) 0
#endif
	    ) {
		fprintf(stderr,"Not enough space for parser stacks");
		exit(1);
	}
}
// Destructor for class yy_parse
//	Free up space
yy_parse::~yy_parse()
{
    //=== INSERTED
    AFX_MANAGE_STATE(AfxGetStaticModuleState( ));
    //=== END OF INSERTED

	if (mustfree) {
		delete stateStack;
		delete valueStack;
	}
	stateStack = (short *) 0;
#if YYDEBUG
	delete typeStack;
#endif
}

#ifdef YACC_WINDOWS

// The initial portion of the yacc parser.
// In an windows environment, it will load the desired
// resources, obtain pointers to them, and then call
// the protected member win_yyparse() to acutally begin the
// parsing. When complete, win_yyparse() will return a
// value back to our new yyparse() function, which will 
// record that value temporarily, release the resources
// from global memory, and finally return the value
// back to the caller of yyparse().

int
yy_parse::yyparse(yy_scan* ps)
{
    //=== INSERTED
    AFX_MANAGE_STATE(AfxGetStaticModuleState( ));
    //=== END OF INSERTED

//=== INSERTED
    init();
//=== END OF INSERTED

	int wReturnValue;
	HANDLE hRes_table;
	short far *old_yydef;		// the following are used for saving
	short far *old_yyex;		// the current pointers
	short far *old_yyact;
	short far *old_yypact;
	short far *old_yygo;
	short far *old_yypgo;
	short far *old_yyrlen;

	// the following code will load the required
	// resources for a Windows based parser.

	hRes_table = LoadResource (hInst,
		FindResource (hInst, "UD_RES_yyYACC", "yyYACCTBL"));
	
	// return an error code if any
	// of the resources did not load

	if (hRes_table == (HANDLE)NULL)
		return (1);
	
	// the following code will lock the resources
	// into fixed memory locations for the parser
	// (also, save away the old pointer values)

	old_yydef = yydef;
	old_yyex = yyex;
	old_yyact = yyact;
	old_yypact = yypact;
	old_yygo = yygo;
	old_yypgo = yypgo;
	old_yyrlen = yyrlen;

	yydef = (short far *)LockResource (hRes_table);
	yyex = (short far *)(yydef + Sizeof_yydef);
	yyact = (short far *)(yyex + Sizeof_yyex);
	yypact = (short far *)(yyact + Sizeof_yyact);
	yygo = (short far *)(yypact + Sizeof_yypact);
	yypgo = (short far *)(yygo + Sizeof_yygo);
	yyrlen = (short far *)(yypgo + Sizeof_yypgo);

	// call the official yyparse() function

	wReturnValue = win_yyparse (ps);

	// unlock the resources

	UnlockResource (hRes_table);

	// and now free the resource

	FreeResource (hRes_table);

	//
	// restore previous pointer values
	//

	yydef = old_yydef;
	yyex = old_yyex;
	yyact = old_yyact;
	yypact = old_yypact;
	yygo = old_yygo;
	yypgo = old_yypgo;
	yyrlen = old_yyrlen;

	return (wReturnValue);
}	// end yyparse()


// The parser proper.
//	Note that this code is reentrant; you can return a value
//	and then resume parsing by recalling yyparse().
//	Call yyreset() before yyparse() if you want a fresh start

int
yy_parse::win_yyparse(yy_scan* ps)

#else /* YACC_WINDOWS */

// The parser proper.
//	Note that this code is reentrant; you can return a value
//	and then resume parsing by recalling yyparse().
//	Call yyreset() before yyparse() if you want a fresh start
int
yy_parse::yyparse(yy_scan* ps)

#endif /* YACC_WINDOWS */

{
#ifdef YACC_WINDOWS
	short far *yyp;	// needed as res tables locked in far memory
	short far *yyq;
#else
	short	* yyp, * yyq;		// table lookup
#endif /* YACC_WINDOWS */
	int	yyj;
#if YYDEBUG
	int	yyruletype = 0;
#endif

	if ((scan = ps) == (yy_scan *) 0) {	// scanner
		fprintf(stderr,"No scanner");
		exit(1);
	}

	if (reset) {			// start new parse
		yynerrs = 0;
		yyerrflag = 0;
		yyps = stateStack;
		yypv = valueStack;
#if YYDEBUG
		yytp = typeStack;
#endif
		yystate = YYS0;
		yyclearin();
		reset = 0;
	} else			// continue saved parse
		goto yyNext;			// after action

yyStack:
	if (++yyps > &stateStack[size]) {
		scan->yyerror("Parser stack overflow");
		YYABORT;
	}
	*yyps = yystate;	/* stack current state */
	*++yypv = yyval;	/* ... and value */
#if YYDEBUG
	if (yydebug) {
		*++yytp = yyruletype;	/* ... and type */
		YY_TRACE(yyShowState)
	}
#endif

	/*
	 * Look up next action in action table.
	 */
yyEncore:
#ifdef YYSYNC
	if (yychar < 0) {
		if ((yychar = scan->yylex()) < 0) {
			if (yychar == -2) YYABORT;
			yychar = 0;
		}	/* endif */
		yylval = ps->yylval;
#if YYDEBUG
		if (yydebug)
			yyShowRead();	// show new input token
#endif
	}
#endif
#ifdef YACC_WINDOWS
	if (yystate >= Sizeof_yypact) 	/* simple state */
#else /* YACC_WINDOWS */
	if (yystate >= sizeof yypact/sizeof yypact[0]) 	/* simple state */
#endif /* YACC_WINDOWS */
		yyi = yystate - YYDELTA;	/* reduce in any case */
	else {
		if(*(yyp = &yyact[yypact[yystate]]) >= 0) {
			/* Look for a shift on yychar */
#ifndef YYSYNC
			if (yychar < 0) {
				if ((yychar = scan->yylex()) < 0) {
					if (yychar == -2) YYABORT;
					yychar = 0;
				}	/* endif */
				yylval = ps->yylval;
#if YYDEBUG
				if (yydebug)
					yyShowRead();	// show new input token
#endif
			}
#endif
			yyq = yyp;
			yyi = yychar;
			while (yyi < *yyp++)
				;
			if (yyi == yyp[-1]) {
				yystate = yyneg(yyq[yyq-yyp]);
#if YYDEBUG
				if (yydebug) {
					yyruletype = yyGetType(yychar);
					YY_TRACE(yyShowShift)
				}
#endif
				yyval = yylval;		/* stack value */
				yyclearin();		/* clear token */
				if (yyerrflag)
					yyerrflag--;	/* successful shift */
				goto yyStack;
			}
		}

		/*
	 	 *	Fell through - take default action
	 	 */

#ifdef YACC_WINDOWS
		if (yystate >= Sizeof_yydef) 	/* simple state */
#else /* YACC_WINDOWS */
		if (yystate >= sizeof yydef /sizeof yydef[0])
#endif /* YACC_WINDOWS */
			goto yyError;
		if ((yyi = yydef[yystate]) < 0)	 { /* default == reduce? */

			/* Search exception table */
			yyp = &yyex[yyneg(yyi)];
#ifndef YYSYNC
			if (yychar < 0) {
				if ((yychar = scan->yylex()) < 0) {
					if (yychar == -2) YYABORT;
					yychar = 0;
				}	/* endif */
				yylval = ps->yylval;
#if YYDEBUG
				if (yydebug)
					yyShowRead();	// show new input token
#endif
			}
#endif
			while((yyi = *yyp) >= 0 && yyi != yychar)
				yyp += 2;
			yyi = yyp[1];
		}
	}

	yyj = yyrlen[yyi];

#if YYDEBUG
	if (yydebug) {
		npop = yyj; rule = yyi;
		YY_TRACE(yyShowReduce)
		yytp -= yyj;
	}
#endif
	yyps -= yyj;		/* pop stacks */
	yypvt = yypv;		/* save top */
	yypv -= yyj;
	yyval = yypv[1];	/* default action $ = $1 */
#if YYDEBUG
	if (yydebug)
		yyruletype = yyRules[yyrmap[yyi]].type;
#endif
	switch (yyi) {		/* perform semantic action */
		
case YYr1: {	/* iec_source_file :  opt_sys_comment */
SetFileSysComment(yypvt[0].syscmnt);
} break;

case YYr10: {	/* opt_pou_declaration :  */
 emptyfile(); 
} break;

case YYr11: {	/* opt_pou_declaration :  error */
 yyclearin(); YYRETURN(pou_error());
} break;

case YYr12: {	/* configuration_declaration :  CONFIGURATION IDENTIFIER */
 
                                                  configuration_begin(yypvt[-1].lexval, yypvt[0].lexval); 
                                                  set_next_impdir_insert_pos(yypvt[0].lexval);
                                                
} break;

case YYr13: {	/* configuration_declaration :  CONFIGURATION IDENTIFIER $12 opt_var_decl_sections END_CONFIGURATION */
 configuration_clear(yypvt[0].lexval); 
} break;

case YYr14: {	/* resource_declaration :  RESOURCE IDENTIFIER */
 resource_begin(yypvt[-1].lexval, yypvt[0].lexval); 
                                                  set_next_impdir_insert_pos(yypvt[0].lexval);
                                                  resoure_set_next_taskconf_insert_pos(yypvt[0].lexval);
                                                  resoure_set_next_progconf_insert_pos(yypvt[0].lexval); 
                                                
} break;

case YYr15: {	/* resource_declaration :  RESOURCE IDENTIFIER $14 opt_target opt_var_decl_sections opt_task_configuration_list opt_program_configuration_list END_RESOURCE */
 resource_clear(); 
} break;

case YYr16: {	/* opt_target :  ON IDENTIFIER */
 resource_set_target(yypvt[0].lexval); 
                                                  set_next_impdir_insert_pos(yypvt[0].lexval);
                                                  resoure_set_next_taskconf_insert_pos(yypvt[0].lexval);
                                                  resoure_set_next_progconf_insert_pos(yypvt[0].lexval); 
                                                
} break;

case YYr22: {	/* task_configuration :  TASK IDENTIFIER */
 task_configuration_begin(yypvt[-1].lexval, yypvt[0].lexval); 
} break;

case YYr23: {	/* task_configuration :  TASK IDENTIFIER $22 opt_sys_comment */
 task_configuration_set_sys_comment(yypvt[0].syscmnt); 
} break;

case YYr24: {	/* task_configuration :  TASK IDENTIFIER $22 opt_sys_comment $23 PAREN_OPEN opt_task_initialisation_list PAREN_CLOSE */
 task_configuration_initialisation_list_range(yypvt[-2].lexval, yypvt[0].lexval); 
} break;

case YYr25: {	/* task_configuration :  TASK IDENTIFIER $22 opt_sys_comment $23 PAREN_OPEN opt_task_initialisation_list PAREN_CLOSE $24 SEMICOLON */
 task_configuration_clear(yypvt[0].lexval);
                                                              resoure_set_next_taskconf_insert_pos(yypvt[0].lexval); 
                                                              resoure_set_next_progconf_insert_pos(yypvt[0].lexval); 
                                                            
} break;

case YYr30: {	/* task_initialisation :  IDENTIFIER BECOMES expression */
 task_configuration_initialisation(yypvt[-2].lexval, yypvt[-1].lexval); 
} break;

case YYr33: {	/* program_configuration_list :  program_configuration SEMICOLON */
 resoure_set_next_progconf_insert_pos(yypvt[0].lexval); program_configuration_clear(yypvt[0].lexval); 
} break;

case YYr34: {	/* program_configuration_list :  program_configuration_list program_configuration SEMICOLON */
 resoure_set_next_progconf_insert_pos(yypvt[0].lexval); program_configuration_clear(yypvt[0].lexval); 
} break;

case YYr35: {	/* program_configuration :  PROGRAM opt_var_modifier IDENTIFIER */
 program_configuration_begin(yypvt[-2].lexval, yypvt[0].lexval); 
} break;

case YYr36: {	/* program_configuration :  PROGRAM opt_var_modifier IDENTIFIER $35 opt_sys_comment */
 program_configuration_set_sys_comment(yypvt[0].syscmnt); 
} break;

case YYr37: {	/* program_configuration :  PROGRAM opt_var_modifier IDENTIFIER $35 opt_sys_comment $36 opt_task_name COLON IDENTIFIER */
 program_configuration_set_program_class(yypvt[0].lexval); 
} break;

case YYr39: {	/* opt_task_name :  WITH IDENTIFIER */
 program_configuration_set_task(yypvt[0].lexval); 
} break;

case YYr48: {	/* program_declaration :  PROGRAM IDENTIFIER */
 program_begin(yypvt[-1].lexval, yypvt[0].lexval); SuppressError();
} break;

case YYr49: {	/* program_declaration :  PROGRAM IDENTIFIER $48 opt_var_decl_sections */
 program_clear();
} break;

case YYr53: {	/* functionblock_declaration :  FUNCTION_BLOCK IDENTIFIER */
 fb_begin(yypvt[-1].lexval, yypvt[0].lexval); SuppressError();
} break;

case YYr54: {	/* functionblock_declaration :  FUNCTION_BLOCK IDENTIFIER $53 opt_var_decl_sections */
 fb_clear();
} break;

case YYr58: {	/* function_declaration :  FUNCTION function_name_h */
 function_begin(yypvt[-1].lexval, yypvt[0].lexval); SuppressError();
} break;

case YYr59: {	/* function_declaration :  FUNCTION function_name_h $58 opt_func_type_name opt_var_decl_sections */
 function_clear(); 
} break;

case YYr70: {	/* opt_func_type_name :  COLON type_name */
 function_set_function_type(yypvt[0].lexval); 
} break;

case YYr72: {	/* data_type_declaration :  TYPE IDENTIFIER */
 struct_begin(yypvt[-1].lexval, yypvt[0].lexval); 
} break;

case YYr73: {	/* data_type_declaration :  TYPE IDENTIFIER $72 COLON opt_var_decl_sections SEMICOLON END_TYPE */
 struct_clear(); 
} break;

case YYr74: {	/* const_section_list :  */
 globvarconstlist_begin(); 
} break;

case YYr75: {	/* const_section_list :  $74 var_decl_section_list */
 globvarconstlist_end(); 
                                  globvarconstlist_clear(); 
} break;

case YYr76: {	/* opt_sys_comment :  SYSTEM_COMMENT_BEGIN */
 syscmnt_begin(yypvt[0].lexval); 
} break;

case YYr77: {	/* opt_sys_comment :  SYSTEM_COMMENT_BEGIN $76 opt_syscmt_attrval_list SYSTEM_COMMENT_END */
 yyval.syscmnt = syscmnt_end(yypvt[0].lexval); 
} break;

case YYr78: {	/* opt_sys_comment :  */
 yyval.syscmnt = syscmnt_clear(); 
} break;

case YYr84: {	/* syscmt_attrval_assign :  syscmt_attr EQ syscmt_val */
 syscmnt_add_av(yypvt[-2].lexval, yypvt[0].lexval); 
} break;

case YYr88: {	/* syscmt_val :  */
 yyval.lexval = 0; 
} break;

case YYr105: {	/* type_name :  basic_type */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr106: {	/* type_name :  IDENTIFIER */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr107: {	/* type_name :  ARRAY opt_array_dim_list OF basic_type */
 extract_array_type(yypvt[-3].lexval, yypvt[0].lexval);  
                                              yyval.lexval = yypvt[0].lexval; 
} break;

case YYr108: {	/* type_name :  ARRAY opt_array_dim_list OF IDENTIFIER */
 yyval.lexval = yypvt[-3].lexval; 
} break;

case YYr113: {	/* basic_type :  simple_type */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr114: {	/* basic_type :  generic_type */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr115: {	/* basic_type :  qvt_type */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr116: {	/* basic_type :  string_type */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr117: {	/* string_type :  STRING */
 yyval.lexval = yypvt[0].lexval;; 
} break;

case YYr118: {	/* string_type :  STRING SQUARED_BRACKET_OPEN expression SQUARED_BRACKET_CLOSE */
 yyval.lexval = yypvt[-3].lexval; 
} break;

case YYr119: {	/* string_type :  WSTRING */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr120: {	/* string_type :  WSTRING SQUARED_BRACKET_OPEN expression SQUARED_BRACKET_CLOSE */
 yyval.lexval = yypvt[-3].lexval; 
} break;

case YYr121: {	/* simple_type :  TOKEN_INT */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr122: {	/* simple_type :  DINT */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr123: {	/* simple_type :  LREAL */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr124: {	/* simple_type :  TOKEN_DATE */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr125: {	/* simple_type :  TIME_OF_DAY */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr126: {	/* simple_type :  TOD */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr127: {	/* simple_type :  DATE_AND_TIME */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr128: {	/* simple_type :  DT */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr129: {	/* simple_type :  TIME */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr130: {	/* simple_type :  TOKEN_BOOL */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr131: {	/* simple_type :  TOKEN_BYTE */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr132: {	/* simple_type :  TOKEN_WORD */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr133: {	/* simple_type :  TOKEN_DWORD */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr134: {	/* simple_type :  SINT */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr135: {	/* simple_type :  LINT */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr136: {	/* simple_type :  USINT */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr137: {	/* simple_type :  TOKEN_UINT */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr138: {	/* simple_type :  UDINT */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr139: {	/* simple_type :  ULINT */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr140: {	/* simple_type :  REAL */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr141: {	/* simple_type :  LWORD */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr142: {	/* generic_type :  ANY */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr143: {	/* generic_type :  ANY_NUM */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr144: {	/* generic_type :  ANY_REAL */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr145: {	/* generic_type :  ANY_INT */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr146: {	/* generic_type :  ANY_BIT */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr147: {	/* generic_type :  ANY_STRING */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr148: {	/* generic_type :  ANY_DATE */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr149: {	/* generic_type :  ANY_ELEMENTARY */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr150: {	/* generic_type :  ANY_MAGNITUDE */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr151: {	/* generic_type :  ANY_DERIVED */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr152: {	/* qvt_type :  QVT_BOOL */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr153: {	/* qvt_type :  QVT_BYTE */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr154: {	/* qvt_type :  QVT_WORD */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr155: {	/* qvt_type :  QVT_DWORD */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr156: {	/* qvt_type :  QVT_DINT */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr157: {	/* qvt_type :  QVT_LREAL */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr193: {	/* var_decl_section :  local_decl_scope opt_var_modifier */
 vardeclsect_begin(yypvt[-1].lexval, yypvt[0].lexval); 
} break;

case YYr194: {	/* var_decl_section :  local_decl_scope opt_var_modifier $193 opt_var_decl_list var_declsection_end */
 vardeclsect_end(yypvt[0].lexval); 
} break;

case YYr195: {	/* var_decl_section :  IMPORT_DIRECTIVE STRING_LITERAL */
 import_directive(yypvt[0].lexval); 
                                       set_next_impdir_insert_pos(yypvt[0].lexval);
                                       resoure_set_next_taskconf_insert_pos(yypvt[0].lexval);
                                       resoure_set_next_progconf_insert_pos(yypvt[0].lexval); 
                                     
} break;

case YYr196: {	/* var_declsection_end :  END_VAR */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr197: {	/* var_declsection_end :  END_STRUCT */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr198: {	/* var_declsection_end :  TOKEN_END_CONST */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr199: {	/* var_declsection_end :  END_NATIVE */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr204: {	/* var_decl :  var_decl_head var_decl_tail SEMICOLON */
 vardecl_end_without_varcomment(yypvt[0].lexval); 
} break;

case YYr205: {	/* var_decl :  var_decl_head var_decl_tail SEMICOLON $204 opt_var_comment */
 vardecl_clear(); 
} break;

case YYr206: {	/* var_decl_head :  var_list COLON */
 varlistelem_end(yypvt[0].lexval); 
} break;

case YYr207: {	/* var_decl_head :  var_list_elem AT */
 varlistelem_end(yypvt[0].lexval); 
} break;

case YYr208: {	/* var_decl_head :  var_list_elem AT $207 any_direct_var COLON */
 varlistelem_address(yypvt[-1].lexval); 
} break;

case YYr209: {	/* any_direct_var :  DIRECT_VARIABLE */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr210: {	/* any_direct_var :  IDENTIFIER */
 yyval.lexval = yypvt[0].lexval; 
} break;

case YYr211: {	/* var_decl_tail :  type_name opt_edge_detection opt_var_modifier opt_initializer */
 vardecl_type(yypvt[-3].lexval); 
} break;

case YYr213: {	/* var_list :  var_list COMMA */
 varlistelem_end(yypvt[0].lexval); 
} break;

case YYr215: {	/* var_list_elem :  IDENTIFIER */
 varlistelem_begin(yypvt[0].lexval); 
} break;

case YYr216: {	/* var_list_elem :  IDENTIFIER $215 opt_sys_comment */
  varlistelem_syscomment(yypvt[0].syscmnt); 
} break;

case YYr225: {	/* local_decl_scope :  TOKEN_CONST */
 globvarconstlist_set_poutype(_CST_FILE); 
} break;

case YYr226: {	/* local_decl_scope :  VAR_GLOBAL */
 globvarconstlist_set_poutype(_GVL_FILE); 
} break;

case YYr229: {	/* opt_var_modifier :  */
 yyval.lexval = 0; 
} break;

case YYr234: {	/* var_modifier :  CONSTANT */
 yyval.lexval = 0; 
} break;

case YYr235: {	/* opt_edge_detection :  F_EDGE */
 vardecl_edge(yypvt[0].lexval); 
} break;

case YYr236: {	/* opt_edge_detection :  R_EDGE */
 vardecl_edge(yypvt[0].lexval); 
} break;

case YYr237: {	/* opt_edge_detection :  */
 yyval.lexval = 0; 
} break;

case YYr238: {	/* opt_var_comment :  VARIABLE_COMMENT */
 vardecl_var_comment(yypvt[0].lexval); vardecl_end(yypvt[0].lexval);
} break;

case YYr249: {	/* opt_initializer :  BECOMES */
 initializer_begin(yypvt[0].lexval); 
} break;

case YYr250: {	/* opt_initializer :  BECOMES $249 initializer */
 initializer_clear(); 
} break;
	case YYrACCEPT:
		YYACCEPT;
	case YYrERROR:
		goto yyError;
	}
yyNext:
	/*
	 *	Look up next state in goto table.
	 */

	yyp = &yygo[yypgo[yyi]];
	yyq = yyp++;
	yyi = *yyps;
	while (yyi < *yyp++)		/* busy little loop */
		;
	yystate = yyneg(yyi == *--yyp? yyq[yyq-yyp]: *yyq);
#if YYDEBUG
	if (yydebug)
		YY_TRACE(yyShowGoto)
#endif
	goto yyStack;

yyerrlabel:	;		/* come here from YYERROR	*/
	yyerrflag = 1;
	if (yyi == YYrERROR) {
		yyps--, yypv--;
#if YYDEBUG
		if (yydebug) yytp--;
#endif
	}
	
yyError:
	switch (yyerrflag) {

	case 0:		/* new error */
		yynerrs++;
		yyi = yychar;
		scan->yyerror("Syntax error");
		if (yyi != yychar) {
			/* user has changed the current token */
			/* try again */
			yyerrflag++;	/* avoid loops */
			goto yyEncore;
		}

	case 1:		/* partially recovered */
	case 2:
		yyerrflag = 3;	/* need 3 valid shifts to recover */
			
		/*
		 *	Pop states, looking for a
		 *	shift on `error'.
		 */

		for ( ; yyps > stateStack; yyps--, yypv--
#if YYDEBUG
					, yytp--
#endif
		) {
#ifdef YACC_WINDOWS
			if (*yyps >= Sizeof_yypact) 	/* simple state */
#else /* YACC_WINDOWS */
			if (*yyps >= sizeof yypact/sizeof yypact[0])
#endif /* YACC_WINDOWS */
				continue;
			yyp = &yyact[yypact[*yyps]];
			yyq = yyp;
			do
				;
			while (YYERRCODE < *yyp++);
			if (YYERRCODE == yyp[-1]) {
				yystate = yyneg(yyq[yyq-yyp]);
				goto yyStack;
			}
				
			/* no shift in this state */
#if YYDEBUG
			if (yydebug && yyps > stateStack+1)
				YY_TRACE(yyShowErrRecovery)
#endif
			/* pop stacks; try again */
		}
		/* no shift on error - abort */
		break;

	case 3:
		/*
		 *	Erroneous token after
		 *	an error - discard it.
		 */

		if (yychar == 0)  /* but not EOF */
			break;
#if YYDEBUG
		if (yydebug)
			YY_TRACE(yyShowErrDiscard)
#endif
		yyclearin();
		goto yyEncore;	/* try again in same state */
	}
	YYABORT;

}
#if YYDEBUG
/*
 * Return type of token
 */
int
yy_parse::yyGetType(int tok)
{
	yyNamedType * tp;
	for (tp = &yyTokenTypes[yyntoken-1]; tp > yyTokenTypes; tp--)
		if (tp->token == tok)
			return tp->type;
	return 0;
}

	
// Print a token legibly.
char *
yy_parse::yyptok(int tok)
{
	yyNamedType * tp;
	for (tp = &yyTokenTypes[yyntoken-1]; tp > yyTokenTypes; tp--)
		if (tp->token == tok)
			return tp->name;
	return "";
}
/*
 * Read state 'num' from YYStatesFile
 */
#ifdef YYTRACE

char *
yy_parse::yygetState(int num)
{
	int	size;
	char	*cp;
	static FILE *yyStatesFile = (FILE *) 0;
	static char yyReadBuf[YYMAX_READ+1];

	if (yyStatesFile == (FILE *) 0
	 && (yyStatesFile = fopen(YYStatesFile, "r")) == (FILE *) 0)
		return "yyExpandName: cannot open states file";

	if (num < yynstate - 1)
		size = (int)(States[num+1] - States[num]);
	else {
		/* length of last item is length of file - ptr(last-1) */
		if (fseek(yyStatesFile, 0L, 2) < 0)
			goto cannot_seek;
		size = (int) (ftell(yyStatesFile) - States[num]);
	}
	if (size < 0 || size > YYMAX_READ)
		return "yyExpandName: bad read size";
	if (fseek(yyStatesFile, States[num], 0) < 0) {
	cannot_seek:
		return "yyExpandName: cannot seek in states file";
	}

	(void) fread(yyReadBuf, 1, size, yyStatesFile);
	yyReadBuf[size] = '\0';
	return yyReadBuf;
}
#endif /* YYTRACE */
/*
 * Expand encoded string into printable representation
 * Used to decode yyStates and yyRules strings.
 * If the expansion of 's' fits in 'buf', return 1; otherwise, 0.
 */
int
yy_parse::yyExpandName(int num, int isrule, char * buf, int len)
{
	int	i, n, cnt, type;
	char	* endp, * cp, * s;

	if (isrule)
		s = yyRules[num].name;
	else
#ifdef YYTRACE
		s = yygetState(num);
#else
		s = "*no states*";
#endif

	for (endp = buf + len - 8; *s; s++) {
		if (buf >= endp) {		/* too large: return 0 */
		full:	(void) strcpy(buf, " ...\n");
			return 0;
		} else if (*s == '%') {		/* nonterminal */
			type = 0;
			cnt = yynvar;
			goto getN;
		} else if (*s == '&') {		/* terminal */
			type = 1;
			cnt = yyntoken;
		getN:
			if (cnt < 100)
				i = 2;
			else if (cnt < 1000)
				i = 3;
			else
				i = 4;
			for (n = 0; i-- > 0; )
				n = (n * 10) + *++s - '0';
			if (type == 0) {
				if (n >= yynvar)
					goto too_big;
				cp = yysvar[n];
			} else if (n >= yyntoken) {
			    too_big:
				cp = "<range err>";
			} else
				cp = yyTokenTypes[n].name;

			if ((i = strlen(cp)) + buf > endp)
				goto full;
			(void) strcpy(buf, cp);
			buf += i;
		} else
			*buf++ = *s;
	}
	*buf = '\0';
	return 1;
}
#ifndef YYTRACE
/*
 * Show current state of yyparse
 */
void
yy_parse::yyShowState()
{
	(void) printf("state %d (%d), char %s (%d)\n%d stateStack entries\n",
		yysmap[yystate],yystate,yyptok(yychar),yychar,
		yypv - valueStack);
}
// show results of reduction: yyi is rule number
void
yy_parse::yyShowReduce()
{
	(void) printf("Reduce by rule %d (pop#=%d)\n", yyrmap[rule], npop);
}
// show read token
void
yy_parse::yyShowRead()
{
	(void) printf("read %s (%d)\n", yyptok(yychar), yychar);
}
// show Goto
void
yy_parse::yyShowGoto()
{
	(void) printf("goto %d (%d)\n", yysmap[yystate], yystate);
}
// show Shift
void
yy_parse::yyShowShift()
{
	(void) printf("shift %d (%d)\n", yysmap[yystate], yystate);
}
// show error recovery
void
yy_parse::yyShowErrRecovery()
{
	(void) printf("Error recovery pops state %d (%d), uncovers %d (%d)\n",
		yysmap[*(yyps-1)], *(yyps-1), yysmap[yystate], yystate);
}
// show token discards in error processing
void
yy_parse::yyShowErrDiscard()
{
	(void) printf("Error recovery discards %s (%d), ",
		yyptok(yychar), yychar);
}
#endif	/* ! YYTRACE */
#endif	/* YYDEBUG */

