/* lex -al -LC -P lex_yacc\proto\yylex.cpp -D lex_yacc\Scanner.h -o lex_yacc\Scanner.cpp lex_yacc\Scanner.l */
#define INITIAL 0
#define ST_COMMENT 2
#define NATIVE_BLOCK 4
const yy_endst = 891;
const yy_nxtmax = 4341;
#define YY_LA_SIZE 112

static unsigned int yy_la_act[] = {
 144, 164, 145, 164, 153, 164, 5, 164, 6, 164, 153, 164, 153, 164, 153, 164,
 153, 164, 153, 164, 153, 164, 153, 164, 153, 164, 153, 164, 153, 164, 153, 164,
 153, 164, 153, 164, 153, 164, 153, 164, 153, 164, 153, 164, 153, 164, 153, 164,
 153, 164, 153, 164, 153, 164, 153, 164, 153, 164, 124, 164, 125, 164, 126, 164,
 127, 164, 129, 164, 130, 164, 132, 164, 134, 164, 136, 164, 139, 164, 140, 164,
 142, 164, 143, 164, 146, 164, 147, 164, 148, 164, 149, 164, 164, 153, 164, 153,
 164, 154, 164, 154, 164, 154, 164, 154, 164, 162, 164, 163, 164, 163, 164, 162,
 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 154, 155,
 155, 155, 155, 154, 154, 154, 154, 154, 154, 154, 153, 153, 664, 151, 141, 150,
 137, 135, 131, 133, 138, 128, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
 123, 153, 153, 153, 153, 122, 153, 153, 153, 121, 153, 153, 153, 120, 153, 153,
 153, 153, 119, 153, 153, 118, 153, 153, 153, 112, 153, 153, 68, 153, 153, 153,
 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 115, 153, 153, 153, 153,
 153, 81, 153, 153, 153, 75, 153, 153, 153, 153, 153, 74, 153, 153, 153, 153,
 153, 73, 153, 153, 153, 153, 153, 153, 153, 72, 153, 153, 153, 153, 153, 70,
 153, 153, 153, 153, 153, 153, 153, 76, 153, 153, 71, 153, 153, 69, 153, 153,
 108, 153, 153, 48, 153, 154, 154, 154, 154, 154, 154, 153, 47, 153, 161, 160,
 153, 153, 153, 153, 153, 153, 153, 104, 153, 153, 153, 36, 153, 153, 153, 35,
 153, 153, 34, 153, 153, 153, 33, 153, 153, 153, 153, 153, 153, 51, 153, 153,
 153, 38, 153, 153, 32, 153, 153, 153, 43, 153, 153, 101, 153, 156, 156, 153,
 153, 50, 153, 157, 157, 157, 157, 153, 39, 153, 153, 153, 153, 153, 153, 153,
 153, 153, 153, 153, 153, 153, 153, 42, 153, 153, 153, 42, 153, 153, 31, 153,
 153, 92, 153, 30, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 86, 153,
 153, 153, 153, 153, 153, 153, 153, 153, 161, 106, 153, 153, 91, 153, 153, 153,
 153, 67, 153, 153, 153, 153, 153, 153, 25, 153, 153, 153, 153, 153, 153, 27,
 153, 153, 153, 153, 153, 153, 23, 153, 153, 153, 153, 153, 153, 153, 153, 153,
 153, 153, 153, 153, 113, 153, 153, 29, 153, 153, 153, 84, 153, 153, 153, 153,
 44, 153, 153, 21, 153, 153, 153, 153, 107, 153, 153, 153, 159, 159, 159, 159,
 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
 159, 159, 159, 159, 159, 159, 153, 93, 153, 153, 153, 153, 160, 153, 153, 153,
 153, 153, 153, 87, 153, 41, 153, 158, 158, 158, 158, 153, 46, 153, 153, 153,
 153, 153, 153, 153, 40, 153, 153, 19, 153, 153, 18, 153, 153, 153, 153, 153,
 153, 153, 100, 153, 153, 49, 153, 153, 153, 153, 153, 45, 153, 153, 17, 153,
 153, 153, 153, 153, 153, 66, 153, 153, 153, 153, 153, 153, 153, 111, 153, 153,
 78, 153, 37, 153, 153, 153, 153, 153, 153, 153, 153, 83, 153, 153, 153, 82,
 153, 153, 153, 153, 153, 14, 153, 153, 153, 153, 153, 153, 103, 153, 64, 153,
 64, 153, 153, 153, 153, 153, 110, 153, 153, 153, 95, 153, 94, 153, 153, 153,
 153, 153, 153, 153, 153, 153, 153, 153, 153, 88, 153, 153, 65, 153, 153, 153,
 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 105,
 153, 153, 153, 153, 102, 153, 96, 153, 153, 153, 153, 153, 90, 153, 153, 77,
 153, 153, 153, 109, 153, 153, 153, 153, 153, 153, 26, 153, 153, 153, 153, 153,
 153, 28, 153, 153, 153, 153, 153, 153, 24, 153, 153, 153, 153, 153, 153, 153,
 153, 153, 153, 153, 153, 114, 153, 153, 153, 85, 153, 153, 153, 22, 153, 153,
 153, 20, 153, 153, 153, 153, 153, 153, 153, 15, 153, 153, 153, 153, 153, 99,
 153, 153, 153, 153, 117, 153, 153, 153, 153, 153, 153, 153, 153, 153, 13, 153,
 153, 153, 153, 153, 153, 153, 97, 153, 153, 153, 153, 116, 153, 153, 153, 80,
 153, 153, 153, 153, 153, 153, 153, 153, 153, 12, 153, 153, 10, 153, 9, 153,
 16, 153, 98, 153, 153, 62, 153, 153, 153, 153, 153, 153, 89, 153, 153, 153,
 63, 153, 8, 153, 52, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
 153, 153, 153, 153, 153, 153, 60, 153, 153, 153, 153, 153, 153, 153, 153, 153,
 59, 153, 153, 153, 153, 153, 153, 153, 61, 153, 153, 58, 153, 153, 153, 153,
 153, 57, 153, 153, 56, 153, 153, 55, 153, 153, 153, 54, 153, 153, 53, 153,
 153, 7, 153, 153, 153, 11, 153, 153, 153, 153, 153, 153, 153, 153, 79, 153,
 153, 153, 153, 4, 153, 3, 2, 1, 0, 0
};

static unsigned char yy_look[] = {
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0
};

static int yy_final[] = {
 0, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28,
 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60,
 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92,
 93, 95, 97, 99, 101, 103, 105, 107, 109, 110, 111, 112, 113, 114, 114, 114,
 114, 115, 116, 117, 117, 118, 119, 119, 119, 120, 121, 121, 122, 122, 123, 124,
 125, 126, 126, 127, 127, 127, 128, 128, 129, 129, 129, 130, 130, 131, 132, 132,
 133, 133, 134, 134, 135, 136, 136, 137, 137, 138, 139, 140, 140, 140, 140, 140,
 140, 140, 140, 140, 141, 141, 141, 141, 141, 142, 143, 144, 145, 146, 147, 148,
 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165,
 167, 168, 169, 171, 172, 173, 175, 176, 177, 178, 180, 181, 183, 184, 185, 187,
 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205,
 206, 207, 208, 209, 211, 212, 213, 215, 216, 217, 218, 219, 221, 222, 223, 224,
 225, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 241, 242, 243,
 244, 245, 246, 247, 249, 250, 252, 253, 255, 256, 258, 259, 261, 261, 261, 262,
 263, 264, 265, 265, 266, 267, 268, 270, 270, 270, 270, 270, 270, 270, 271, 271,
 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 285, 286, 287, 289,
 290, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 307, 307, 307,
 307, 307, 307, 308, 310, 311, 312, 314, 315, 317, 317, 317, 317, 317, 317, 317,
 317, 317, 317, 318, 318, 319, 320, 321, 323, 323, 323, 323, 323, 323, 323, 323,
 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 324, 324,
 325, 325, 326, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339,
 340, 341, 342, 343, 345, 346, 347, 349, 350, 352, 353, 355, 357, 358, 359, 360,
 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 377, 379,
 380, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398,
 399, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416,
 417, 418, 419, 420, 422, 423, 425, 426, 427, 429, 430, 431, 432, 434, 435, 437,
 438, 439, 440, 442, 443, 444, 444, 444, 444, 444, 444, 444, 445, 446, 447, 448,
 449, 449, 449, 449, 449, 449, 449, 449, 450, 451, 452, 453, 453, 453, 453, 453,
 453, 454, 455, 455, 455, 455, 456, 456, 456, 456, 456, 456, 456, 456, 457, 458,
 459, 460, 460, 460, 460, 460, 460, 460, 461, 462, 463, 463, 463, 463, 463, 463,
 464, 464, 464, 464, 464, 464, 465, 465, 465, 465, 465, 465, 465, 465, 466, 467,
 468, 469, 469, 469, 469, 469, 469, 469, 470, 470, 470, 470, 471, 471, 471, 471,
 471, 471, 472, 472, 472, 472, 472, 472, 473, 473, 473, 473, 473, 473, 474, 474,
 474, 474, 474, 474, 474, 474, 475, 476, 477, 478, 478, 478, 478, 478, 478, 478,
 479, 479, 479, 479, 480, 480, 480, 480, 481, 481, 481, 481, 482, 483, 484, 485,
 486, 487, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 501, 503, 503, 503,
 503, 503, 503, 503, 503, 503, 503, 504, 504, 505, 505, 506, 506, 507, 508, 510,
 511, 512, 513, 514, 515, 516, 518, 519, 521, 522, 524, 525, 526, 527, 528, 529,
 530, 532, 533, 535, 536, 537, 538, 539, 541, 542, 544, 545, 546, 547, 548, 549,
 551, 552, 553, 554, 555, 556, 557, 559, 560, 562, 564, 565, 566, 567, 568, 569,
 570, 571, 573, 574, 575, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588,
 590, 592, 594, 595, 596, 597, 598, 600, 601, 602, 604, 606, 607, 608, 609, 610,
 611, 612, 613, 614, 615, 616, 617, 619, 620, 622, 623, 624, 625, 626, 627, 628,
 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 646,
 648, 649, 650, 651, 652, 654, 655, 657, 658, 659, 661, 662, 663, 664, 665, 666,
 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685,
 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 699, 700, 701, 703, 704,
 705, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 721, 722, 723,
 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741,
 742, 744, 745, 746, 747, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760,
 761, 763, 764, 766, 768, 770, 772, 773, 775, 776, 777, 778, 779, 780, 782, 783,
 784, 786, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802,
 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820,
 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 835, 836, 838, 839, 841,
 842, 843, 845, 846, 848, 849, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861,
 862, 864, 865, 866, 867, 869, 870, 871, 872, 872, 872, 873
};
#ifndef yy_state_t
#define yy_state_t unsigned int
#endif

static yy_state_t yy_begin[] = {
 0, 0, 0, 0, 0, 0, 0
};

static yy_state_t yy_next[] = {
 57, 57, 57, 57, 57, 57, 57, 57, 57, 55, 56, 57, 57, 55, 57, 57,
 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
 55, 57, 4, 47, 57, 54, 34, 5, 2, 43, 32, 30, 41, 31, 40, 33,
 50, 51, 52, 50, 50, 50, 50, 50, 53, 50, 38, 39, 36, 35, 37, 57,
 57, 7, 26, 10, 22, 11, 20, 28, 48, 21, 48, 48, 24, 6, 3, 8,
 19, 29, 13, 18, 16, 25, 27, 15, 9, 48, 48, 42, 57, 1, 57, 49,
 57, 7, 26, 10, 23, 12, 20, 28, 48, 21, 48, 48, 24, 6, 3, 8,
 19, 29, 14, 18, 17, 25, 27, 15, 9, 48, 48, 44, 46, 45, 57, 57,
 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
 63, 61, 63, 62, 67, 891, 891, 891, 891, 59, 891, 96, 63, 97, 97, 58,
 58, 58, 58, 58, 58, 58, 58, 58, 58, 67, 891, 101, 891, 891, 121, 109,
 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 99, 99, 122, 123, 60, 109,
 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 64, 64, 64, 64, 64, 64,
 64, 64, 64, 64, 124, 110, 111, 112, 113, 98, 116, 64, 64, 64, 64, 64,
 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
 64, 64, 64, 64, 64, 110, 111, 112, 113, 127, 116, 64, 64, 64, 64, 64,
 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
 64, 64, 64, 64, 64, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 128,
 117, 118, 119, 120, 126, 125, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
 117, 118, 119, 120, 66, 131, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
 63, 63, 891, 161, 891, 93, 93, 93, 93, 93, 93, 93, 93, 67, 67, 65,
 65, 65, 65, 65, 65, 65, 65, 65, 65, 891, 129, 130, 136, 137, 96, 138,
 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 129, 130, 136, 137, 66, 138,
 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 70, 61, 71, 62, 101, 891,
 891, 891, 231, 891, 79, 269, 891, 80, 68, 68, 68, 68, 68, 68, 68, 68,
 68, 68, 100, 139, 142, 143, 144, 296, 145, 68, 68, 68, 68, 68, 68, 68,
 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
 68, 68, 68, 139, 142, 143, 144, 69, 145, 68, 68, 68, 68, 68, 68, 68,
 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
 68, 68, 68, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 891, 146, 147,
 148, 149, 330, 152, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 146, 147,
 148, 149, 73, 152, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 63, 63,
 891, 891, 891, 891, 891, 296, 296, 353, 379, 891, 891, 67, 67, 72, 72, 72,
 72, 72, 72, 72, 72, 72, 72, 228, 153, 154, 155, 156, 891, 157, 72, 72,
 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
 72, 72, 72, 72, 72, 72, 72, 72, 153, 154, 155, 156, 73, 157, 72, 72,
 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
 72, 72, 72, 72, 72, 72, 72, 72, 74, 74, 74, 74, 74, 74, 74, 74,
 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 75, 74, 74, 74, 74, 74,
 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
 74, 74, 74, 74, 74, 74, 74, 74, 76, 76, 76, 76, 76, 76, 76, 76,
 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 77, 76, 76, 76, 76, 76,
 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
 76, 76, 76, 76, 76, 76, 76, 76, 63, 891, 61, 891, 62, 891, 891, 891,
 891, 891, 891, 573, 891, 67, 891, 78, 78, 78, 78, 78, 78, 78, 78, 78,
 78, 891, 158, 159, 160, 594, 573, 170, 78, 78, 78, 78, 78, 78, 78, 78,
 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
 78, 78, 158, 159, 160, 891, 60, 170, 78, 78, 78, 78, 78, 78, 78, 78,
 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
 78, 78, 61, 635, 62, 83, 269, 668, 681, 720, 779, 819, 874, 885, 891, 891,
 84, 886, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 85, 85, 85, 85,
 85, 85, 85, 85, 85, 85, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 891, 88, 171, 89, 891, 89,
 891, 81, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 95, 95, 95, 95,
 95, 95, 95, 95, 891, 86, 887, 107, 172, 173, 891, 88, 171, 174, 108, 91,
 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 281, 891, 891, 888, 889, 890,
 891, 102, 102, 102, 102, 102, 102, 107, 172, 173, 891, 94, 891, 174, 108, 175,
 176, 177, 141, 178, 179, 180, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
 140, 102, 102, 102, 102, 102, 102, 104, 104, 104, 104, 104, 104, 891, 891, 175,
 176, 177, 141, 178, 179, 180, 326, 181, 182, 183, 184, 185, 186, 187, 891, 421,
 140, 891, 891, 891, 891, 103, 891, 104, 104, 104, 104, 104, 104, 106, 106, 106,
 106, 106, 106, 106, 106, 106, 106, 181, 182, 183, 184, 185, 186, 187, 106, 106,
 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
 106, 106, 106, 106, 106, 106, 106, 106, 891, 891, 891, 591, 105, 891, 106, 106,
 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
 106, 106, 106, 106, 106, 106, 106, 106, 114, 114, 114, 114, 114, 114, 114, 114,
 114, 114, 115, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
 114, 114, 114, 114, 114, 114, 114, 114, 132, 150, 134, 188, 189, 190, 191, 192,
 193, 194, 135, 151, 165, 195, 168, 196, 164, 197, 166, 198, 162, 133, 199, 200,
 201, 169, 163, 202, 203, 204, 205, 167, 132, 150, 134, 188, 189, 190, 191, 192,
 193, 194, 135, 151, 165, 195, 168, 196, 164, 197, 166, 198, 162, 133, 199, 200,
 201, 169, 163, 202, 203, 204, 205, 167, 206, 209, 210, 211, 212, 213, 214, 215,
 216, 218, 219, 208, 891, 229, 221, 207, 221, 230, 217, 222, 223, 224, 222, 222,
 222, 222, 222, 225, 222, 891, 891, 891, 206, 209, 210, 211, 212, 213, 214, 215,
 216, 218, 219, 208, 220, 229, 891, 891, 891, 230, 217, 891, 891, 891, 891, 891,
 891, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 891, 234, 235, 236, 237,
 891, 238, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 234, 235, 236, 237,
 105, 238, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 83, 239, 240, 694,
 246, 891, 247, 248, 249, 233, 891, 250, 251, 227, 227, 227, 227, 227, 227, 227,
 227, 227, 227, 232, 252, 253, 254, 243, 891, 255, 256, 257, 242, 239, 240, 244,
 246, 245, 247, 248, 249, 233, 241, 250, 251, 258, 259, 263, 694, 264, 265, 266,
 267, 268, 891, 232, 252, 253, 254, 243, 226, 255, 256, 257, 242, 891, 260, 244,
 274, 245, 275, 293, 294, 295, 241, 261, 891, 258, 259, 263, 262, 264, 265, 266,
 267, 268, 84, 891, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 260, 281,
 274, 324, 275, 293, 294, 295, 325, 261, 270, 327, 270, 891, 262, 271, 271, 271,
 271, 271, 271, 271, 271, 271, 271, 328, 329, 331, 891, 334, 335, 277, 336, 337,
 338, 324, 339, 272, 340, 276, 325, 341, 342, 327, 343, 280, 344, 349, 332, 350,
 278, 351, 352, 279, 891, 891, 891, 328, 329, 333, 891, 334, 335, 277, 336, 337,
 338, 891, 339, 891, 340, 276, 891, 341, 342, 891, 343, 280, 344, 349, 891, 350,
 278, 351, 352, 279, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 285, 891,
 891, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 286, 286, 286, 286, 286,
 286, 286, 286, 286, 286, 289, 891, 891, 288, 288, 288, 288, 288, 288, 288, 288,
 288, 288, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 891, 891, 891, 891,
 283, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 297, 297, 297, 297, 297,
 297, 297, 297, 297, 297, 300, 891, 287, 299, 299, 299, 299, 299, 299, 299, 299,
 299, 299, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 891, 891, 304, 891,
 291, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 305, 305, 305, 305, 305,
 305, 305, 305, 305, 305, 308, 891, 298, 307, 307, 307, 307, 307, 307, 307, 307,
 307, 307, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 891, 891, 891, 891,
 302, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 312, 313, 313, 313, 313,
 313, 313, 313, 313, 313, 313, 891, 306, 315, 315, 315, 315, 315, 315, 315, 315,
 315, 315, 316, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 891, 891, 320,
 310, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 321, 321, 321, 321, 321,
 321, 321, 321, 321, 321, 281, 354, 314, 323, 323, 323, 323, 323, 323, 323, 323,
 323, 323, 346, 348, 355, 356, 891, 891, 357, 891, 345, 363, 891, 364, 347, 891,
 318, 365, 891, 277, 366, 367, 354, 368, 369, 370, 371, 276, 891, 372, 362, 373,
 374, 280, 346, 348, 355, 356, 278, 322, 357, 279, 345, 363, 361, 364, 347, 360,
 375, 365, 358, 277, 366, 367, 376, 368, 369, 370, 371, 276, 359, 372, 362, 373,
 374, 280, 377, 378, 380, 381, 278, 382, 383, 279, 384, 385, 361, 386, 387, 360,
 375, 388, 358, 389, 390, 394, 376, 891, 395, 396, 397, 398, 891, 399, 400, 401,
 402, 403, 377, 378, 380, 381, 404, 382, 383, 405, 384, 385, 392, 386, 387, 408,
 411, 388, 412, 389, 390, 394, 407, 391, 395, 396, 397, 398, 393, 399, 400, 401,
 402, 403, 410, 406, 413, 414, 404, 439, 891, 405, 421, 442, 392, 891, 409, 408,
 411, 461, 412, 891, 464, 891, 407, 391, 891, 891, 891, 891, 393, 472, 493, 891,
 891, 891, 410, 406, 413, 414, 496, 440, 415, 891, 891, 441, 891, 891, 409, 420,
 417, 462, 891, 891, 463, 891, 418, 533, 891, 419, 891, 891, 536, 473, 494, 891,
 416, 891, 891, 891, 891, 891, 495, 891, 415, 891, 891, 891, 891, 891, 891, 420,
 417, 891, 891, 891, 891, 891, 418, 534, 891, 419, 891, 891, 535, 891, 422, 891,
 416, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 426, 891, 425, 425, 425,
 425, 425, 425, 425, 425, 425, 425, 433, 433, 433, 433, 433, 433, 433, 433, 433,
 433, 427, 449, 472, 560, 428, 891, 891, 561, 891, 429, 891, 891, 891, 891, 436,
 431, 435, 435, 435, 435, 435, 435, 435, 435, 435, 435, 891, 424, 891, 891, 891,
 891, 427, 448, 473, 560, 428, 432, 891, 561, 891, 430, 891, 891, 891, 438, 891,
 431, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 562, 564, 891, 891, 891,
 434, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 565, 891, 891, 437, 563,
 447, 447, 447, 447, 447, 447, 447, 447, 447, 447, 891, 562, 564, 452, 438, 451,
 451, 451, 451, 451, 451, 451, 451, 451, 451, 891, 891, 565, 891, 566, 891, 563,
 444, 567, 568, 449, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 437, 446,
 891, 458, 453, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 566, 450, 569,
 570, 567, 568, 448, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 571, 891,
 460, 891, 453, 454, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 572, 569,
 570, 891, 456, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, 891, 571, 891,
 459, 460, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 891, 891, 572, 891,
 589, 891, 891, 466, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 590, 592,
 891, 459, 891, 593, 891, 471, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451,
 589, 469, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 595, 596, 590, 592,
 891, 891, 891, 593, 478, 471, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477,
 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 891, 597, 595, 596, 598, 891,
 599, 474, 484, 479, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 891, 891,
 891, 891, 891, 891, 891, 476, 891, 891, 891, 891, 891, 597, 891, 891, 598, 480,
 599, 600, 601, 479, 606, 607, 608, 485, 487, 487, 487, 487, 487, 487, 487, 487,
 487, 487, 490, 482, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 891, 891,
 891, 600, 601, 891, 606, 607, 608, 485, 891, 891, 891, 891, 891, 891, 609, 610,
 611, 492, 891, 891, 891, 891, 891, 486, 497, 497, 497, 497, 497, 497, 497, 497,
 497, 497, 891, 488, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 609, 610,
 611, 491, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 891, 891, 612, 613,
 614, 492, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 891, 891, 891, 891,
 615, 891, 891, 498, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 612, 613,
 614, 491, 616, 617, 618, 503, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483,
 615, 501, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 620, 621, 619, 622,
 623, 629, 616, 617, 618, 503, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506,
 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 891, 630, 620, 621, 627, 622,
 623, 629, 512, 507, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 631, 605,
 602, 632, 628, 891, 638, 505, 604, 639, 640, 641, 603, 630, 513, 891, 627, 508,
 891, 891, 891, 507, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 631, 605,
 602, 632, 628, 510, 638, 642, 604, 639, 640, 641, 603, 518, 513, 517, 517, 517,
 517, 517, 517, 517, 517, 517, 517, 521, 521, 521, 521, 521, 521, 521, 521, 521,
 521, 643, 644, 514, 645, 642, 891, 646, 647, 524, 519, 523, 523, 523, 523, 523,
 523, 523, 523, 523, 523, 891, 891, 891, 891, 891, 891, 891, 516, 891, 891, 891,
 891, 643, 644, 891, 645, 634, 520, 646, 647, 648, 519, 649, 650, 633, 525, 527,
 527, 527, 527, 527, 527, 527, 527, 527, 527, 530, 522, 529, 529, 529, 529, 529,
 529, 529, 529, 529, 529, 634, 619, 891, 891, 648, 891, 649, 618, 633, 525, 891,
 891, 891, 891, 891, 891, 652, 653, 654, 532, 651, 891, 891, 891, 891, 526, 537,
 537, 537, 537, 537, 537, 537, 537, 537, 537, 891, 528, 539, 539, 539, 539, 539,
 539, 539, 539, 539, 539, 652, 653, 654, 531, 540, 540, 540, 540, 540, 540, 540,
 540, 540, 540, 891, 891, 655, 661, 662, 532, 542, 542, 542, 542, 542, 542, 542,
 542, 542, 542, 891, 891, 891, 891, 625, 891, 891, 538, 542, 542, 542, 542, 542,
 542, 542, 542, 542, 542, 655, 661, 662, 531, 624, 626, 663, 543, 523, 523, 523,
 523, 523, 523, 523, 523, 523, 523, 625, 541, 544, 544, 544, 544, 544, 544, 544,
 544, 544, 544, 665, 666, 667, 891, 664, 669, 624, 626, 663, 543, 546, 546, 546,
 546, 546, 546, 546, 546, 546, 546, 548, 548, 548, 548, 548, 548, 548, 548, 548,
 548, 636, 670, 665, 666, 667, 625, 664, 669, 637, 547, 550, 550, 550, 550, 550,
 550, 550, 550, 550, 550, 652, 671, 672, 624, 626, 891, 673, 545, 674, 675, 676,
 677, 636, 670, 551, 891, 891, 625, 891, 891, 637, 547, 552, 552, 552, 552, 552,
 552, 552, 552, 552, 552, 652, 671, 672, 624, 626, 549, 673, 891, 674, 675, 676,
 677, 891, 678, 551, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554,
 554, 554, 554, 554, 554, 554, 554, 554, 555, 679, 695, 696, 556, 697, 698, 699,
 700, 557, 678, 701, 680, 702, 703, 559, 425, 425, 425, 425, 425, 425, 425, 425,
 425, 425, 891, 553, 891, 891, 891, 891, 555, 679, 695, 696, 556, 697, 698, 699,
 700, 558, 891, 701, 680, 702, 703, 559, 574, 574, 574, 574, 574, 574, 574, 574,
 574, 574, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 577, 578, 578, 578,
 578, 578, 578, 578, 578, 578, 578, 580, 580, 580, 580, 580, 580, 580, 580, 580,
 580, 581, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 891, 891, 891, 891,
 585, 575, 584, 584, 584, 584, 584, 584, 584, 584, 584, 584, 586, 586, 586, 586,
 586, 586, 586, 586, 586, 586, 579, 588, 588, 588, 588, 588, 588, 588, 588, 588,
 588, 704, 421, 651, 705, 706, 891, 891, 891, 707, 659, 708, 656, 709, 891, 710,
 891, 583, 713, 712, 714, 715, 660, 716, 891, 711, 891, 717, 891, 718, 719, 891,
 415, 704, 658, 721, 705, 706, 587, 420, 417, 707, 659, 708, 657, 709, 418, 710,
 651, 419, 713, 712, 714, 715, 660, 716, 416, 711, 690, 717, 682, 718, 719, 688,
 415, 722, 691, 721, 723, 724, 725, 420, 417, 687, 726, 683, 686, 685, 418, 689,
 692, 419, 727, 728, 729, 730, 731, 734, 416, 735, 690, 732, 682, 736, 693, 688,
 733, 722, 691, 737, 723, 724, 725, 738, 739, 687, 726, 684, 686, 685, 740, 689,
 692, 741, 727, 728, 729, 730, 731, 734, 742, 735, 743, 732, 745, 736, 746, 747,
 733, 748, 749, 737, 750, 751, 752, 738, 739, 744, 753, 754, 755, 756, 740, 757,
 758, 741, 759, 760, 695, 762, 763, 754, 742, 764, 743, 765, 745, 768, 746, 747,
 891, 748, 749, 761, 750, 751, 752, 769, 770, 744, 753, 754, 755, 756, 771, 757,
 758, 766, 759, 753, 695, 762, 763, 754, 772, 764, 773, 765, 774, 768, 767, 775,
 694, 776, 777, 761, 778, 782, 783, 769, 770, 784, 891, 670, 891, 891, 771, 680,
 891, 766, 750, 781, 785, 891, 788, 789, 772, 790, 773, 690, 774, 682, 767, 775,
 688, 776, 777, 691, 778, 782, 783, 791, 786, 784, 687, 670, 683, 686, 780, 680,
 689, 692, 750, 781, 785, 787, 788, 789, 792, 790, 659, 690, 656, 682, 793, 693,
 688, 794, 795, 691, 796, 797, 660, 791, 786, 798, 687, 799, 684, 686, 780, 800,
 689, 692, 658, 801, 802, 787, 810, 805, 792, 811, 659, 812, 657, 809, 793, 804,
 813, 794, 795, 803, 796, 797, 660, 814, 806, 798, 815, 799, 808, 816, 807, 800,
 817, 891, 891, 801, 802, 828, 810, 805, 829, 811, 891, 812, 830, 809, 831, 804,
 813, 832, 833, 803, 834, 818, 835, 814, 806, 836, 815, 837, 808, 816, 807, 823,
 817, 825, 826, 838, 839, 828, 822, 840, 829, 841, 827, 820, 830, 842, 831, 821,
 824, 832, 833, 843, 834, 818, 835, 844, 845, 836, 847, 837, 846, 848, 849, 823,
 850, 825, 826, 838, 839, 851, 822, 840, 852, 841, 827, 820, 853, 842, 854, 821,
 824, 855, 856, 843, 857, 858, 859, 844, 845, 860, 847, 861, 846, 848, 849, 862,
 850, 863, 864, 865, 866, 851, 867, 868, 852, 869, 870, 875, 853, 873, 854, 876,
 877, 855, 856, 872, 857, 858, 859, 878, 871, 860, 879, 861, 880, 881, 882, 862,
 883, 863, 864, 865, 866, 884, 867, 868, 891, 869, 870, 875, 891, 873, 891, 876,
 877, 891, 891, 872, 891, 891, 891, 878, 871, 891, 879, 891, 880, 881, 882, 891,
 883, 891, 891, 891, 891, 884, 0
};

static yy_state_t yy_check[] = {
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 54, 54, 64, 54, 58, 91, 89, 94, 89, 54, 82, 52, 75, 96, 96, 54,
 54, 54, 54, 54, 54, 54, 54, 54, 54, 75, 98, 100, 103, 50, 40, 108,
 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 97, 97, 121, 38, 54, 108,
 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 63, 63, 63, 63, 63, 63,
 63, 63, 63, 63, 37, 109, 110, 111, 112, 97, 107, 63, 63, 63, 63, 63,
 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
 63, 63, 63, 63, 63, 109, 110, 111, 112, 35, 107, 63, 63, 63, 63, 63,
 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
 63, 63, 63, 63, 63, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 32,
 116, 117, 118, 119, 36, 36, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
 116, 117, 118, 119, 62, 130, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
 66, 69, 69, 160, 69, 83, 83, 83, 83, 83, 83, 83, 83, 66, 69, 66,
 66, 66, 66, 66, 66, 66, 66, 66, 66, 227, 29, 129, 135, 136, 224, 137,
 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 29, 129, 135, 136, 66, 137,
 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 67, 59, 67, 59, 228, 51,
 222, 221, 230, 221, 59, 268, 291, 59, 67, 67, 67, 67, 67, 67, 67, 67,
 67, 67, 51, 138, 141, 142, 140, 278, 144, 67, 67, 67, 67, 67, 67, 67,
 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
 67, 67, 67, 138, 141, 142, 140, 67, 144, 67, 67, 67, 67, 67, 67, 67,
 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
 67, 67, 67, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 322, 145, 133,
 147, 148, 329, 151, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 145, 133,
 147, 148, 71, 151, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 73, 68,
 68, 270, 68, 270, 223, 336, 342, 352, 378, 432, 454, 73, 68, 73, 73, 73,
 73, 73, 73, 73, 73, 73, 73, 223, 152, 150, 154, 28, 486, 156, 73, 73,
 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
 73, 73, 73, 73, 73, 73, 73, 73, 152, 150, 154, 28, 73, 156, 73, 73,
 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
 73, 73, 73, 73, 73, 73, 73, 73, 70, 70, 70, 70, 70, 70, 70, 70,
 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
 70, 70, 70, 70, 70, 70, 70, 70, 61, 61, 61, 61, 61, 61, 61, 61,
 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
 61, 61, 61, 61, 61, 61, 61, 61, 60, 81, 80, 480, 80, 474, 526, 520,
 514, 508, 422, 572, 81, 60, 80, 60, 60, 60, 60, 60, 60, 60, 60, 60,
 60, 587, 157, 27, 159, 593, 597, 169, 60, 60, 60, 60, 60, 60, 60, 60,
 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
 60, 60, 157, 27, 159, 81, 60, 169, 60, 60, 60, 60, 60, 60, 60, 60,
 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
 60, 60, 79, 634, 79, 53, 633, 667, 679, 719, 778, 818, 873, 2, 79, 272,
 53, 885, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 84, 84, 84, 84,
 84, 84, 84, 84, 84, 84, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 86, 85, 170, 88, 226, 88,
 272, 53, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 93, 93, 93, 93,
 93, 93, 93, 93, 86, 85, 886, 47, 171, 172, 86, 85, 170, 173, 47, 90,
 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 325, 287, 283, 1, 888, 889,
 ~0U, 101, 101, 101, 101, 101, 101, 47, 171, 172, 226, 93, 306, 173, 47, 168,
 175, 176, 134, 177, 178, 167, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
 134, 101, 101, 101, 101, 101, 101, 102, 102, 102, 102, 102, 102, 287, 283, 168,
 175, 176, 134, 177, 178, 167, 325, 180, 181, 166, 183, 184, 185, 186, 306, 590,
 134, ~0U, ~0U, ~0U, ~0U, 102, 302, 102, 102, 102, 102, 102, 102, 49, 49, 49,
 49, 49, 49, 49, 49, 49, 49, 180, 181, 166, 183, 184, 185, 186, 49, 49,
 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
 49, 49, 49, 49, 49, 49, 49, 49, 302, ~0U, ~0U, 590, 49, ~0U, 49, 49,
 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
 49, 49, 49, 49, 49, 49, 49, 49, 113, 113, 113, 113, 113, 113, 113, 113,
 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
 113, 113, 113, 113, 113, 113, 113, 113, 131, 132, 131, 165, 188, 189, 190, 191,
 164, 193, 131, 132, 161, 194, 161, 195, 161, 196, 161, 197, 161, 131, 198, 163,
 200, 161, 161, 201, 202, 203, 162, 161, 131, 132, 131, 165, 188, 189, 190, 191,
 164, 193, 131, 132, 161, 194, 161, 195, 161, 196, 161, 197, 161, 131, 198, 163,
 200, 161, 161, 201, 202, 203, 162, 161, 205, 207, 209, 210, 208, 212, 206, 214,
 26, 217, 218, 207, ~0U, 216, 220, 205, 220, 229, 26, 220, 220, 220, 220, 220,
 220, 220, 220, 220, 220, ~0U, 314, ~0U, 205, 207, 209, 210, 208, 212, 206, 214,
 26, 217, 218, 207, 219, 216, ~0U, ~0U, ~0U, 229, 26, ~0U, ~0U, ~0U, ~0U, ~0U,
 ~0U, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 314, 233, 234, 235, 236,
 ~0U, 232, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 233, 234, 235, 236,
 219, 232, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 225, 238, 239, 693,
 245, 318, 246, 247, 244, 231, ~0U, 249, 250, 225, 225, 225, 225, 225, 225, 225,
 225, 225, 225, 231, 243, 252, 253, 25, 310, 242, 255, 241, 25, 238, 239, 25,
 245, 25, 246, 247, 244, 231, 25, 249, 250, 257, 258, 262, 693, 263, 264, 261,
 266, 267, 318, 231, 243, 252, 253, 25, 225, 242, 255, 241, 25, 310, 24, 25,
 260, 25, 274, 279, 293, 294, 25, 24, 298, 257, 258, 262, 24, 263, 264, 261,
 266, 267, 271, ~0U, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 24, 23,
 260, 277, 274, 279, 293, 294, 324, 24, 269, 326, 269, ~0U, 24, 269, 269, 269,
 269, 269, 269, 269, 269, 269, 269, 327, 328, 330, 298, 333, 334, 23, 335, 332,
 337, 277, 338, 271, 331, 23, 324, 340, 341, 326, 276, 23, 343, 348, 330, 349,
 23, 350, 351, 23, ~0U, ~0U, ~0U, 327, 328, 330, 579, 333, 334, 23, 335, 332,
 337, ~0U, 338, ~0U, 331, 23, 583, 340, 341, ~0U, 276, 23, 343, 348, ~0U, 349,
 23, 350, 351, 23, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 282, 579,
 ~0U, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 285, 285, 285, 285, 285,
 285, 285, 285, 285, 285, 286, ~0U, 583, 286, 286, 286, 286, 286, 286, 286, 286,
 286, 286, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, ~0U, ~0U, ~0U, ~0U,
 282, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 296, 296, 296, 296, 296,
 296, 296, 296, 296, 296, 297, ~0U, 286, 297, 297, 297, 297, 297, 297, 297, 297,
 297, 297, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, ~0U, ~0U, 301, ~0U,
 290, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 304, 304, 304, 304, 304,
 304, 304, 304, 304, 304, 305, ~0U, 297, 305, 305, 305, 305, 305, 305, 305, 305,
 305, 305, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, ~0U, ~0U, ~0U, ~0U,
 301, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 312, 312, 312, 312,
 312, 312, 312, 312, 312, 312, ~0U, 305, 313, 313, 313, 313, 313, 313, 313, 313,
 313, 313, 313, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, ~0U, ~0U, 317,
 309, 317, 317, 317, 317, 317, 317, 317, 317, 317, 317, 320, 320, 320, 320, 320,
 320, 320, 320, 320, 320, 22, 353, 313, 321, 321, 321, 321, 321, 321, 321, 321,
 321, 321, 21, 345, 354, 355, ~0U, ~0U, 356, ~0U, 21, 362, ~0U, 363, 345, ~0U,
 317, 364, ~0U, 22, 361, 360, 353, 367, 359, 369, 370, 22, ~0U, 371, 20, 358,
 373, 22, 21, 345, 354, 355, 22, 321, 356, 22, 21, 362, 20, 363, 345, 20,
 374, 364, 20, 22, 361, 360, 375, 367, 359, 369, 370, 22, 20, 371, 20, 358,
 373, 22, 376, 377, 379, 380, 22, 381, 382, 22, 383, 19, 20, 385, 386, 20,
 374, 387, 20, 388, 389, 393, 375, ~0U, 394, 395, 396, 397, ~0U, 398, 399, 400,
 401, 402, 376, 377, 379, 380, 392, 381, 382, 404, 383, 19, 18, 385, 386, 407,
 410, 387, 411, 388, 389, 393, 391, 18, 394, 395, 396, 397, 18, 398, 399, 400,
 401, 402, 406, 391, 409, 413, 392, 438, ~0U, 404, 17, 437, 18, 444, 406, 407,
 410, 460, 411, 434, 459, 446, 391, 18, 466, ~0U, ~0U, 456, 18, 429, 492, 444,
 488, 446, 406, 391, 409, 413, 491, 438, 17, 498, 466, 437, ~0U, 444, 406, 17,
 17, 460, 434, 505, 459, 446, 17, 532, 466, 17, 456, 498, 531, 429, 492, 488,
 17, ~0U, ~0U, ~0U, 434, 505, 491, ~0U, 17, 498, ~0U, ~0U, 456, ~0U, ~0U, 17,
 17, 488, 434, 505, ~0U, ~0U, 17, 532, ~0U, 17, 456, ~0U, 531, ~0U, 421, 488,
 17, 421, 421, 421, 421, 421, 421, 421, 421, 421, 421, 423, 476, 423, 423, 423,
 423, 423, 423, 423, 423, 423, 423, 431, 431, 431, 431, 431, 431, 431, 431, 431,
 431, 423, 558, 557, 420, 423, ~0U, 549, 560, 538, 423, 476, ~0U, 528, ~0U, 433,
 423, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 538, 423, 476, 549, ~0U,
 ~0U, 423, 558, 557, 420, 423, 431, 549, 560, 538, 423, 476, 528, 545, 433, ~0U,
 423, 436, 436, 436, 436, 436, 436, 436, 436, 436, 436, 419, 563, ~0U, 528, 545,
 433, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 562, 528, 545, 433, 419,
 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, ~0U, 419, 563, 447, 443, 447,
 447, 447, 447, 447, 447, 447, 447, 447, 447, ~0U, ~0U, 562, ~0U, 565, ~0U, 419,
 443, 566, 567, 430, 453, 453, 453, 453, 453, 453, 453, 453, 453, 453, 443, 430,
 516, 455, 447, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 565, 447, 568,
 569, 566, 567, 430, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 570, 516,
 455, ~0U, 447, 453, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 418, 568,
 569, 516, 455, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 575, 570, 516,
 455, 465, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468, ~0U, ~0U, 418, ~0U,
 417, ~0U, ~0U, 465, 469, 469, 469, 469, 469, 469, 469, 469, 469, 469, 589, 591,
 ~0U, 465, 575, 592, ~0U, 468, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450,
 417, 468, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 594, 595, 589, 591,
 510, ~0U, ~0U, 592, 475, 468, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475,
 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 510, 596, 594, 595, 416, ~0U,
 598, 428, 481, 475, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, ~0U, ~0U,
 ~0U, 510, ~0U, ~0U, ~0U, 475, ~0U, ~0U, ~0U, ~0U, 510, 596, ~0U, ~0U, 416, 479,
 598, 415, 600, 475, 605, 606, 607, 481, 485, 485, 485, 485, 485, 485, 485, 485,
 485, 485, 487, 481, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, ~0U, ~0U,
 ~0U, 415, 600, ~0U, 605, 606, 607, 481, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, 604, 609,
 603, 487, ~0U, ~0U, ~0U, ~0U, ~0U, 485, 490, 490, 490, 490, 490, 490, 490, 490,
 490, 490, ~0U, 487, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 604, 609,
 603, 487, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, ~0U, ~0U, 611, 612,
 613, 497, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, ~0U, ~0U, ~0U, ~0U,
 614, ~0U, ~0U, 497, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 611, 612,
 613, 497, 602, 616, 14, 500, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482,
 614, 500, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 619, 620, 14, 621,
 622, 628, 602, 616, 14, 500, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504,
 427, 427, 427, 427, 427, 427, 427, 427, 427, 427, ~0U, 629, 619, 620, 626, 621,
 622, 628, 509, 504, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 627, 15,
 15, 631, 626, ~0U, 637, 504, 15, 638, 639, 640, 15, 629, 509, ~0U, 626, 427,
 ~0U, ~0U, ~0U, 504, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 627, 15,
 15, 631, 626, 509, 637, 636, 15, 638, 639, 640, 15, 515, 509, 515, 515, 515,
 515, 515, 515, 515, 515, 515, 515, 519, 519, 519, 519, 519, 519, 519, 519, 519,
 519, 642, 643, 513, 624, 636, ~0U, 645, 646, 521, 515, 521, 521, 521, 521, 521,
 521, 521, 521, 521, 521, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, 515, ~0U, ~0U, ~0U,
 ~0U, 642, 643, ~0U, 624, 625, 519, 645, 646, 647, 515, 648, 13, 625, 521, 525,
 525, 525, 525, 525, 525, 525, 525, 525, 525, 527, 521, 527, 527, 527, 527, 527,
 527, 527, 527, 527, 527, 625, 13, ~0U, ~0U, 647, ~0U, 648, 13, 625, 521, ~0U,
 ~0U, ~0U, ~0U, ~0U, ~0U, 651, 652, 653, 527, 13, ~0U, ~0U, ~0U, ~0U, 525, 530,
 530, 530, 530, 530, 530, 530, 530, 530, 530, ~0U, 527, 537, 537, 537, 537, 537,
 537, 537, 537, 537, 537, 651, 652, 653, 527, 524, 524, 524, 524, 524, 524, 524,
 524, 524, 524, ~0U, ~0U, 654, 660, 661, 537, 540, 540, 540, 540, 540, 540, 540,
 540, 540, 540, ~0U, ~0U, ~0U, ~0U, 618, ~0U, ~0U, 537, 541, 541, 541, 541, 541,
 541, 541, 541, 541, 541, 654, 660, 661, 537, 618, 618, 659, 540, 522, 522, 522,
 522, 522, 522, 522, 522, 522, 522, 618, 540, 518, 518, 518, 518, 518, 518, 518,
 518, 518, 518, 663, 664, 658, ~0U, 663, 668, 618, 618, 659, 540, 544, 544, 544,
 544, 544, 544, 544, 544, 544, 544, 512, 512, 512, 512, 512, 512, 512, 512, 512,
 512, 635, 669, 663, 664, 658, 650, 663, 668, 635, 544, 548, 548, 548, 548, 548,
 548, 548, 548, 548, 548, 650, 670, 671, 650, 650, ~0U, 672, 544, 673, 674, 675,
 676, 635, 669, 548, ~0U, ~0U, 650, ~0U, ~0U, 635, 544, 426, 426, 426, 426, 426,
 426, 426, 426, 426, 426, 650, 670, 671, 650, 650, 548, 672, ~0U, 673, 674, 675,
 676, ~0U, 677, 548, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 553, 553,
 553, 553, 553, 553, 553, 553, 553, 553, 552, 657, 694, 695, 552, 696, 697, 692,
 699, 552, 677, 700, 657, 701, 691, 552, 424, 424, 424, 424, 424, 424, 424, 424,
 424, 424, ~0U, 552, ~0U, ~0U, ~0U, ~0U, 552, 657, 694, 695, 552, 696, 697, 692,
 699, 552, ~0U, 700, 657, 701, 691, 552, 573, 573, 573, 573, 573, 573, 573, 573,
 573, 573, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 577, 577, 577,
 577, 577, 577, 577, 577, 577, 577, 578, 578, 578, 578, 578, 578, 578, 578, 578,
 578, 578, 581, 581, 581, 581, 581, 581, 581, 581, 581, 581, ~0U, ~0U, ~0U, ~0U,
 582, 574, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 585, 585, 585, 585,
 585, 585, 585, 585, 585, 585, 578, 586, 586, 586, 586, 586, 586, 586, 586, 586,
 586, 690, 16, 12, 704, 705, ~0U, ~0U, ~0U, 706, 12, 707, 12, 689, ~0U, 709,
 ~0U, 582, 712, 688, 711, 714, 12, 715, ~0U, 688, ~0U, 716, ~0U, 717, 718, ~0U,
 16, 690, 12, 720, 704, 705, 586, 16, 16, 706, 12, 707, 12, 689, 16, 709,
 12, 16, 712, 688, 711, 714, 12, 715, 16, 688, 681, 716, 681, 717, 718, 681,
 16, 721, 681, 720, 722, 723, 724, 16, 16, 681, 687, 681, 681, 681, 16, 681,
 681, 16, 726, 727, 728, 729, 730, 733, 16, 734, 681, 686, 681, 735, 681, 681,
 686, 721, 681, 736, 722, 723, 724, 737, 738, 681, 687, 681, 681, 681, 739, 681,
 681, 740, 726, 727, 728, 729, 730, 733, 741, 734, 742, 686, 732, 735, 745, 744,
 686, 747, 748, 736, 685, 750, 751, 737, 738, 732, 684, 753, 754, 755, 739, 756,
 757, 740, 758, 683, 760, 682, 762, 760, 741, 763, 742, 761, 732, 767, 745, 744,
 ~0U, 747, 748, 682, 685, 750, 751, 766, 769, 732, 684, 753, 754, 755, 770, 756,
 757, 765, 758, 683, 760, 682, 762, 760, 771, 763, 772, 761, 773, 767, 765, 774,
 683, 775, 776, 682, 656, 10, 782, 766, 769, 783, ~0U, 780, ~0U, ~0U, 770, 656,
 ~0U, 765, 780, 10, 781, ~0U, 787, 788, 771, 789, 772, 779, 773, 779, 765, 774,
 779, 775, 776, 779, 656, 10, 782, 790, 785, 783, 779, 780, 779, 779, 779, 656,
 779, 779, 780, 10, 781, 785, 787, 788, 786, 789, 11, 779, 11, 779, 792, 779,
 779, 793, 794, 779, 795, 796, 11, 790, 785, 797, 779, 798, 779, 779, 779, 799,
 779, 779, 11, 9, 801, 785, 809, 8, 786, 810, 11, 811, 11, 7, 792, 8,
 812, 793, 794, 8, 795, 796, 11, 808, 7, 797, 814, 798, 7, 815, 7, 799,
 806, ~0U, ~0U, 9, 801, 827, 809, 8, 828, 810, ~0U, 811, 829, 7, 830, 8,
 812, 831, 832, 8, 833, 806, 834, 808, 7, 826, 814, 836, 7, 815, 7, 819,
 806, 819, 819, 837, 838, 827, 819, 839, 828, 840, 819, 819, 829, 841, 830, 819,
 819, 831, 832, 842, 833, 806, 834, 843, 825, 826, 846, 836, 825, 847, 848, 819,
 849, 819, 819, 837, 838, 850, 819, 839, 845, 840, 819, 819, 852, 841, 824, 819,
 819, 854, 855, 842, 856, 857, 823, 843, 825, 859, 846, 822, 825, 847, 848, 861,
 849, 821, 863, 864, 820, 850, 866, 6, 845, 868, 3, 874, 852, 871, 824, 875,
 876, 854, 855, 871, 856, 857, 823, 877, 3, 859, 878, 822, 879, 870, 881, 861,
 882, 821, 863, 864, 820, 883, 866, 6, ~0U, 868, 3, 874, ~0U, 871, ~0U, 875,
 876, ~0U, ~0U, 871, ~0U, ~0U, ~0U, 877, 3, ~0U, 878, ~0U, 879, 870, 881, ~0U,
 882, ~0U, ~0U, ~0U, ~0U, 883, 0
};

static yy_state_t yy_default[] = {
 891, 891, 891, 49, 891, 891, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
 219, 219, 49, 49, 49, 49, 219, 219, 49, 49, 49, 49, 49, 49, 891, 891,
 891, 891, 891, 891, 891, 891, 891, 891, 891, 891, 891, 891, 891, 891, 891, 891,
 49, 891, 53, 53, 53, 891, 891, 891, 891, 891, 54, 60, 891, 891, 891, 891,
 63, 66, 891, 891, 67, 67, 891, 891, 73, 891, 70, 891, 61, 75, 60, 60,
 60, 53, 53, 891, 891, 891, 85, 85, 891, 88, 891, 90, 90, 891, 93, 93,
 891, 891, 97, 97, 53, 891, 891, 102, 102, 49, 49, 891, 891, 891, 891, 891,
 891, 891, 113, 891, 891, 891, 891, 891, 891, 891, 891, 891, 891, 891, 891, 891,
 891, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 891, 891, 220, 225, 225,
 225, 891, 225, 225, 225, 49, 219, 220, 891, 891, 891, 891, 891, 891, 891, 891,
 891, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 219, 49, 49, 219, 49,
 219, 49, 49, 219, 49, 49, 49, 49, 49, 219, 49, 49, 219, 891, 269, 891,
 271, 271, 49, 219, 49, 49, 219, 49, 49, 891, 891, 282, 282, 891, 891, 286,
 286, 891, 891, 290, 290, 49, 49, 219, 891, 891, 297, 297, 891, 891, 301, 301,
 891, 891, 305, 305, 891, 891, 309, 309, 891, 891, 313, 313, 891, 891, 317, 317,
 891, 891, 321, 321, 49, 219, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
 219, 49, 49, 49, 49, 49, 219, 49, 219, 49, 49, 219, 49, 49, 49, 49,
 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
 49, 49, 49, 49, 49, 219, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
 49, 49, 49, 49, 49, 891, 421, 891, 891, 423, 891, 891, 891, 430, 891, 891,
 431, 891, 433, 433, 891, 891, 891, 891, 891, 891, 891, 891, 443, 443, 430, 891,
 891, 891, 891, 447, 891, 891, 453, 891, 455, 455, 891, 891, 891, 891, 891, 891,
 891, 891, 465, 465, 891, 891, 468, 891, 891, 891, 428, 891, 475, 475, 891, 891,
 479, 891, 891, 481, 891, 891, 485, 891, 487, 487, 891, 891, 891, 891, 891, 891,
 891, 891, 497, 497, 891, 891, 500, 891, 891, 504, 504, 891, 427, 891, 509, 509,
 891, 891, 513, 891, 515, 515, 891, 891, 519, 891, 891, 521, 891, 891, 525, 891,
 527, 527, 891, 891, 891, 891, 891, 891, 891, 891, 537, 537, 891, 891, 540, 891,
 891, 544, 544, 891, 891, 548, 548, 891, 891, 891, 552, 891, 891, 891, 891, 891,
 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 219, 891, 891, 574,
 574, 891, 891, 578, 578, 891, 891, 582, 582, 891, 891, 586, 586, 49, 219, 49,
 49, 49, 49, 49, 49, 219, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
 49, 49, 219, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
 49, 49, 49, 49, 49, 49, 49, 49, 49, 219, 49, 49, 49, 49, 49, 49,
 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
 49, 49, 49, 49, 49, 891, 891, 891, 891, 891, 891, 0
};

static int yy_base[] = {
 0, 1456, 1411, 4217, 4342, 4342, 4200, 4090, 4081, 4068, 4004, 4046, 3806, 3399, 3215, 3287,
 3839, 2679, 2611, 2569, 2541, 2508, 2530, 2220, 2149, 2115, 1953, 1314, 700, 436, 4342, 4342,
 389, 4342, 4342, 331, 375, 295, 256, 4342, 240, 4342, 4342, 4342, 4342, 4342, 4342, 1454,
 4342, 1581, 250, 556, 232, 1410, 223, 4342, 4342, 4342, 214, 553, 1319, 1096, 373, 298,
 225, 4342, 463, 552, 718, 464, 840, 627, 4342, 717, 4342, 235, 4342, 4342, 4342, 1408,
 1320, 1318, 231, 453, 1420, 1430, 1429, 4342, 1458, 219, 1440, 166, 4342, 1468, 168, 4342,
 221, 266, 187, 4342, 248, 1488, 1526, 189, 4342, 4342, 4342, 285, 205, 292, 287, 282,
 295, 1704, 4342, 4342, 352, 354, 352, 351, 4342, 270, 4342, 4342, 4342, 4342, 4342, 4342,
 4342, 439, 374, 1894, 1882, 608, 1497, 442, 456, 462, 535, 4342, 535, 534, 529, 4342,
 534, 618, 4342, 606, 621, 4342, 698, 607, 707, 4342, 702, 4342, 697, 1299, 4342, 1298,
 404, 1907, 1912, 1898, 1880, 1896, 1533, 1504, 1488, 1318, 1416, 1455, 1443, 1464, 4342, 1490,
 1499, 1498, 1501, 4342, 1530, 1528, 4342, 1531, 1545, 1547, 1537, 4342, 1897, 1896, 1883, 1884,
 4342, 1885, 1904, 1893, 1899, 1914, 1906, 4342, 1900, 1907, 1903, 1905, 4342, 1944, 1945, 1956,
 1943, 1938, 1943, 4342, 1945, 4342, 1947, 4342, 1958, 1949, 1965, 2033, 1995, 550, 557, 721,
 491, 2121, 1467, 486, 555, 1965, 559, 2095, 2015, 2027, 2017, 2011, 2026, 4342, 2072, 2089,
 4342, 2114, 2107, 2107, 2091, 2076, 2089, 2087, 4342, 2089, 2084, 4342, 2103, 2098, 4342, 2102,
 4342, 2123, 2118, 4342, 2146, 2138, 2124, 2123, 2138, 4342, 2143, 2133, 562, 2221, 710, 2196,
 1409, 4342, 2142, 4342, 2220, 2173, 580, 2148, 4342, 2292, 2305, 1503, 4342, 2315, 2328, 1502,
 4342, 2338, 2353, 503, 4342, 2146, 2161, 4342, 2363, 2376, 2187, 4342, 2386, 2401, 1577, 4342,
 2411, 2424, 1519, 4342, 2434, 2449, 2126, 4342, 2460, 2472, 1996, 4342, 2483, 2497, 2115, 4342,
 2507, 2520, 590, 4342, 2193, 1511, 2200, 2201, 2212, 595, 2197, 2219, 2214, 2210, 2207, 2217,
 722, 2211, 2221, 4342, 2218, 2227, 723, 2216, 4342, 2506, 4342, 4342, 2217, 2230, 2240, 2230,
 664, 2483, 2496, 2512, 2504, 4342, 2529, 2531, 2518, 2514, 2511, 2506, 2524, 4342, 4342, 2522,
 4342, 2533, 2531, 2536, 4342, 2541, 2540, 2557, 2563, 2565, 665, 2578, 2569, 2568, 2581, 2575,
 4342, 2574, 2583, 2575, 2594, 2583, 4342, 2625, 2600, 2583, 2597, 2593, 2584, 2588, 2591, 2597,
 2581, 2603, 2605, 4342, 2597, 4342, 2633, 2607, 4342, 2641, 2610, 2619, 4342, 2625, 4342, 3070,
 3038, 2963, 2938, 2826, 2767, 2753, 1317, 2765, 3704, 4342, 3643, 3280, 3026, 2650, 2864, 2775,
 666, 2801, 2677, 4342, 2833, 2632, 2628, 4342, 4342, 4342, 4342, 2849, 2640, 4342, 2642, 2879,
 4342, 4342, 3014, 4342, 2963, 2900, 667, 2915, 2685, 4342, 2932, 2641, 2638, 4342, 4342, 4342,
 4342, 2948, 2651, 4342, 2978, 2996, 4342, 4342, 4342, 4342, 1262, 3046, 2766, 4342, 3250, 3056,
 1260, 3076, 3238, 4342, 3186, 3112, 685, 3124, 2690, 4342, 3160, 2659, 2651, 4342, 4342, 4342,
 4342, 3172, 2668, 4342, 3202, 3220, 4342, 4342, 3270, 2678, 4342, 4342, 1266, 3300, 3042, 4342,
 3591, 3332, 1265, 3357, 2914, 4342, 3561, 3367, 1264, 3387, 3549, 4342, 3497, 3423, 1263, 3435,
 2799, 4342, 3471, 2681, 2676, 4342, 4342, 4342, 4342, 3483, 2764, 4342, 3513, 3531, 4342, 4342,
 3581, 2800, 4342, 4342, 3611, 2767, 4342, 4342, 3668, 3678, 4342, 4342, 4342, 2752, 2751, 4342,
 2762, 4342, 2829, 2823, 4342, 2858, 2872, 2862, 2902, 2897, 2912, 4342, 1328, 3736, 3746, 2963,
 4342, 3757, 3767, 2256, 4342, 3778, 3794, 2280, 4342, 3804, 3815, 1282, 4342, 2985, 1580, 2976,
 2989, 1286, 3016, 3020, 3026, 1347, 3051, 4342, 3079, 4342, 3198, 3116, 3116, 3083, 3081, 3089,
 4342, 3131, 4342, 3164, 3174, 3170, 3193, 4342, 3211, 4342, 3510, 3239, 3241, 3240, 3243, 4342,
 3349, 3393, 3277, 3285, 3231, 3261, 4342, 3283, 4342, 1411, 1348, 3570, 3319, 3282, 3294, 3284,
 3300, 4342, 3349, 3337, 4342, 3346, 3350, 3398, 3398, 4342, 3589, 3429, 3441, 3446, 3473, 4342,
 4000, 3669, 3553, 3512, 3485, 3475, 4342, 3550, 3550, 4342, 4342, 1352, 3540, 3568, 3605, 3593,
 3592, 3604, 3594, 3606, 3601, 3636, 4342, 1353, 4342, 3865, 3956, 3950, 3941, 3915, 3879, 3864,
 3812, 3820, 3806, 3680, 3671, 2090, 3658, 3670, 3676, 3658, 4342, 3671, 3671, 3680, 4342, 4342,
 3792, 3804, 3802, 3805, 4342, 3805, 4342, 3814, 3808, 4342, 3826, 3811, 3826, 3822, 3824, 1354,
 3841, 3861, 3861, 3874, 3867, 4342, 3875, 3884, 3874, 3892, 3881, 4342, 3927, 3881, 3894, 3893,
 3889, 3896, 3898, 3909, 3895, 3923, 3926, 4342, 3914, 3918, 4342, 3934, 3918, 4342, 3925, 3937,
 4342, 3928, 3933, 3928, 3933, 3949, 3949, 4342, 3940, 3949, 3939, 3956, 4342, 3979, 3966, 3945,
 4342, 3969, 3961, 3974, 3993, 3976, 3990, 3986, 3988, 4342, 1355, 4026, 3993, 4006, 3987, 4004,
 4342, 4034, 4047, 4002, 4022, 4011, 4019, 4342, 4055, 4044, 4048, 4067, 4049, 4064, 4060, 4065,
 4342, 4066, 4342, 4342, 4342, 4342, 4108, 4342, 4085, 4066, 4080, 4076, 4082, 4342, 4105, 4084,
 4342, 4342, 1356, 4141, 4191, 4204, 4189, 4189, 4170, 4167, 4125, 4116, 4113, 4110, 4117, 4109,
 4109, 4128, 4129, 4342, 4134, 4134, 4143, 4137, 4133, 4156, 4145, 4142, 4342, 4164, 4152, 4164,
 4152, 4171, 4177, 4342, 4183, 4342, 4175, 4185, 4182, 4190, 4342, 4181, 4342, 4187, 4342, 4209,
 4199, 4342, 4201, 4342, 4213, 4342, 4217, 4207, 4342, 1357, 4201, 4218, 4204, 4230, 4225, 4222,
 4342, 4229, 4218, 4240, 4342, 1366, 1435, 4342, 1508, 1510, 4342, 4342
};



// MKS LEX prototype scanner code
// Copyright 1991 by Mortice Kern Systems Inc.
// All rights reserved.

// You can redefine YY_INTERACTIVE to be 0 to get a very slightly
// faster scanner:
#ifndef YY_INTERACTIVE
#define	YY_INTERACTIVE	1
#endif

// You can compile with -DYY_DEBUG to get a print trace of the scanner
#ifdef YY_DEBUG
#undef YY_DEBUG
#define YY_DEBUG(fmt,a1,a2)	fprintf(stderr,fmt,a1,a2)
#else
#define YY_DEBUG(fmt,a1,a2)
#endif

const MIN_NUM_STATES = 20;

// Do *NOT* redefine the following:
#define	BEGIN		yy_start =
#define	REJECT		goto yy_reject
#define	yymore()	goto yy_more



// disable warning C4786: symbol greater than 255 character,
// okay to ignore
#pragma warning(disable: 4786)

#include <cstdlib>
#include <iostream>

using namespace std;

#include "Grammar.h"

#define exit throw_fatal_error

static int inside_system_comment = 0;

void throw_fatal_error(int i);
void setlexval(yy_scan* scanner);
/* void setstringlexval(yy_scan* scanner);*/
void setlexval_without_newline(yy_scan* scanner);
void setlexval(const string& text, StringPos end, yy_scan* scanner);
void st_comment(yy_scan*);
void native_block(yy_scan*);
void consume_until(yy_scan*, const string& s, char* errMsg);
void consume_comment(yy_scan* scanner);
void set_variable_comment_lexval(yy_scan* scanner);
void string_literal(yy_scan*, int delim);



// Constructor for yy_scan. Set up tables
#pragma argsused
yy_scan::yy_scan(int sz, char* buf, char* sv, yy_state_t* states)
{
	mustfree = 0;
	if ((size = sz) < MIN_NUM_STATES
	  || (yytext = buf) == 0
	  || (state = states) == 0) {
		yyerror("Bad space for scanner!");
		exit(1);
	}
#ifdef YY_PRESERVE
	save = sv;
#endif
}
// Constructor for yy_scan. Set up tables
yy_scan::yy_scan(int sz)
{
    //=== INSERTED
    AFX_MANAGE_STATE(AfxGetStaticModuleState( ));
    //=== END OF INSERTED

	size = sz;
	yytext = new char[sz+1];	// text buffer
	state = new yy_state_t[sz+1];	// state buffer
#ifdef YY_PRESERVE
	save = new char[sz];	// saved yytext[]
	push = save + sz;
#endif
	if (yytext == NULL
#ifdef YY_PRESERVE
	  || save == NULL
#endif
	  || state == NULL) {
		yyerror("No space for scanner!");
		exit(1);
	}
	mustfree = 1;
	yy_end = 0;
	yy_start = 0;
	yy_lastc = YYNEWLINE;
	yyin = stdin;
	yyout = stdout;
	yylineno = 1;
	yypos = 0;
	yyleng = 0;
}

// Descructor for yy_scan
yy_scan::~yy_scan()
{
    //=== INSERTED
    AFX_MANAGE_STATE(AfxGetStaticModuleState( ));
    //=== END OF INSERTED

	if (mustfree) {
		mustfree = 0;
		delete(yytext);
		delete(state);
#ifdef YY_PRESERVE
		delete(save);
#endif
	}
}

// Print error message, showing current line number
void
yy_scan::yyerror(char *fmt, ...)
{
	va_list va;

	va_start(va, fmt);
#ifdef LEX_WINDOWS
	// Windows has no concept of a standard error output!
	// send output to yyout as a simple solution
	if (yylineno)
		fprintf(yyout, "%d: ", yylineno);
	(void) vfprintf(yyout, fmt, va);
	fputc('\n', yyout);
#else /* LEX_WINDOWS */
	if (yylineno)
		fprintf(stderr, "%d: ", yylineno);
	(void) vfprintf(stderr, fmt, va);
	fputc('\n', stderr);
#endif /* LEX_WINDOWS */
	va_end(va);
}


#ifdef LEX_WINDOWS

// The initial portion of the lex scanner
// In an windows environment, it will load the desired
// resources, obtain pointers to them, and then call
// the protected member win_yylex() to acutally begin the
// scanning. When complete, win_yylex() will return a
// value back to our new yylex() function, which will
// record that value temporarily, release the resources
// from global memory, and finally return the value
// back to the caller of yylex().

int
yy_scan::yylex()
{
	int wReturnValue;
	HANDLE hRes_table;
	unsigned short far *old_yy_la_act;	// remember old pointer values
	short far *old_yy_final;
	yy_state_t far *old_yy_begin;
	yy_state_t far *old_yy_next;
	yy_state_t far *old_yy_check;
	yy_state_t far *old_yy_default;
	short far *old_yy_base;

	// the following code will load the required
	// resources for a Windows based parser.

	hRes_table = LoadResource (hInst,
		FindResource (hInst, "UD_RES_yyLEX", "yyLEXTBL"));

	// return an error code if any
	// of the resources did not load

	if (hRes_table == (HANDLE)NULL)
		return (0);

	// the following code will lock the resources
	// into fixed memory locations for the scanner
	// (remember previous pointer locations)

	old_yy_la_act = yy_la_act;
	old_yy_final = yy_final;
	old_yy_begin = yy_begin;
	old_yy_next = yy_next;
	old_yy_check = yy_check;
	old_yy_default = yy_default;
	old_yy_base = yy_base;

	yy_la_act = (unsigned short far *)LockResource (hRes_table);
	yy_final = (short far *)(yy_la_act + Sizeof_yy_la_act);
	yy_begin = (yy_state_t far *)(yy_final + Sizeof_yy_final);
	yy_next = (yy_state_t far *)(yy_begin + Sizeof_yy_begin);
	yy_check = (yy_state_t far *)(yy_next + Sizeof_yy_next);
	yy_default = (yy_state_t far *)(yy_check + Sizeof_yy_check);
	yy_base = (short far *)(yy_default + Sizeof_yy_default);


	// call the standard yylex() code

	wReturnValue = win_yylex();

	// unlock the resources

	UnlockResource (hRes_table);

	// and now free the resource

	FreeResource (hRes_table);

	//
	// restore previously saved pointers
	//

	yy_la_act = old_yy_la_act;
	yy_final = old_yy_final;
	yy_begin = old_yy_begin;
	yy_next = old_yy_next;
	yy_check = old_yy_check;
	yy_default = old_yy_default;
	yy_base = old_yy_base;

	return (wReturnValue);
}	// end yylex()

// The actual lex scanner
// yy_sbuf[0:yyleng-1] contains the states corresponding to yytext.
// yytext[0:yyleng-1] contains the current token.
// yytext[yyleng:yy_end-1] contains pushed-back characters.
// When the user action routine is active,
// save contains yytext[yyleng], which is set to '\0'.
// Things are different when YY_PRESERVE is defined.

int
yy_scan::win_yylex()

#else /* LEX_WINDOWS */

// The actual lex scanner
// yy_sbuf[0:yyleng-1] contains the states corresponding to yytext.
// yytext[0:yyleng-1] contains the current token.
// yytext[yyleng:yy_end-1] contains pushed-back characters.
// When the user action routine is active,
// save contains yytext[yyleng], which is set to '\0'.
// Things are different when YY_PRESERVE is defined.
int
yy_scan::yylex()
#endif /* LEX_WINDOWS */

{
	int c, i, yybase;
	unsigned  yyst;		/* state */
	int yyfmin, yyfmax;	/* yy_la_act indices of final states */
	int yyoldi, yyoleng;	/* base i, yyleng before look-ahead */
	int yyeof;		/* 1 if eof has already been read */



#ifdef YYEXIT
	yyLexFatal = 0;
#endif
	yyeof = 0;
	i = yyleng;
	YY_SCANNER();

  yy_again:
	if ((yyleng = i) > 0) {
		yy_lastc = yytext[i-1];	// determine previous char
		while (i > 0)	//	// scan previously token
			if (yytext[--i] == YYNEWLINE)	// fix yylineno
				yylineno++;
	}
	yy_end -= yyleng;		// adjust pushback
	if (yy_end > 0)
		memmove(yytext, yytext+yyleng, (size_t) yy_end);
	i = 0;

  yy_contin:
	yyoldi = i;

	/* run the state machine until it jams */
	yyst = yy_begin[yy_start + ((yy_lastc == YYNEWLINE) ? 1 : 0)];
	state[i] = (yy_state_t) yyst;
	do {
		YY_DEBUG("<state %d, i = %d>\n", yyst, i);
		if (i >= size) {
			YY_FATAL("Token buffer overflow");
#ifdef YYEXIT
			if (yyLexFatal)
				return -2;
#endif
		}	/* endif */

		/* get input char */
		if (i < yy_end)
			c = yytext[i];		/* get pushback char */
		else if (!yyeof && (c = yygetc()) != EOF) {
			yy_end = i+1;
			yytext[i] = c;
		} else /* c == EOF */ {
			c = EOF;		/* just to make sure... */
			if (i == yyoldi) {	/* no token */
				yyeof = 0;
				if (yywrap())
					return 0;
				else
					goto yy_again;
			} else {
				yyeof = 1;	/* don't re-read EOF */
				break;
			}
		}
		YY_DEBUG("<input %d = 0x%02x>\n", c, c);

		/* look up next state */
		while ((yybase = yy_base[yyst]+(unsigned char)c) > yy_nxtmax
		    || yy_check[yybase] != (yy_state_t) yyst) {
			if (yyst == yy_endst)
				goto yy_jammed;
			yyst = yy_default[yyst];
		}
		yyst = yy_next[yybase];
	  yy_jammed: ;
	     state[++i] = (yy_state_t) yyst;
	} while (!(yyst == yy_endst || YY_INTERACTIVE &&
		yy_base[yyst] > yy_nxtmax && yy_default[yyst] == yy_endst));

	YY_DEBUG("<stopped %d, i = %d>\n", yyst, i);
	if (yyst != yy_endst)
		++i;

  yy_search:
	/* search backward for a final state */
	while (--i > yyoldi) {
		yyst = state[i];
		if ((yyfmin = yy_final[yyst]) < (yyfmax = yy_final[yyst+1]))
			goto yy_found;	/* found final state(s) */
	}
	/* no match, default action */
	i = yyoldi + 1;
	output(yytext[yyoldi]);
	goto yy_again;

  yy_found:
	YY_DEBUG("<final state %d, i = %d>\n", yyst, i);
	yyoleng = i;		/* save length for REJECT */

	// pushback look-ahead RHS, handling trailing context
	if ((c = (int)(yy_la_act[yyfmin]>>9) - 1) >= 0) {
		unsigned char *bv = yy_look + c*YY_LA_SIZE;
		static unsigned char bits [8] = {
			1<<0, 1<<1, 1<<2, 1<<3, 1<<4, 1<<5, 1<<6, 1<<7
		};
		while (1) {
			if (--i < yyoldi) {	/* no / */
				i = yyoleng;
				break;
			}
			yyst = state[i];
			if (bv[(unsigned)yyst/8] & bits[(unsigned)yyst%8])
				break;
		}
	}

	/* perform action */
	yyleng = i;
	YY_USER();
	switch (yy_la_act[yyfmin] & 0777) {
	case 0:
	{ inside_system_comment = 0; setlexval(this); return SYSTEM_COMMENT_END; }
	break;
	case 1:
	{ inside_system_comment = 1; setlexval(this); return SYSTEM_COMMENT_BEGIN; }
	break;
	case 2:
	{ set_variable_comment_lexval(this); return VARIABLE_COMMENT; }
	break;
	case 3:
	{ st_comment(this); }
	break;
	case 4:
	{ native_block(this); }
	break;
	case 5:
	{ string_literal(this, '"');  return STRING_LITERAL; }
	break;
	case 6:
	{ string_literal(this, '\''); return STRING_LITERAL; }
	break;
	case 7:
	{ setlexval(this); return                  MOD; }
	break;
	case 8:
	{ setlexval(this); return                  AND; }
	break;
	case 9:
	{ setlexval(this); return                   OR; }
	break;
	case 10:
	{ setlexval(this); return                  XOR; }
	break;
	case 11:
	{ setlexval(this); return                  NOT; }
	break;
	case 12:
	{ setlexval(this); return        CONFIGURATION; }
	break;
	case 13:
	{ setlexval(this); return    END_CONFIGURATION; }
	break;
	case 14:
	{ setlexval(this); return             RESOURCE; }
	break;
	case 15:
	{ setlexval(this); return         END_RESOURCE; }
	break;
	case 16:
	{ setlexval(this); return                   ON; }
	break;
	case 17:
	{ setlexval(this); return                 WITH; }
	break;
	case 18:
	{ setlexval(this); return                 TASK; }
	break;
	case 19:
	{ setlexval(this); return                 TYPE; }
	break;
	case 20:
	{ setlexval(this); return             END_TYPE; }
	break;
	case 21:
	{ setlexval(this); return               STRUCT; }
	break;
	case 22:
	{ setlexval(this); return           END_STRUCT; }
	break;
	case 23:
	{ setlexval(this); return              PROGRAM; }
	break;
	case 24:
	{ setlexval(this); return          END_PROGRAM; }
	break;
	case 25:
	{ setlexval(this); return             FUNCTION; }
	break;
	case 26:
	{ setlexval(this); return         END_FUNCTION; }
	break;
	case 27:
	{ setlexval(this); return       FUNCTION_BLOCK; }
	break;
	case 28:
	{ setlexval(this); return   END_FUNCTION_BLOCK; }
	break;
	case 29:
	{ setlexval(this); return                 SINT; }
	break;
	case 30:
	{ setlexval(this); return            TOKEN_INT; }
	break;
	case 31:
	{ setlexval(this); return                 DINT; }
	break;
	case 32:
	{ setlexval(this); return                 LINT; }
	break;
	case 33:
	{ setlexval(this); return                USINT; }
	break;
	case 34:
	{ setlexval(this); return           TOKEN_UINT; }
	break;
	case 35:
	{ setlexval(this); return                UDINT; }
	break;
	case 36:
	{ setlexval(this); return                ULINT; }
	break;
	case 37:
	{ setlexval(this); return                 REAL; }
	break;
	case 38:
	{ setlexval(this); return                LREAL; }
	break;
	case 39:
	{ setlexval(this); return           TOKEN_DATE; }
	break;
	case 40:
	{ setlexval(this); return          TIME_OF_DAY; }
	break;
	case 41:
	{ setlexval(this); return                  TOD; }
	break;
	case 42:
	{ setlexval(this); return        DATE_AND_TIME; }
	break;
	case 43:
	{ setlexval(this); return                   DT; }
	break;
	case 44:
	{ setlexval(this); return               STRING; }
	break;
	case 45:
	{ setlexval(this); return              WSTRING; }
	break;
	case 46:
	{ setlexval(this); return                 TIME; }
	break;
	case 47:
	{ setlexval(this); return           TOKEN_BOOL; }
	break;
	case 48:
	{ setlexval(this); return           TOKEN_BYTE; }
	break;
	case 49:
	{ setlexval(this); return           TOKEN_WORD; }
	break;
	case 50:
	{ setlexval(this); return          TOKEN_DWORD; }
	break;
	case 51:
	{ setlexval(this); return                LWORD; }
	break;
	case 52:
	{ setlexval(this); return                  ANY; }
	break;
	case 53:
	{ setlexval(this); return              ANY_NUM; }
	break;
	case 54:
	{ setlexval(this); return             ANY_REAL; }
	break;
	case 55:
	{ setlexval(this); return              ANY_INT; }
	break;
	case 56:
	{ setlexval(this); return              ANY_BIT; }
	break;
	case 57:
	{ setlexval(this); return           ANY_STRING; }
	break;
	case 58:
	{ setlexval(this); return             ANY_DATE; }
	break;
	case 59:
	{ setlexval(this); return       ANY_ELEMENTARY; }
	break;
	case 60:
	{ setlexval(this); return        ANY_MAGNITUDE; }
	break;
	case 61:
	{ setlexval(this); return          ANY_DERIVED; }
	break;
	case 62:
	{ setlexval(this); return                   AT; }
	break;
	case 63:
	{ setlexval(this); return                ARRAY; }
	break;
	case 64:
	{ setlexval(this); return                   EN; }
	break;
	case 65:
	{ setlexval(this); return                  ENO; }
	break;
	case 66:
	{ setlexval(this); return               R_EDGE; }
	break;
	case 67:
	{ setlexval(this); return               F_EDGE; }
	break;
	case 68:
	{ setlexval(this); return                  VAR; }
	break;
	case 69:
	{ setlexval(this); return            VAR_INPUT; }
	break;
	case 70:
	{ setlexval(this); return           VAR_OUTPUT; }
	break;
	case 71:
	{ setlexval(this); return           VAR_IN_OUT; }
	break;
	case 72:
	{ setlexval(this); return         VAR_EXTERNAL; }
	break;
	case 73:
	{ setlexval(this); return           VAR_ACCESS; }
	break;
	case 74:
	{ setlexval(this); return           VAR_GLOBAL; }
	break;
	case 75:
	{ setlexval(this); return             VAR_TEMP; }
	break;
	case 76:
	{ setlexval(this); return           VAR_IN_EXT; }
	break;
	case 77:
	{ setlexval(this); return              END_VAR; }
	break;
	case 78:
	{ setlexval(this); return               RETAIN; }
	break;
	case 79:
	{ setlexval(this); return           NON_RETAIN; }
	break;
	case 80:
	{ setlexval(this); return             CONSTANT; }
	break;
	case 81:
	{ setlexval(this); return           VAR_CONFIG; }
	break;
	case 82:
	{ setlexval(this); return            READ_ONLY; }
	break;
	case 83:
	{ setlexval(this); return           READ_WRITE; }
	break;
	case 84:
	{ setlexval(this); return                 STEP; }
	break;
	case 85:
	{ setlexval(this); return             END_STEP; }
	break;
	case 86:
	{ setlexval(this); return         INITIAL_STEP; }
	break;
	case 87:
	{ setlexval(this); return           TRANSITION; }
	break;
	case 88:
	{ setlexval(this); return       END_TRANSITION; }
	break;
	case 89:
	{ setlexval(this); return               ACTION; }
	break;
	case 90:
	{ setlexval(this); return           END_ACTION; }
	break;
	case 91:
	{ setlexval(this); return                 FROM; }
	break;
	case 92:
	{ setlexval(this); return                   IF; }
	break;
	case 93:
	{ setlexval(this); return                 THEN; }
	break;
	case 94:
	{ setlexval(this); return                ELSIF; }
	break;
	case 95:
	{ setlexval(this); return                 ELSE; }
	break;
	case 96:
	{ setlexval(this); return               END_IF; }
	break;
	case 97:
	{ setlexval(this); return                 CASE; }
	break;
	case 98:
	{ setlexval(this); return                   OF; }
	break;
	case 99:
	{ setlexval(this); return             END_CASE; }
	break;
	case 100:
	{ setlexval(this); return                WHILE; }
	break;
	case 101:
	{ setlexval(this); return                   DO; }
	break;
	case 102:
	{ setlexval(this); return            END_WHILE; }
	break;
	case 103:
	{ setlexval(this); return               REPEAT; }
	break;
	case 104:
	{ setlexval(this); return                UNTIL; }
	break;
	case 105:
	{ setlexval(this); return           END_REPEAT; }
	break;
	case 106:
	{ setlexval(this); return                  FOR; }
	break;
	case 107:
	{ setlexval(this); return                   TO; }
	break;
	case 108:
	{ setlexval(this); return                   BY; }
	break;
	case 109:
	{ setlexval(this); return              END_FOR; }
	break;
	case 110:
	{ setlexval(this); return                 EXIT; }
	break;
	case 111:
	{ setlexval(this); return               RETURN; }
	break;
	case 112:
	{ setlexval(this); return                 GOTO; }
	break;
	case 113:
	{ setlexval(this); return         SYNCHRONIZED; }
	break;
	case 114:
	{ setlexval(this); return     END_SYNCHRONIZED; }
	break;
	case 115:
	{ native_block(this); return           VAR_NATIVE; }
	break;
	case 116:
	{ setlexval(this); return          TOKEN_CONST; }
	break;
	case 117:
	{ setlexval(this); return      TOKEN_END_CONST; }
	break;
	case 118:
	{ setlexval(this); return             QVT_BOOL; }
	break;
	case 119:
	{ setlexval(this); return             QVT_BYTE; }
	break;
	case 120:
	{ setlexval(this); return             QVT_WORD; }
	break;
	case 121:
	{ setlexval(this); return            QVT_DWORD; }
	break;
	case 122:
	{ setlexval(this); return             QVT_DINT; }
	break;
	case 123:
	{ setlexval(this); return            QVT_LREAL; }
	break;
	case 124:
	{ setlexval(this); return PLUS; }
	break;
	case 125:
	{ setlexval(this); return MINUS; }
	break;
	case 126:
	{ setlexval(this); return TIMES; }
	break;
	case 127:
	{ setlexval(this); return DIV; }
	break;
	case 128:
	{ setlexval(this); return POW; }
	break;
	case 129:
	{ setlexval(this); return AND; }
	break;
	case 130:
	{ setlexval(this); return EQ; }
	break;
	case 131:
	{ setlexval(this); return NE; }
	break;
	case 132:
	{ setlexval(this); return LT; }
	break;
	case 133:
	{ setlexval(this); return LE; }
	break;
	case 134:
	{ setlexval(this); return GT; }
	break;
	case 135:
	{ setlexval(this); return GE; }
	break;
	case 136:
	{ setlexval(this); return COLON; }
	break;
	case 137:
	{ setlexval(this); return BECOMES; }
	break;
	case 138:
	{ setlexval(this); return RIGHT_ARROW; }
	break;
	case 139:
	{ setlexval(this); return SEMICOLON; }
	break;
	case 140:
	{ setlexval(this); return DOT; }
	break;
	case 141:
	{ setlexval(this); return DOTDOT; }
	break;
	case 142:
	{ setlexval(this); return COMMA; }
	break;
	case 143:
	{ setlexval(this); return SQUARED_BRACKET_OPEN; }
	break;
	case 144:
	{ setlexval(this); return SQUARED_BRACKET_CLOSE; }
	break;
	case 145:
	{ setlexval(this); return PAREN_OPEN; }
	break;
	case 146:
	{ setlexval(this); return PAREN_CLOSE; }
	break;
	case 147:
	{ setlexval(this); return CURLY_BRACES_OPEN; }
	break;
	case 148:
	{ setlexval(this); return CURLY_BRACES_CLOSE; }
	break;
	case 149:
	{ setlexval(this); return PIPE; }
	break;
	case 150:
	{ setlexval(this); return PERIOD; }
	break;
	case 151:
	{ setlexval(this); return            IMPORT_DIRECTIVE; }
	break;
	case 152:
	{ setlexval_without_newline(this); return PRAGMA_DIRECTIVE; }
	break;
	case 153:
	{ setlexval(this); return IDENTIFIER; }
	break;
	case 154:
	{ setlexval(this); return INT_LITERAL; }
	break;
	case 155:
	{ setlexval(this); return FLOAT_LITERAL; }
	break;
	case 156:
	{ setlexval(this); return DATE_LITERAL; }
	break;
	case 157:
	{ setlexval(this); return DT_LITERAL; }
	break;
	case 158:
	{ setlexval(this); return TOD_LITERAL; }
	break;
	case 159:
	{ setlexval(this); return TIME_LITERAL; }
	break;
	case 160:
	{ setlexval(this); return BOOL_LITERAL; }
	break;
	case 161:
	{ setlexval(this); return BOOL_LITERAL; }
	break;
	case 162:
	{ setlexval(this); return DIRECT_VARIABLE; } 
	break;


	}
	YY_SCANNER();
	i = yyleng;
	goto yy_again;			/* action fell though */

  yy_reject:
	YY_SCANNER();
	i = yyoleng;			/* restore original yytext */
	if (++yyfmin < yyfmax)
		goto yy_found;		/* another final state, same length */
	else
		goto yy_search;		/* try shorter yytext */

  yy_more:
	YY_SCANNER();
	i = yyleng;
	if (i > 0)
		yy_lastc = yytext[i-1];
	goto yy_contin;
}

/*
 * user callable input/unput functions.
 */
void
yy_scan::yy_reset()
{
	YY_INIT();
	yylineno = 1;
}
/* get input char with pushback */
int
yy_scan::input()
{
	int c;
#ifndef YY_PRESERVE
	if (yy_end > yyleng) {
		yy_end--;
		memmove(yytext+yyleng, yytext+yyleng+1,
			(size_t) (yy_end-yyleng));
		c = save;
		YY_USER();
#else
	if (push < save+size) {
		c = *push++;
#endif
	} else
		c = yygetc();
	yy_lastc = c;
	if (c == YYNEWLINE)
		yylineno++;
	return c;
}

/* pushback char */
int
yy_scan::unput(int c)
{
#ifndef YY_PRESERVE
	if (yy_end >= size) {
		YY_FATAL("Push-back buffer overflow");
	} else {
		if (yy_end > yyleng) {
			yytext[yyleng] = save;
			memmove(yytext+yyleng+1, yytext+yyleng,
				(size_t) (yy_end-yyleng));
			yytext[yyleng] = 0;
		}
		yy_end++;
		save = c;
#else
	if (push <= save) {
		YY_FATAL("Push-back buffer overflow");
	} else {
		*--push = c;
#endif
		if (c == YYNEWLINE)
			yylineno--;
	}	/* endif */
	return c;
}


void st_comment(yy_scan* scanner)
{
//    consume_until(scanner, "*)", "end of file in comment"); // Does not support nested comments.
    consume_comment(scanner);                             // Supports nested comments.
}

void native_block(yy_scan* scanner)
{
    consume_until(scanner, "END_NATIVE", "end of file in native block");
}

void consume_until(yy_scan* scanner, const string& s, char* errMsg)
{
    //=== consume input characters until string s matches case insensitive

    //=== look for the first char of string s at beginning
    string::size_type i = 0;

    //=== consume input characters until:
    //=== - end of file is reached or
    //=== - last character of string s did match
    for( int c = scanner->input();
         c != EOF && i < s.length();
         c = scanner->input())
    {
        //=== compare i-th character case insensitive
        if ( (c == tolower(s.at(i))) ||
             (c == toupper(s.at(i))) 
           )
        {
            //=== if matched continue loop
            //=== but try to match character i+1 in string s next time
           ++i;
        }
        //=== if i-th character did not match but a non empty
        //=== prefix of string s did match already ...
        else if ( i > 0 )
        {
            //=== then push back consumed characters
            for( int j = i; j > 0; --j )
            {
                scanner->unput(s.at(j));
            }
            //=== retry match with first character of string s next time
            i = 0;
        }
    }

    //=== if not all characters of string s did match
    //=== then eof appeared
    if ( i < s.length() )
    {
        scanner->yyerror(errMsg);
    }
}

void consume_comment(yy_scan* scanner)
{
    int comments = 1;
    int c_old = 0;
    int c = scanner->input();
    while (c != EOF)
    {
        if ((c_old == '(') && (c == '*'))
        {
            comments++;
        }
        else if ((c_old == '*') && (c == ')'))
        {
            comments--;
        }
        if (comments == 0)
        {
            end_of_last_comment = scanner->yypos;
            break;
        }
        c_old = c;
        c = scanner->input();
    }
    if (c == EOF)
    {
        scanner->yyerror("end of file in comment");
    }
}

void set_variable_comment_lexval(yy_scan* scanner)
{
    int comments = 1;
    int c_old = 0;
    int c_old_old = 0;
    string var_comment = "";
    int c = scanner->input();
    while (c != EOF)
    {
        var_comment += c;
        if ((c_old_old == '(') && (c_old == '*') && (c == '['))
        {
            comments++;
        }
        else if ((c_old_old == ']') && (c_old == '*') && (c == ')'))
        {
            comments--;
        }
        if (comments == 0)
        {
            break;
        }
        c_old_old = c_old;
        c_old = c;
        c = scanner->input();
    }
    if (c == EOF)
    {
        scanner->yyerror("end of file in comment");
    }
    else
    {
        var_comment = var_comment.substr(0, var_comment.length() - 3);   /* ]*) -> 3 */
        setlexval(var_comment, scanner->yypos, scanner);
    }
}

void setlexval(yy_scan* scanner)
{
    string text = scanner->yytext;
    setlexval(text, scanner->yypos - 1, scanner);
}

void setlexval_without_newline(yy_scan* scanner)
{
    string text = scanner->yytext;
    setlexval(text, scanner->yypos - 1, scanner);
}

void setlexval(const string& text, StringPos end, yy_scan* scanner)
{
    LexVal *lv;
    lv = new LexVal(text, end, scanner->yylineno);

    // insert lv at the front of the list of lexvals 
    lv->m_pPrevious = scanner->yylval.lexval;
    scanner->yylval.lexval = lv;
}

void string_literal(yy_scan* scanner, int delim)
{
    string literal;
    literal = delim;
    int dollar = 0;
    int c = scanner->input();
    while (c != EOF && c != '\n')
    {
        literal += c;

        if ((c == delim) && (!dollar))
        {
            break;
        }
        else if (c == '$' && inside_system_comment == 0)
        {
            dollar = !dollar;
        }
        else 
        {
            dollar = 0;
        }

        c = scanner->input();
    }
    if (c == EOF)
    {
        scanner->yyerror("end of file in string literal");
    }
    else
    {
        setlexval(literal, scanner->yypos, scanner);
    }
}

void throw_fatal_error(int i)
{
    throw "FATAL SCANNER FAILURE !!!";
}

