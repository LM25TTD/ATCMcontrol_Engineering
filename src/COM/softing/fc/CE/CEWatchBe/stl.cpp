/*!!!!! this file has been generated using yyreplace.pl !!!!!*/
/* input files for yyreplace.pl: stl.l, stl.cpp~, stl.h~*/

/*START yyreplace.pl: include files and #yy_movetop lines from stl.l */
#include "stdafx.h"
#include <ctype.h>
#include "fc_todebug\fc_assert.h"
#include "st_scan.h"
/*END yyreplace.pl: include files from stl.l */


/*START yyreplace.pl: file stl.h~ */
#ifndef yy_state_t
#define yy_state_t unsigned int
#endif
#define YYNEWLINE 10

// MKS LEX prototype scanner header
// Copyright 1991 by Mortice Kern Systems Inc.
// All rights reserved.

// You can define YY_PRESERVE to get System V UNIX lex compatibility,
//	if you need to change yytext[] in your user actions
// This is quite a bit slower, though, so the default is without

#include <stdio.h>		// uses printf(), et cetera
#include <stdarg.h>		// uses va_list
#include <stdlib.h>		// uses exit()
#include <string.h>		// uses memmove()

class stl_scan {
protected:
	yy_state_t * state;		// state buffer
	int	size;			// length of state buffer
	int	mustfree;		// set if space is allocated
	int	yy_end;			// end of pushback
	int	yy_start;		// start state
	int	yy_lastc;		// previous char
#ifdef YYEXIT
	int yyLexFatal;		// Lex Fatal Error Flag
#endif // YYEXIT
#ifndef YY_PRESERVE	// efficient default push-back scheme
	char save;		// saved yytext[yyleng]
#else			// slower push-back for yytext mungers
	char *save;		// saved yytext[]
	char *push;
#endif

public:
	char   *yytext;		// yytext text buffer
	FILE   *yyin;			// input stream
	FILE   *yyout;			// output stream
	int	yylineno;		// line number
	int	yyleng;			// yytext token length

	stl_scan(int = 100);	// constructor for this scanner
			// default token & pushback size is 100 bytes
	stl_scan(int, char*, char*, yy_state_t*);
				// constructor when tables are given

	~stl_scan();		// destructor

	int	yylex();		// begin a scan

	virtual int	yygetc() {	// scanner source of input characters
		return getc(yyin);
	}

	virtual int	yywrap() { return 1; }	// EOF processing

	virtual void	yyerror(char *,...);	// print error message

	virtual void	output(int c) { putc(c, yyout); }

#ifdef YYEXIT
	virtual void	YY_FATAL(char * msg) {	// print message and set error flag
		yyerror(msg); yyLexFatal = 1;
	}
#else // YYEXIT
	virtual void	YY_FATAL(char * msg) {	// print message and stop
		yyerror(msg); exit(1);
	}
#endif // YYEXIT
	virtual void	ECHO() {		// print matched input
		fputs((const char *) yytext, yyout);
	}
	int	input();		// user-callable get-input
	int	unput(int c);		// user-callable unput character
	void	yy_reset();		// reset scanner
	void	setinput(FILE * in) {		// switch input streams
		yyin = in;
	}
	void	setoutput(FILE * out) {	// switch output
		yyout = out;
	}
	void	NLSTATE() { yy_lastc = YYNEWLINE; }
	void	YY_INIT() {
		yy_start = 0;
		yyleng = yy_end = 0;
		yy_lastc = YYNEWLINE;
	}
	void	YY_USER() {		// set up yytext for user
#ifndef YY_PRESERVE
		save = yytext[yyleng];
#else
		size_t n = yy_end - yyleng;
		push = save+size - n;
		if (n > 0)
			memmove(push, yytext+yyleng, n);
#endif
		yytext[yyleng] = 0;
	}
	void YY_SCANNER() {		// set up yytext for scanner
#ifndef YY_PRESERVE
		yytext[yyleng] = save;
#else
		size_t n = save+size - push;
		if (n > 0)
			memmove(yytext+yyleng, push, n);
		yy_end = yyleng + n;
#endif
	}
	void	yyless(int n) {		// trim input to 'n' bytes
		if (n >= 0 && n <= yy_end) {
			YY_SCANNER();
			yyleng = n;
			YY_USER();
		}
	}
	void	yycomment(char *const mat); // skip comment input
	int	yymapch(int delim, int escape);	// map C escapes
} ;
/*END yyreplace.pl: file stl.h~ */
/*START yyreplace.pl: file stl.cpp~ */
/* lex -alTv -LC -P C:\ATCMControl_SDK\GenWork\GenDir.tmp\4Control_R\gentools\yylex.cpp -o stl.cpp~ -D stl.h~ stl.l */
#define INITIAL 0
#define RANGES 2
const yy_endst = 549;
const yy_nxtmax = 4050;
#define YY_LA_SIZE 69

static unsigned int yy_la_act[] = {
 63, 76, 63, 76, 63, 76, 63, 76, 8, 76, 9, 76, 10, 76, 11, 76,
 63, 76, 63, 76, 63, 76, 63, 76, 63, 76, 18, 76, 63, 76, 63, 76,
 63, 76, 25, 76, 27, 76, 29, 76, 31, 76, 32, 76, 33, 76, 34, 76,
 35, 76, 36, 76, 63, 76, 63, 76, 63, 76, 63, 76, 63, 76, 63, 76,
 63, 76, 63, 76, 76, 65, 76, 65, 76, 65, 76, 65, 76, 76, 76, 76,
 74, 76, 75, 76, 73, 68, 67, 65, 66, 66, 66, 66, 65, 65, 65, 65,
 65, 65, 65, 64, 64, 64, 64, 64, 63, 63, 63, 63, 63, 63, 65, 65,
 65, 65, 65, 65, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
 63, 63, 63, 63, 63, 63, 62, 63, 63, 63, 63, 63, 61, 63, 63, 60,
 63, 63, 63, 59, 63, 63, 63, 63, 63, 69, 69, 70, 70, 70, 70, 63,
 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
 63, 63, 63, 63, 63, 63, 63, 53, 63, 63, 63, 63, 52, 63, 63, 63,
 51, 63, 63, 63, 50, 63, 40, 63, 63, 63, 63, 63, 63, 63, 63, 63,
 63, 63, 63, 63, 63, 49, 63, 63, 63, 48, 63, 63, 63, 63, 47, 63,
 63, 63, 63, 46, 63, 63, 63, 45, 63, 63, 38, 63, 30, 26, 28, 23,
 63, 24, 63, 21, 63, 22, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 55, 63, 63, 63, 63,
 63, 63, 57, 63, 63, 63, 63, 56, 63, 63, 63, 54, 63, 19, 63, 63,
 20, 63, 17, 63, 63, 16, 63, 15, 63, 63, 63, 37, 63, 14, 63, 63,
 63, 39, 63, 12, 63, 13, 63, 63, 63, 6, 63, 63, 63, 63, 63, 63,
 63, 63, 63, 63, 63, 63, 63, 63, 44, 63, 63, 63, 63, 43, 63, 63,
 63, 63, 63, 42, 63, 63, 41, 63, 63, 63, 7, 5, 63, 63, 63, 72,
 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
 72, 72, 72, 72, 72, 72, 72, 72, 72, 63, 71, 71, 71, 71, 63, 63,
 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 58, 63, 63,
 4, 63, 3, 3, 2, 3, 3, 1, 0, 0
};

static unsigned char yy_look[] = {
 0
};

static int yy_final[] = {
 0, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28,
 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60,
 62, 64, 66, 68, 69, 71, 73, 75, 77, 78, 79, 80, 82, 83, 84, 84,
 85, 85, 85, 86, 86, 86, 86, 86, 86, 86, 86, 87, 87, 87, 87, 87,
 88, 88, 88, 89, 89, 90, 90, 90, 91, 91, 92, 93, 93, 94, 94, 95,
 95, 96, 97, 97, 98, 98, 99, 99, 99, 100, 100, 101, 101, 102, 102, 102,
 102, 103, 103, 103, 103, 103, 103, 103, 104, 105, 106, 107, 108, 109, 110, 110,
 110, 111, 112, 113, 114, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142,
 143, 145, 146, 147, 149, 150, 151, 152, 153, 153, 153, 153, 153, 153, 153, 153,
 153, 153, 154, 154, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 156, 156, 157, 157, 158, 158,
 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174,
 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 190, 191, 192,
 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
 212, 213, 215, 216, 217, 219, 220, 221, 222, 224, 225, 226, 227, 229, 230, 231,
 233, 234, 236, 237, 238, 239, 241, 243, 245, 247, 248, 249, 250, 251, 252, 253,
 254, 255, 256, 257, 258, 259, 259, 259, 259, 259, 259, 260, 261, 262, 263, 264,
 265, 266, 267, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 281, 282, 283,
 285, 287, 288, 290, 292, 293, 295, 297, 298, 299, 301, 303, 304, 305, 307, 309,
 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326,
 327, 328, 330, 331, 332, 333, 335, 336, 337, 338, 339, 341, 342, 344, 345, 346,
 346, 346, 346, 346, 346, 346, 347, 347, 347, 348, 349, 350, 351, 351, 351, 351,
 351, 351, 351, 352, 353, 354, 355, 356, 356, 356, 356, 356, 356, 356, 356, 357,
 358, 359, 360, 360, 360, 360, 360, 360, 361, 362, 362, 362, 362, 363, 363, 363,
 363, 363, 363, 363, 363, 364, 365, 366, 367, 367, 367, 367, 367, 367, 367, 368,
 369, 370, 370, 370, 370, 370, 370, 371, 371, 371, 371, 371, 371, 372, 372, 372,
 372, 372, 372, 372, 372, 373, 374, 375, 376, 376, 376, 376, 376, 376, 376, 377,
 377, 377, 377, 378, 378, 378, 378, 378, 378, 379, 379, 379, 379, 379, 379, 380,
 380, 380, 380, 380, 380, 381, 381, 381, 381, 381, 381, 381, 381, 382, 383, 384,
 385, 385, 385, 385, 385, 385, 385, 386, 386, 386, 386, 387, 387, 387, 387, 388,
 388, 388, 388, 389, 390, 391, 392, 393, 394, 394, 394, 394, 394, 394, 394, 394,
 394, 394, 395, 395, 396, 396, 397, 397, 398, 399, 400, 401, 402, 403, 404, 405,
 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 418, 418, 419, 420, 422, 423,
 424, 424, 424, 424, 424, 425
};
#ifndef yy_state_t
#define yy_state_t unsigned int
#endif

static yy_state_t yy_begin[] = {
 0, 0, 538, 538, 0
};

static yy_state_t yy_next[] = {
 45, 45, 45, 45, 45, 45, 45, 45, 45, 43, 44, 45, 45, 45, 45, 45,
 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
 43, 45, 41, 45, 45, 35, 14, 40, 25, 26, 7, 5, 22, 6, 21, 8,
 36, 37, 38, 36, 36, 36, 36, 36, 39, 36, 45, 45, 19, 18, 20, 45,
 45, 10, 3, 31, 28, 15, 4, 17, 31, 32, 31, 31, 16, 9, 13, 11,
 31, 31, 31, 27, 1, 33, 31, 30, 12, 31, 31, 23, 45, 24, 45, 34,
 45, 10, 3, 31, 29, 15, 4, 17, 31, 32, 31, 31, 16, 9, 13, 11,
 31, 31, 31, 27, 2, 33, 31, 30, 12, 31, 31, 42, 45, 45, 45, 45,
 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 46, 46,
 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 549, 48, 48, 48, 48, 48,
 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
 48, 48, 50, 48, 49, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
 52, 549, 52, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 549, 51, 51,
 51, 51, 51, 51, 51, 51, 51, 51, 549, 549, 549, 77, 78, 78, 549, 51,
 51, 51, 51, 51, 51, 82, 64, 549, 549, 549, 52, 549, 52, 549, 52, 549,
 52, 65, 52, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 549, 81, 51,
 51, 51, 51, 51, 51, 80, 80, 86, 549, 549, 52, 86, 52, 549, 52, 86,
 52, 549, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 77, 82, 549,
 549, 108, 62, 109, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54,
 54, 54, 54, 54, 79, 127, 549, 549, 549, 549, 549, 54, 54, 54, 54, 54,
 54, 108, 130, 109, 53, 53, 53, 53, 53, 53, 118, 119, 549, 549, 549, 164,
 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 549, 54, 54, 54, 54, 54,
 54, 55, 55, 55, 55, 55, 55, 70, 198, 70, 164, 119, 71, 71, 71, 71,
 71, 71, 71, 71, 71, 71, 74, 74, 74, 74, 74, 74, 74, 74, 206, 209,
 549, 55, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 56, 56, 56, 56,
 56, 230, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 56, 56, 58, 56,
 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
 56, 56, 56, 56, 56, 56, 56, 60, 233, 258, 60, 106, 120, 121, 122, 152,
 107, 286, 123, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 549, 549, 549,
 549, 549, 124, 125, 59, 59, 59, 59, 59, 59, 126, 106, 120, 121, 122, 60,
 107, 60, 123, 60, 128, 60, 129, 60, 73, 73, 73, 73, 73, 73, 73, 73,
 73, 73, 124, 125, 59, 59, 59, 59, 59, 59, 126, 194, 260, 259, 549, 60,
 549, 60, 549, 60, 128, 60, 129, 60, 61, 61, 61, 61, 61, 61, 61, 61,
 61, 61, 134, 135, 277, 136, 137, 72, 140, 61, 61, 61, 61, 61, 61, 68,
 68, 68, 68, 68, 68, 68, 68, 68, 68, 76, 76, 76, 76, 76, 76, 76,
 76, 93, 134, 135, 69, 136, 137, 141, 140, 61, 61, 61, 61, 61, 61, 92,
 92, 92, 92, 92, 92, 92, 92, 92, 92, 142, 549, 319, 549, 328, 67, 331,
 276, 351, 549, 549, 69, 549, 549, 141, 75, 83, 83, 83, 83, 83, 83, 83,
 83, 83, 83, 549, 549, 549, 549, 549, 143, 142, 83, 83, 83, 83, 83, 83,
 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 549, 549, 549, 549, 549, 549,
 144, 85, 85, 85, 85, 85, 85, 549, 143, 549, 83, 83, 83, 83, 83, 83,
 549, 549, 549, 549, 549, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 84,
 144, 85, 85, 85, 85, 85, 85, 87, 549, 87, 504, 549, 526, 145, 146, 147,
 91, 87, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 87, 87, 111, 504,
 111, 285, 531, 112, 113, 114, 112, 112, 112, 112, 112, 115, 112, 145, 146, 147,
 543, 284, 544, 545, 546, 547, 548, 94, 94, 94, 94, 94, 94, 94, 94, 94,
 94, 89, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
 94, 94, 94, 94, 94, 94, 94, 94, 94, 96, 94, 95, 94, 94, 94, 94,
 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
 94, 94, 94, 94, 94, 94, 94, 98, 549, 98, 153, 153, 153, 153, 153, 153,
 153, 153, 153, 153, 192, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 549,
 549, 549, 549, 549, 138, 193, 97, 97, 97, 97, 97, 97, 131, 195, 132, 196,
 197, 98, 139, 98, 192, 98, 133, 98, 91, 98, 103, 103, 103, 103, 103, 103,
 103, 103, 103, 103, 138, 193, 97, 97, 97, 97, 97, 97, 131, 195, 132, 196,
 197, 98, 139, 98, 549, 98, 133, 98, 549, 98, 99, 99, 99, 99, 99, 99,
 99, 99, 99, 99, 549, 549, 549, 549, 199, 102, 200, 99, 99, 99, 99, 99,
 99, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 549, 364, 549, 549, 549,
 549, 201, 100, 100, 100, 100, 100, 100, 199, 549, 200, 99, 99, 99, 99, 99,
 99, 549, 549, 549, 549, 549, 549, 101, 101, 101, 101, 101, 101, 101, 101, 101,
 101, 201, 100, 100, 100, 100, 100, 100, 101, 101, 101, 101, 101, 101, 157, 157,
 157, 157, 157, 157, 157, 157, 157, 157, 522, 549, 549, 549, 549, 104, 104, 104,
 104, 104, 104, 104, 104, 104, 104, 549, 101, 101, 101, 101, 101, 101, 104, 104,
 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
 104, 104, 104, 104, 104, 104, 104, 104, 549, 549, 549, 549, 105, 549, 104, 104,
 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
 104, 104, 104, 104, 104, 104, 104, 104, 110, 161, 161, 161, 161, 161, 161, 161,
 161, 161, 161, 549, 549, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 549,
 202, 203, 204, 205, 549, 207, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
 202, 203, 204, 205, 105, 207, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
 64, 152, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 549, 117, 117, 117,
 117, 117, 117, 117, 117, 117, 117, 208, 214, 215, 216, 217, 549, 218, 219, 150,
 220, 221, 222, 223, 224, 156, 225, 148, 155, 155, 155, 155, 155, 155, 155, 155,
 155, 155, 151, 226, 229, 149, 231, 208, 214, 215, 216, 217, 116, 218, 219, 150,
 220, 221, 222, 223, 224, 160, 225, 148, 159, 159, 159, 159, 159, 159, 159, 159,
 159, 159, 151, 226, 229, 149, 231, 154, 163, 163, 163, 163, 163, 163, 163, 163,
 163, 163, 168, 232, 239, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 549,
 549, 549, 240, 241, 549, 549, 549, 158, 169, 169, 169, 169, 169, 169, 169, 169,
 169, 169, 549, 232, 239, 172, 549, 162, 171, 171, 171, 171, 171, 171, 171, 171,
 171, 171, 240, 241, 166, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 176,
 549, 549, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 177, 177, 177, 177,
 177, 177, 177, 177, 177, 177, 549, 170, 179, 179, 179, 179, 179, 179, 179, 179,
 179, 179, 180, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 549, 549, 549,
 549, 174, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 184, 185, 185, 185,
 185, 185, 185, 185, 185, 185, 185, 178, 188, 549, 187, 187, 187, 187, 187, 187,
 187, 187, 187, 187, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 242, 243,
 244, 182, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 210, 228, 211, 245,
 234, 549, 235, 246, 247, 227, 212, 248, 249, 186, 236, 250, 251, 252, 242, 243,
 244, 213, 237, 253, 254, 238, 255, 549, 256, 152, 257, 268, 210, 228, 211, 245,
 234, 190, 235, 246, 247, 227, 212, 248, 249, 269, 236, 250, 251, 252, 262, 549,
 270, 213, 237, 253, 254, 238, 255, 150, 256, 271, 257, 268, 272, 261, 273, 148,
 274, 275, 264, 282, 283, 287, 266, 288, 289, 269, 151, 290, 294, 149, 262, 265,
 270, 263, 549, 295, 267, 549, 549, 150, 549, 271, 549, 549, 272, 261, 273, 148,
 274, 275, 264, 282, 283, 287, 266, 288, 289, 549, 151, 290, 294, 149, 296, 265,
 278, 263, 278, 295, 267, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 65,
 549, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 291, 297, 292, 296, 298,
 549, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 312, 313, 314, 315,
 293, 305, 317, 318, 320, 316, 311, 321, 322, 323, 549, 291, 297, 292, 326, 298,
 280, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 312, 313, 314, 315,
 293, 305, 317, 318, 320, 316, 311, 321, 322, 323, 324, 327, 329, 330, 326, 332,
 335, 336, 337, 338, 325, 339, 340, 333, 341, 342, 344, 345, 346, 347, 348, 349,
 350, 549, 334, 354, 355, 356, 357, 343, 358, 359, 324, 327, 329, 330, 360, 332,
 335, 336, 337, 338, 325, 339, 340, 333, 341, 342, 344, 345, 346, 347, 348, 349,
 350, 353, 334, 354, 355, 356, 357, 343, 358, 359, 364, 549, 549, 365, 360, 352,
 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 382, 385, 549, 549, 549, 549,
 404, 353, 369, 407, 368, 368, 368, 368, 368, 368, 368, 368, 368, 368, 415, 352,
 362, 549, 549, 549, 436, 439, 363, 549, 370, 361, 383, 384, 371, 549, 549, 549,
 405, 372, 476, 406, 549, 479, 392, 374, 549, 549, 549, 549, 549, 549, 416, 549,
 362, 549, 549, 367, 437, 438, 363, 549, 370, 361, 549, 549, 371, 549, 549, 549,
 549, 373, 477, 549, 549, 478, 391, 374, 376, 376, 376, 376, 376, 376, 376, 376,
 376, 376, 379, 549, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378, 386, 386,
 386, 386, 386, 386, 386, 386, 386, 386, 549, 549, 549, 549, 549, 549, 549, 415,
 549, 381, 549, 549, 549, 549, 549, 375, 388, 388, 388, 388, 388, 388, 388, 388,
 388, 388, 549, 377, 549, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 416,
 549, 380, 549, 549, 395, 381, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
 549, 549, 549, 549, 503, 549, 520, 387, 392, 398, 398, 398, 398, 398, 398, 398,
 398, 398, 398, 549, 389, 380, 549, 549, 401, 396, 400, 400, 400, 400, 400, 400,
 400, 400, 400, 400, 503, 393, 520, 549, 391, 408, 408, 408, 408, 408, 408, 408,
 408, 408, 408, 549, 549, 549, 549, 403, 397, 396, 549, 410, 410, 410, 410, 410,
 410, 410, 410, 410, 410, 521, 549, 549, 549, 399, 411, 411, 411, 411, 411, 411,
 411, 411, 411, 411, 549, 549, 549, 402, 403, 413, 413, 413, 413, 413, 413, 413,
 413, 413, 413, 549, 549, 521, 549, 549, 549, 549, 409, 413, 413, 413, 413, 413,
 413, 413, 413, 413, 413, 524, 525, 527, 402, 549, 523, 549, 414, 394, 394, 394,
 394, 394, 394, 394, 394, 394, 394, 549, 412, 418, 418, 418, 418, 418, 418, 418,
 418, 418, 418, 549, 549, 524, 525, 527, 549, 549, 523, 421, 414, 420, 420, 420,
 420, 420, 420, 420, 420, 420, 420, 424, 424, 424, 424, 424, 424, 424, 424, 424,
 424, 549, 549, 549, 528, 529, 549, 530, 417, 427, 422, 426, 426, 426, 426, 426,
 426, 426, 426, 426, 426, 549, 549, 549, 549, 549, 549, 549, 419, 549, 549, 549,
 549, 549, 549, 549, 528, 529, 423, 530, 532, 533, 422, 534, 535, 536, 428, 430,
 430, 430, 430, 430, 430, 430, 430, 430, 430, 433, 425, 432, 432, 432, 432, 432,
 432, 432, 432, 432, 432, 549, 549, 549, 532, 533, 549, 534, 535, 536, 428, 549,
 549, 549, 549, 549, 549, 537, 549, 549, 435, 549, 549, 549, 549, 549, 429, 440,
 440, 440, 440, 440, 440, 440, 440, 440, 440, 549, 431, 442, 442, 442, 442, 442,
 442, 442, 442, 442, 442, 537, 549, 549, 434, 443, 443, 443, 443, 443, 443, 443,
 443, 443, 443, 549, 549, 549, 549, 549, 435, 445, 445, 445, 445, 445, 445, 445,
 445, 445, 445, 549, 549, 549, 549, 549, 549, 549, 441, 445, 445, 445, 445, 445,
 445, 445, 445, 445, 445, 549, 549, 549, 434, 549, 549, 549, 446, 426, 426, 426,
 426, 426, 426, 426, 426, 426, 426, 549, 444, 447, 447, 447, 447, 447, 447, 447,
 447, 447, 447, 549, 549, 549, 549, 549, 549, 549, 549, 549, 446, 449, 449, 449,
 449, 449, 449, 449, 449, 449, 449, 452, 452, 452, 452, 452, 452, 452, 452, 452,
 452, 549, 549, 549, 549, 549, 549, 549, 549, 455, 450, 454, 454, 454, 454, 454,
 454, 454, 454, 454, 454, 549, 549, 549, 549, 549, 549, 549, 448, 549, 549, 549,
 549, 549, 549, 456, 549, 549, 451, 549, 549, 549, 450, 458, 458, 458, 458, 458,
 458, 458, 458, 458, 458, 549, 549, 549, 549, 549, 453, 549, 549, 549, 549, 549,
 549, 549, 461, 456, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 464, 464,
 464, 464, 464, 464, 464, 464, 464, 464, 549, 549, 457, 549, 549, 549, 549, 549,
 467, 462, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 549, 549, 549, 549,
 549, 549, 549, 459, 549, 549, 549, 549, 549, 549, 549, 549, 549, 463, 549, 549,
 549, 462, 549, 549, 549, 468, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470,
 473, 465, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 549, 549, 549, 549,
 549, 549, 549, 549, 549, 468, 549, 549, 549, 549, 549, 549, 549, 549, 549, 475,
 549, 549, 549, 549, 549, 469, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480,
 549, 471, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 549, 549, 549, 474,
 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 549, 549, 549, 549, 549, 475,
 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 549, 549, 549, 549, 549, 549,
 549, 481, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 549, 549, 549, 474,
 549, 549, 549, 486, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 549, 484,
 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 549, 549, 549, 549, 549, 549,
 549, 549, 549, 486, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 491, 491,
 491, 491, 491, 491, 491, 491, 491, 491, 549, 549, 549, 549, 549, 549, 549, 549,
 549, 490, 493, 493, 493, 493, 493, 493, 493, 493, 493, 493, 549, 549, 549, 549,
 549, 549, 549, 488, 549, 549, 549, 549, 549, 549, 494, 549, 549, 549, 549, 549,
 549, 490, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 549, 549, 364, 549,
 549, 492, 549, 549, 549, 549, 549, 549, 549, 549, 494, 497, 497, 497, 497, 497,
 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 498,
 549, 549, 549, 499, 362, 549, 549, 549, 500, 549, 363, 549, 549, 361, 502, 368,
 368, 368, 368, 368, 368, 368, 368, 368, 368, 549, 496, 549, 549, 549, 549, 498,
 549, 549, 549, 499, 362, 549, 549, 549, 501, 549, 363, 549, 549, 361, 502, 505,
 505, 505, 505, 505, 505, 505, 505, 505, 505, 507, 507, 507, 507, 507, 507, 507,
 507, 507, 507, 508, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 511, 511,
 511, 511, 511, 511, 511, 511, 511, 511, 512, 513, 513, 513, 513, 513, 513, 513,
 513, 513, 513, 549, 549, 549, 549, 516, 506, 515, 515, 515, 515, 515, 515, 515,
 515, 515, 515, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 510, 519, 519,
 519, 519, 519, 519, 519, 519, 519, 519, 549, 549, 549, 549, 549, 549, 549, 549,
 549, 549, 549, 549, 549, 549, 549, 549, 514, 549, 549, 549, 549, 549, 549, 549,
 549, 549, 549, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 518, 542, 542,
 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542,
 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 541,
 542, 540, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542,
 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542,
 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542,
 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542,
 542, 539, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542,
 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542,
 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542,
 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542,
 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542,
 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542,
 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542,
 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542,
 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542,
 542, 542, 542, 0
};

static yy_state_t yy_check[] = {
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 72, 41, 41, 41, 41, 41,
 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
 49, 75, 49, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 67, 49, 49,
 49, 49, 49, 49, 49, 49, 49, 49, 70, 63, 70, 38, 77, 77, 79, 49,
 49, 49, 49, 49, 49, 81, 39, 67, 84, 36, 49, 37, 49, 67, 49, 102,
 49, 39, 49, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 62, 37, 49,
 49, 49, 49, 49, 49, 78, 78, 35, 62, 89, 49, 35, 49, 117, 49, 35,
 49, 116, 49, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 114, 118, 112,
 102, 107, 39, 108, 51, 51, 51, 51, 51, 51, 53, 53, 53, 53, 53, 53,
 53, 53, 53, 53, 78, 126, 111, 113, 111, 62, 89, 53, 53, 53, 53, 53,
 53, 107, 129, 108, 51, 51, 51, 51, 51, 51, 113, 106, 162, 116, 158, 151,
 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 190, 53, 53, 53, 53, 53,
 53, 54, 54, 54, 54, 54, 54, 69, 197, 69, 202, 106, 69, 69, 69, 69,
 69, 69, 69, 69, 69, 69, 64, 64, 64, 64, 64, 64, 64, 64, 205, 208,
 158, 54, 54, 54, 54, 54, 54, 40, 40, 40, 40, 40, 40, 40, 40, 40,
 40, 229, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
 40, 40, 40, 40, 40, 40, 40, 57, 232, 20, 57, 33, 119, 120, 32, 193,
 33, 285, 122, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 186, 154, 278,
 174, 278, 30, 124, 57, 57, 57, 57, 57, 57, 125, 33, 119, 120, 32, 57,
 33, 57, 122, 57, 127, 57, 128, 57, 71, 71, 71, 71, 71, 71, 71, 71,
 71, 71, 30, 124, 57, 57, 57, 57, 57, 57, 125, 193, 19, 19, 186, 57,
 154, 57, 174, 57, 127, 57, 128, 57, 59, 59, 59, 59, 59, 59, 59, 59,
 59, 59, 133, 134, 275, 135, 136, 71, 139, 59, 59, 59, 59, 59, 59, 66,
 66, 66, 66, 66, 66, 66, 66, 66, 66, 74, 74, 74, 74, 74, 74, 74,
 74, 91, 133, 134, 66, 135, 136, 140, 139, 59, 59, 59, 59, 59, 59, 91,
 91, 91, 91, 91, 91, 91, 91, 91, 91, 141, 170, 7, 166, 327, 66, 330,
 275, 350, 375, 397, 66, 182, 178, 140, 74, 82, 82, 82, 82, 82, 82, 82,
 82, 82, 82, 280, 429, 423, 417, 469, 138, 141, 82, 82, 82, 82, 82, 82,
 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 182, 178, 170, 87, 166, 87,
 143, 83, 83, 83, 83, 83, 83, 87, 138, 463, 82, 82, 82, 82, 82, 82,
 457, 451, 87, 87, 280, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 83,
 143, 83, 83, 83, 83, 83, 83, 86, 365, 86, 503, 518, 525, 131, 145, 146,
 88, 86, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 86, 86, 110, 529,
 110, 283, 530, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 131, 145, 146,
 540, 283, 539, 544, 545, 546, 547, 93, 93, 93, 93, 93, 93, 93, 93, 93,
 93, 88, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
 93, 93, 93, 93, 93, 93, 93, 95, ~0U, 95, 152, 152, 152, 152, 152, 152,
 152, 152, 152, 152, 150, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, ~0U,
 ~0U, ~0U, ~0U, 514, 132, 192, 95, 95, 95, 95, 95, 95, 130, 194, 130, 195,
 196, 95, 132, 95, 150, 95, 130, 95, 92, 95, 92, 92, 92, 92, 92, 92,
 92, 92, 92, 92, 132, 192, 95, 95, 95, 95, 95, 95, 130, 194, 130, 195,
 196, 95, 132, 95, 514, 95, 130, 95, 510, 95, 97, 97, 97, 97, 97, 97,
 97, 97, 97, 97, 506, ~0U, ~0U, ~0U, 198, 92, 199, 97, 97, 97, 97, 97,
 97, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, ~0U, 521, 510, ~0U, ~0U,
 ~0U, 200, 99, 99, 99, 99, 99, 99, 198, 506, 199, 97, 97, 97, 97, 97,
 97, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, 100, 100, 100, 100, 100, 100, 100, 100, 100,
 100, 200, 99, 99, 99, 99, 99, 99, 100, 100, 100, 100, 100, 100, 156, 156,
 156, 156, 156, 156, 156, 156, 156, 156, 521, ~0U, ~0U, ~0U, ~0U, 34, 34, 34,
 34, 34, 34, 34, 34, 34, 34, ~0U, 100, 100, 100, 100, 100, 100, 34, 34,
 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
 34, 34, 34, 34, 34, 34, 34, 34, ~0U, ~0U, ~0U, ~0U, 34, ~0U, 34, 34,
 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
 34, 34, 34, 34, 34, 34, 34, 34, 109, 160, 160, 160, 160, 160, 160, 160,
 160, 160, 160, ~0U, ~0U, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, ~0U,
 201, 149, 203, 204, ~0U, 206, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
 201, 149, 203, 204, 109, 206, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
 115, 29, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, ~0U, 115, 115, 115,
 115, 115, 115, 115, 115, 115, 115, 207, 213, 214, 215, 212, ~0U, 217, 218, 29,
 219, 211, 221, 222, 210, 153, 224, 29, 153, 153, 153, 153, 153, 153, 153, 153,
 153, 153, 29, 225, 228, 29, 230, 207, 213, 214, 215, 212, 115, 217, 218, 29,
 219, 211, 221, 222, 210, 157, 224, 29, 157, 157, 157, 157, 157, 157, 157, 157,
 157, 157, 29, 225, 228, 29, 230, 153, 161, 161, 161, 161, 161, 161, 161, 161,
 161, 161, 165, 231, 238, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, ~0U,
 ~0U, ~0U, 239, 240, ~0U, ~0U, ~0U, 157, 168, 168, 168, 168, 168, 168, 168, 168,
 168, 168, ~0U, 231, 238, 169, ~0U, 161, 169, 169, 169, 169, 169, 169, 169, 169,
 169, 169, 239, 240, 165, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 173,
 ~0U, ~0U, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 176, 176, 176, 176,
 176, 176, 176, 176, 176, 176, ~0U, 169, 177, 177, 177, 177, 177, 177, 177, 177,
 177, 177, 177, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, ~0U, ~0U, ~0U,
 ~0U, 173, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 184, 184, 184,
 184, 184, 184, 184, 184, 184, 184, 177, 185, ~0U, 185, 185, 185, 185, 185, 185,
 185, 185, 185, 185, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 237, 242,
 243, 181, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 209, 148, 209, 236,
 233, ~0U, 233, 245, 246, 148, 209, 247, 235, 185, 233, 249, 250, 251, 237, 242,
 243, 209, 233, 234, 253, 233, 254, ~0U, 27, 28, 256, 267, 209, 148, 209, 236,
 233, 189, 233, 245, 246, 148, 209, 247, 235, 268, 233, 249, 250, 251, 17, ~0U,
 269, 209, 233, 234, 253, 233, 254, 28, 27, 266, 256, 267, 271, 17, 265, 28,
 273, 274, 16, 276, 282, 286, 16, 287, 288, 268, 28, 289, 293, 28, 17, 16,
 269, 16, ~0U, 294, 16, ~0U, ~0U, 28, ~0U, 266, ~0U, ~0U, 271, 17, 265, 28,
 273, 274, 16, 276, 282, 286, 16, 287, 288, ~0U, 28, 289, 293, 28, 295, 16,
 277, 16, 277, 294, 16, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 279,
 ~0U, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 284, 292, 284, 295, 297,
 ~0U, 298, 299, 291, 301, 302, 15, 13, 305, 12, 308, 11, 10, 312, 311, 9,
 284, 13, 316, 315, 4, 9, 10, 320, 321, 322, ~0U, 284, 292, 284, 325, 297,
 279, 298, 299, 291, 301, 302, 15, 13, 305, 12, 308, 11, 10, 312, 311, 9,
 284, 13, 316, 315, 4, 9, 10, 320, 321, 322, 3, 326, 328, 329, 325, 331,
 334, 335, 336, 333, 3, 338, 339, 331, 340, 332, 343, 344, 345, 342, 347, 324,
 349, ~0U, 331, 353, 354, 355, 356, 332, 352, 358, 3, 326, 328, 329, 359, 331,
 334, 335, 336, 333, 3, 338, 339, 331, 340, 332, 343, 344, 345, 342, 347, 324,
 349, 351, 331, 353, 354, 355, 356, 332, 352, 358, 2, ~0U, ~0U, 364, 359, 351,
 364, 364, 364, 364, 364, 364, 364, 364, 364, 364, 381, 380, ~0U, ~0U, 377, 387,
 403, 351, 366, 402, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 372, 351,
 2, 387, 409, ~0U, 435, 434, 2, 441, 366, 2, 381, 380, 366, 377, 389, 387,
 403, 366, 475, 402, 409, 474, 501, 366, ~0U, 441, 389, ~0U, ~0U, ~0U, 372, 377,
 2, ~0U, 409, 366, 435, 434, 2, 441, 366, 2, ~0U, ~0U, 366, 377, 389, ~0U,
 ~0U, 366, 475, ~0U, ~0U, 474, 501, 366, 374, 374, 374, 374, 374, 374, 374, 374,
 374, 374, 376, 399, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 379, 379,
 379, 379, 379, 379, 379, 379, 379, 379, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, 500,
 448, 376, 399, ~0U, 431, ~0U, ~0U, 374, 386, 386, 386, 386, 386, 386, 386, 386,
 386, 386, 448, 376, 399, 373, 373, 373, 373, 373, 373, 373, 373, 373, 373, 500,
 448, 376, 399, 431, 390, 386, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
 ~0U, ~0U, ~0U, ~0U, 363, 431, 362, 386, 373, 396, 396, 396, 396, 396, 396, 396,
 396, 396, 396, 431, 373, 386, 419, 471, 398, 390, 398, 398, 398, 398, 398, 398,
 398, 398, 398, 398, 363, 390, 362, ~0U, 373, 401, 401, 401, 401, 401, 401, 401,
 401, 401, 401, ~0U, 481, 419, 471, 398, 396, 390, ~0U, 408, 408, 408, 408, 408,
 408, 408, 408, 408, 408, 520, 481, 419, 471, 398, 395, 395, 395, 395, 395, 395,
 395, 395, 395, 395, 481, 419, 471, 398, 408, 411, 411, 411, 411, 411, 411, 411,
 411, 411, 411, ~0U, ~0U, 520, ~0U, 488, ~0U, ~0U, 408, 412, 412, 412, 412, 412,
 412, 412, 412, 412, 412, 522, 524, 526, 408, 488, 522, ~0U, 411, 393, 393, 393,
 393, 393, 393, 393, 393, 393, 393, 488, 411, 371, 371, 371, 371, 371, 371, 371,
 371, 371, 371, ~0U, 459, 522, 524, 526, 453, ~0U, 522, 418, 411, 418, 418, 418,
 418, 418, 418, 418, 418, 418, 418, 422, 422, 422, 422, 422, 422, 422, 422, 422,
 422, 492, 453, 459, 527, 528, ~0U, 523, 371, 424, 418, 424, 424, 424, 424, 424,
 424, 424, 424, 424, 424, 459, ~0U, ~0U, 492, 453, ~0U, ~0U, 418, ~0U, ~0U, ~0U,
 ~0U, 492, 453, 459, 527, 528, 422, 523, 531, 532, 418, 533, 534, 361, 424, 428,
 428, 428, 428, 428, 428, 428, 428, 428, 428, 430, 424, 430, 430, 430, 430, 430,
 430, 430, 430, 430, 430, ~0U, ~0U, ~0U, 531, 532, ~0U, 533, 534, 361, 424, ~0U,
 ~0U, ~0U, ~0U, ~0U, ~0U, 536, ~0U, ~0U, 430, ~0U, ~0U, ~0U, ~0U, ~0U, 428, 433,
 433, 433, 433, 433, 433, 433, 433, 433, 433, ~0U, 430, 440, 440, 440, 440, 440,
 440, 440, 440, 440, 440, 536, ~0U, ~0U, 430, 427, 427, 427, 427, 427, 427, 427,
 427, 427, 427, ~0U, ~0U, ~0U, ~0U, ~0U, 440, 443, 443, 443, 443, 443, 443, 443,
 443, 443, 443, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, 440, 444, 444, 444, 444, 444,
 444, 444, 444, 444, 444, ~0U, ~0U, ~0U, 440, ~0U, ~0U, ~0U, 443, 425, 425, 425,
 425, 425, 425, 425, 425, 425, 425, ~0U, 443, 421, 421, 421, 421, 421, 421, 421,
 421, 421, 421, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, 443, 447, 447, 447,
 447, 447, 447, 447, 447, 447, 447, 370, 370, 370, 370, 370, 370, 370, 370, 370,
 370, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, 452, 447, 452, 452, 452, 452, 452,
 452, 452, 452, 452, 452, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, 447, ~0U, ~0U, ~0U,
 ~0U, ~0U, ~0U, 452, ~0U, ~0U, 370, ~0U, ~0U, ~0U, 447, 456, 456, 456, 456, 456,
 456, 456, 456, 456, 456, ~0U, ~0U, ~0U, ~0U, ~0U, 452, ~0U, ~0U, ~0U, ~0U, ~0U,
 ~0U, ~0U, 458, 452, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 462, 462,
 462, 462, 462, 462, 462, 462, 462, 462, ~0U, ~0U, 456, ~0U, ~0U, ~0U, ~0U, ~0U,
 464, 458, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, ~0U, ~0U, ~0U, ~0U,
 ~0U, ~0U, ~0U, 458, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, 462, ~0U, ~0U,
 ~0U, 458, ~0U, ~0U, ~0U, 464, 468, 468, 468, 468, 468, 468, 468, 468, 468, 468,
 470, 464, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, ~0U, ~0U, ~0U, ~0U,
 ~0U, ~0U, ~0U, ~0U, ~0U, 464, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, 470,
 ~0U, ~0U, ~0U, ~0U, ~0U, 468, 473, 473, 473, 473, 473, 473, 473, 473, 473, 473,
 ~0U, 470, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, ~0U, ~0U, ~0U, 470,
 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, ~0U, ~0U, ~0U, ~0U, ~0U, 480,
 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U,
 ~0U, 480, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, ~0U, ~0U, ~0U, 480,
 ~0U, ~0U, ~0U, 483, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, ~0U, 483,
 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U,
 ~0U, ~0U, ~0U, 483, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 455, 455,
 455, 455, 455, 455, 455, 455, 455, 455, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U,
 ~0U, 487, 491, 491, 491, 491, 491, 491, 491, 491, 491, 491, ~0U, ~0U, ~0U, ~0U,
 ~0U, ~0U, ~0U, 487, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, 491, ~0U, ~0U, ~0U, ~0U, ~0U,
 ~0U, 487, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, ~0U, ~0U, 1, ~0U,
 ~0U, 491, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, 491, 495, 495, 495, 495, 495,
 495, 495, 495, 495, 495, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 495,
 ~0U, ~0U, ~0U, 495, 1, ~0U, ~0U, ~0U, 495, ~0U, 1, ~0U, ~0U, 1, 495, 367,
 367, 367, 367, 367, 367, 367, 367, 367, 367, ~0U, 495, ~0U, ~0U, ~0U, ~0U, 495,
 ~0U, ~0U, ~0U, 495, 1, ~0U, ~0U, ~0U, 495, ~0U, 1, ~0U, ~0U, 1, 495, 504,
 504, 504, 504, 504, 504, 504, 504, 504, 504, 505, 505, 505, 505, 505, 505, 505,
 505, 505, 505, 505, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 509, 509,
 509, 509, 509, 509, 509, 509, 509, 509, 509, 512, 512, 512, 512, 512, 512, 512,
 512, 512, 512, ~0U, ~0U, ~0U, ~0U, 513, 505, 513, 513, 513, 513, 513, 513, 513,
 513, 513, 513, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 509, 517, 517,
 517, 517, 517, 517, 517, 517, 517, 517, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U,
 ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, 513, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U,
 ~0U, ~0U, ~0U, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 517, 538, 538,
 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538,
 538, 538, 538, 0
};

static yy_state_t yy_default[] = {
 549, 109, 109, 34, 34, 549, 549, 549, 549, 34, 34, 34, 34, 34, 549, 34,
 34, 34, 549, 549, 549, 549, 549, 549, 549, 549, 549, 34, 109, 109, 34, 34,
 34, 34, 549, 549, 39, 39, 39, 549, 549, 549, 549, 549, 549, 549, 42, 549,
 41, 549, 549, 549, 41, 549, 549, 41, 40, 549, 549, 549, 40, 40, 39, 39,
 549, 549, 549, 66, 66, 549, 69, 549, 71, 71, 549, 74, 74, 549, 549, 78,
 78, 39, 549, 549, 83, 83, 549, 86, 549, 88, 88, 549, 549, 549, 93, 549,
 549, 549, 93, 549, 549, 93, 92, 92, 34, 34, 34, 34, 34, 549, 549, 110,
 115, 115, 115, 549, 115, 115, 115, 34, 34, 109, 34, 109, 34, 34, 109, 34,
 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
 34, 34, 34, 34, 34, 34, 34, 109, 549, 549, 153, 153, 549, 549, 157, 157,
 549, 549, 161, 161, 549, 549, 165, 165, 549, 549, 169, 169, 549, 549, 173, 173,
 549, 549, 177, 177, 549, 549, 181, 181, 549, 549, 185, 185, 549, 549, 189, 189,
 34, 109, 34, 34, 34, 34, 34, 34, 34, 34, 109, 34, 34, 109, 34, 34,
 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
 34, 34, 34, 34, 34, 109, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
 34, 34, 549, 549, 549, 34, 34, 34, 34, 34, 34, 34, 34, 34, 109, 34,
 109, 34, 34, 109, 34, 549, 277, 549, 279, 279, 34, 34, 34, 34, 34, 34,
 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 549,
 34, 34, 34, 34, 34, 34, 34, 109, 34, 34, 34, 34, 34, 34, 34, 34,
 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 110,
 549, 549, 549, 549, 549, 549, 549, 549, 549, 34, 34, 34, 549, 364, 549, 549,
 366, 549, 549, 549, 373, 549, 549, 374, 549, 376, 376, 549, 549, 549, 549, 549,
 549, 549, 549, 386, 386, 373, 549, 549, 549, 549, 390, 549, 549, 396, 549, 398,
 398, 549, 549, 549, 549, 549, 549, 549, 549, 408, 408, 549, 549, 411, 549, 549,
 549, 371, 549, 418, 418, 549, 549, 422, 549, 549, 424, 549, 549, 428, 549, 430,
 430, 549, 549, 549, 549, 549, 549, 549, 549, 440, 440, 549, 549, 443, 549, 549,
 447, 447, 549, 370, 549, 452, 452, 549, 549, 456, 549, 458, 458, 549, 549, 462,
 549, 549, 464, 549, 549, 468, 549, 470, 470, 549, 549, 549, 549, 549, 549, 549,
 549, 480, 480, 549, 549, 483, 549, 549, 487, 487, 549, 549, 491, 491, 549, 549,
 549, 495, 549, 549, 549, 549, 549, 109, 549, 549, 505, 505, 549, 549, 509, 509,
 549, 549, 513, 513, 549, 549, 517, 517, 34, 109, 34, 34, 34, 34, 34, 34,
 34, 109, 34, 34, 34, 34, 34, 34, 34, 34, 549, 549, 549, 549, 549, 549,
 549, 549, 549, 549, 549, 0
};

static int yy_base[] = {
 0, 3563, 2615, 2507, 2483, 4051, 4051, 1329, 4051, 2464, 2472, 2457, 2458, 2466, 4051, 2453,
 2381, 2361, 4051, 1231, 1164, 4051, 4051, 4051, 4051, 4051, 4051, 2323, 2374, 2078, 1171, 4051,
 1152, 1159, 1901, 766, 774, 776, 760, 771, 967, 512, 256, 4051, 4051, 4051, 4051, 4051,
 4051, 734, 4051, 803, 4051, 826, 864, 4051, 4051, 1187, 4051, 1256, 4051, 4051, 794, 758,
 902, 723, 1279, 712, 4051, 892, 749, 1224, 427, 4051, 1289, 674, 4051, 748, 789, 703,
 4051, 770, 1337, 1360, 713, 4051, 1397, 1355, 1426, 795, 4051, 1311, 1770, 1511, 4051, 1733,
 4051, 1802, 4051, 1825, 1863, 4051, 769, 4051, 4051, 4051, 834, 787, 783, 1989, 1443, 843,
 828, 852, 826, 2077, 814, 810, 827, 1150, 1145, 4051, 1150, 4051, 1169, 1190, 790, 1184,
 1191, 803, 1738, 1380, 1723, 1232, 1246, 1252, 1242, 4051, 1322, 1241, 1269, 1301, 4051, 1340,
 4051, 1386, 1402, 4051, 2303, 1970, 1696, 876, 1722, 2104, 1201, 4051, 1886, 2136, 865, 4051,
 1977, 2152, 813, 4051, 2066, 2165, 1327, 4051, 2184, 2200, 1325, 4051, 2213, 2226, 1203, 4051,
 2236, 2248, 1324, 4051, 2259, 2274, 1323, 4051, 2285, 2298, 1199, 4051, 2308, 2322, 827, 4051,
 1728, 1196, 1740, 1729, 1740, 841, 1780, 1793, 1812, 1979, 903, 1968, 1983, 863, 1969, 2056,
 864, 2314, 2059, 2072, 2057, 2057, 2055, 2070, 4051, 2072, 2077, 2068, 4051, 2068, 2063, 4051,
 2066, 2094, 4051, 4051, 2080, 882, 2082, 2132, 1129, 2318, 2314, 2305, 2301, 2293, 2133, 2144,
 2159, 4051, 2290, 2299, 4051, 2318, 2323, 2315, 4051, 2316, 2314, 2329, 4051, 2320, 2337, 4051,
 2344, 4051, 4051, 4051, 4051, 4051, 4051, 4051, 4051, 2377, 2363, 2332, 2343, 2364, 4051, 2360,
 4051, 2383, 2373, 1281, 2367, 2453, 1204, 2465, 1349, 4051, 2373, 1410, 2457, 1138, 2385, 2382,
 2378, 2375, 4051, 2442, 2437, 2381, 2385, 2426, 4051, 2448, 2447, 2462, 4051, 2448, 2464, 4051,
 4051, 2452, 4051, 4051, 2456, 4051, 4051, 2474, 2473, 4051, 4051, 2479, 2470, 4051, 4051, 4051,
 2475, 2469, 2484, 4051, 2528, 2474, 2518, 1278, 2504, 2510, 1280, 2523, 2528, 2513, 2513, 2511,
 2526, 4051, 2528, 2533, 2524, 4051, 2527, 2523, 2521, 2536, 4051, 2522, 4051, 2532, 1342, 2571,
 2534, 2546, 2536, 2530, 2545, 4051, 2532, 2553, 4051, 2968, 2761, 2768, 2608, 1419, 2628, 3599,
 4051, 3538, 3175, 2921, 2603, 2757, 2696, 1283, 2708, 2624, 4051, 2718, 2584, 2583, 4051, 4051,
 4051, 4051, 2744, 2594, 4051, 2619, 2774, 4051, 4051, 2909, 4051, 2858, 2793, 1284, 2810, 2709,
 4051, 2825, 2592, 2589, 4051, 4051, 4051, 4051, 2843, 2613, 4051, 2873, 2891, 4051, 4051, 4051,
 4051, 1303, 2941, 2808, 4051, 3145, 2951, 1302, 2971, 3133, 4051, 3081, 3007, 1301, 3019, 2742,
 4051, 3055, 2610, 2609, 4051, 4051, 4051, 4051, 3067, 2618, 4051, 3097, 3115, 4051, 4051, 3165,
 2707, 4051, 4051, 1346, 3195, 2938, 4051, 3486, 3227, 1345, 3252, 2934, 4051, 3456, 3262, 1338,
 3282, 3444, 4051, 3392, 3318, 1304, 3330, 2809, 4051, 3366, 2626, 2623, 4051, 4051, 4051, 4051,
 3378, 2807, 4051, 3408, 3426, 4051, 4051, 3476, 2858, 4051, 4051, 3506, 2937, 4051, 4051, 3563,
 3573, 4051, 4051, 4051, 2700, 2627, 4051, 1431, 3631, 3641, 1802, 4051, 3652, 3662, 1790, 4051,
 3673, 3689, 1749, 4051, 3699, 3710, 1372, 4051, 2832, 1849, 2870, 2936, 2880, 1373, 2883, 2947,
 2924, 1452, 1395, 2980, 2976, 2973, 2968, 4051, 3024, 4051, 3795, 1389, 1458, 4051, 4051, 4051,
 1398, 1410, 1408, 1396, 4051, 4051
};



// MKS LEX prototype scanner code
// Copyright 1991 by Mortice Kern Systems Inc.
// All rights reserved.

// You can redefine YY_INTERACTIVE to be 0 to get a very slightly
// faster scanner:
#ifndef YY_INTERACTIVE
#define	YY_INTERACTIVE	1
#endif

// You can compile with -DYY_DEBUG to get a print trace of the scanner
#ifdef YY_DEBUG
#undef YY_DEBUG
#define YY_DEBUG(fmt,a1,a2)	fprintf(stderr,fmt,a1,a2)
#else
#define YY_DEBUG(fmt,a1,a2)
#endif

const MIN_NUM_STATES = 20;

// Do *NOT* redefine the following:
#define	BEGIN		yy_start =
#define	REJECT		goto yy_reject
#define	yymore()	goto yy_more


#include "stdafx.h"
#include <ctype.h>
#include "fc_todebug\fc_assert.h"
//#include "fc_todebugto_mem.h"
#include "st_scan.h"

#define TOKENBUFSIZE 256
#pragma warning (disable: 4068 4102 4244)

//foreward:
static void STS_IncPos (stl_scan *pScanner,int iIncOffset);



// Constructor for stl_scan. Set up tables
#pragma argsused
stl_scan::stl_scan(int sz, char* buf, char* sv, yy_state_t* states)
{
	mustfree = 0;
	if ((size = sz) < MIN_NUM_STATES
	  || (yytext = buf) == 0
	  || (state = states) == 0) {
		yyerror("Bad space for scanner!");
		exit(1);
	}
#ifdef YY_PRESERVE
	save = sv;
#endif
}
// Constructor for stl_scan. Set up tables
stl_scan::stl_scan(int sz)
{
	size = sz;
	yytext = new char[sz+1];	// text buffer
	state = new yy_state_t[sz+1];	// state buffer
#ifdef YY_PRESERVE
	save = new char[sz];	// saved yytext[]
	push = save + sz;
#endif
	if (yytext == NULL
#ifdef YY_PRESERVE
	  || save == NULL
#endif
	  || state == NULL) {
		yyerror("No space for scanner!");
		exit(1);
	}
	mustfree = 1;
	yy_end = 0;
	yy_start = 0;
	yy_lastc = YYNEWLINE;
	yyin = stdin;
	yyout = stdout;
	yylineno = 1;
	yyleng = 0;
}

// Descructor for stl_scan
stl_scan::~stl_scan()
{
	if (mustfree) {
		mustfree = 0;
		delete(yytext);
		delete(state);
#ifdef YY_PRESERVE
		delete(save);
#endif
	}
}

// Print error message, showing current line number
void
stl_scan::yyerror(char *fmt, ...)
{
	va_list va;

	va_start(va, fmt);
	if (yylineno)
		fprintf(stderr, "%d: ", yylineno);
	(void) vfprintf(stderr, fmt, va);
	fputc('\n', stderr);
	va_end(va);
}



// The actual lex scanner
// yy_sbuf[0:yyleng-1] contains the states corresponding to yytext.
// yytext[0:yyleng-1] contains the current token.
// yytext[yyleng:yy_end-1] contains pushed-back characters.
// When the user action routine is active,
// save contains yytext[yyleng], which is set to '\0'.
// Things are different when YY_PRESERVE is defined. 
int
stl_scan::yylex()
{
	int c, i, yybase;
	unsigned  yyst;		/* state */
	int yyfmin, yyfmax;	/* yy_la_act indices of final states */
	int yyoldi, yyoleng;	/* base i, yyleng before look-ahead */
	int yyeof;		/* 1 if eof has already been read */



#ifdef YYEXIT
	yyLexFatal = 0;
#endif
	yyeof = 0;
	i = yyleng;
	YY_SCANNER();

  yy_again:
	if ((yyleng = i) > 0) {
		yy_lastc = yytext[i-1];	// determine previous char
		while (i > 0)	//	// scan previously token
			if (yytext[--i] == YYNEWLINE)	// fix yylineno
				yylineno++;
	}
	yy_end -= yyleng;		// adjust pushback
	if (yy_end > 0)
		memmove(yytext, yytext+yyleng, (size_t) yy_end);
	i = 0;

  yy_contin:
	yyoldi = i;

	/* run the state machine until it jams */
	yyst = yy_begin[yy_start + ((yy_lastc == YYNEWLINE) ? 1 : 0)];
	state[i] = (yy_state_t) yyst;
	do {
		YY_DEBUG("<state %d, i = %d>\n", yyst, i);
		if (i >= size) {
			YY_FATAL("Token buffer overflow");
#ifdef YYEXIT
			if (yyLexFatal)
				return -2;
#endif
		}	/* endif */

		/* get input char */
		if (i < yy_end)
			c = yytext[i];		/* get pushback char */
		else if (!yyeof && (c = yygetc()) != EOF) {
			yy_end = i+1;
			yytext[i] = c;
		} else /* c == EOF */ {
			c = EOF;		/* just to make sure... */
			if (i == yyoldi) {	/* no token */
				yyeof = 0;
				if (yywrap())
					return 0;
				else
					goto yy_again;
			} else {
				yyeof = 1;	/* don't re-read EOF */
				break;
			}
		}
		YY_DEBUG("<input %d = 0x%02x>\n", c, c);

		/* look up next state */
		while ((yybase = yy_base[yyst]+(unsigned char)c) > yy_nxtmax
		    || yy_check[yybase] != (yy_state_t) yyst) {
			if (yyst == yy_endst)
				goto yy_jammed;
			yyst = yy_default[yyst];
		}
		yyst = yy_next[yybase];
	  yy_jammed: ;
	     state[++i] = (yy_state_t) yyst;
	} while (!(yyst == yy_endst || YY_INTERACTIVE &&
		yy_base[yyst] > yy_nxtmax && yy_default[yyst] == yy_endst));

	YY_DEBUG("<stopped %d, i = %d>\n", yyst, i);
	if (yyst != yy_endst)
		++i;

  yy_search:
	/* search backward for a final state */
	while (--i > yyoldi) {
		yyst = state[i];
		if ((yyfmin = yy_final[yyst]) < (yyfmax = yy_final[yyst+1]))
			goto yy_found;	/* found final state(s) */
	}
	/* no match, default action */
	i = yyoldi + 1;
	output(yytext[yyoldi]);
	goto yy_again;

  yy_found:
	YY_DEBUG("<final state %d, i = %d>\n", yyst, i);
	yyoleng = i;		/* save length for REJECT */
	
	// pushback look-ahead RHS, handling trailing context
	if ((c = (int)(yy_la_act[yyfmin]>>9) - 1) >= 0) {
		unsigned char *bv = yy_look + c*YY_LA_SIZE;
		static unsigned char bits [8] = {
			1<<0, 1<<1, 1<<2, 1<<3, 1<<4, 1<<5, 1<<6, 1<<7
		};
		while (1) {
			if (--i < yyoldi) {	/* no / */
				i = yyoleng;
				break;
			}
			yyst = state[i];
			if (bv[(unsigned)yyst/8] & bits[(unsigned)yyst%8])
				break;
		}
	}

	/* perform action */
	yyleng = i;
	YY_USER();
	switch (yy_la_act[yyfmin] & 0777) {
	case 0:
	{ STS_IncPos (this, yyleng); return (STS_RANGES_NUMBER); }
	break;
	case 1:
	{ STS_IncPos (this, yyleng); return (STS_DOTDOT);        }
	break;
	case 2:
	{ STS_IncPos (this, yyleng); return (',');               }
	break;
	case 3:
	{ return (STS_SYNTAX_ERROR); }
	break;
	case 4:
	{ STS_IncPos(this,yyleng); return STS_TRUE_LITERAL;}
	break;
	case 5:
	{ STS_IncPos(this,yyleng); return STS_TRUE_LITERAL;}
	break;
	case 6:
	{ STS_IncPos(this,yyleng); return STS_FALSE_LITERAL;}
	break;
	case 7:
	{ STS_IncPos(this,yyleng); return STS_FALSE_LITERAL;}
	break;
	case 8:
	{ STS_IncPos(this,yyleng); return '+';}
	break;
	case 9:
	{ STS_IncPos(this,yyleng); return '-';}
	break;
	case 10:
	{ STS_IncPos(this,yyleng); return '*';}
	break;
	case 11:
	{ STS_IncPos(this,yyleng); return '/';}
	break;
	case 12:
	{ STS_IncPos(this,yyleng); return STS_MOD;}
	break;
	case 13:
	{ STS_IncPos(this,yyleng); return STS_POW;}
	break;
	case 14:
	{ STS_IncPos(this,yyleng); return STS_AND;}
	break;
	case 15:
	{ STS_IncPos(this,yyleng); return STS_OR;}
	break;
	case 16:
	{ STS_IncPos(this,yyleng); return STS_XOR;}
	break;
	case 17:
	{ STS_IncPos(this,yyleng); return STS_NOT;}
	break;
	case 18:
	{ STS_IncPos(this,yyleng); return '&';}
	break;
	case 19:
	{ STS_IncPos(this,yyleng); return STS_EQ;}
	break;
	case 20:
	{ STS_IncPos(this,yyleng); return STS_NE;}
	break;
	case 21:
	{ STS_IncPos(this,yyleng); return STS_LT;}
	break;
	case 22:
	{ STS_IncPos(this,yyleng); return STS_LE;}
	break;
	case 23:
	{ STS_IncPos(this,yyleng); return STS_GT;}
	break;
	case 24:
	{ STS_IncPos(this,yyleng); return STS_GE;}
	break;
	case 25:
	{ STS_IncPos(this,yyleng); return STS_EQ_SHORT;}
	break;
	case 26:
	{ STS_IncPos(this,yyleng); return STS_NE_SHORT;}
	break;
	case 27:
	{ STS_IncPos(this,yyleng); return STS_LT_SHORT;}
	break;
	case 28:
	{ STS_IncPos(this,yyleng); return STS_LE_SHORT;}
	break;
	case 29:
	{ STS_IncPos(this,yyleng); return STS_GT_SHORT;}
	break;
	case 30:
	{ STS_IncPos(this,yyleng); return STS_GE_SHORT;}
	break;
	case 31:
	{ STS_IncPos(this,yyleng); return '.';}
	break;
	case 32:
	{ STS_IncPos(this,yyleng); return ',';}
	break;
	case 33:
	{ STS_IncPos(this,yyleng); return '[';}
	break;
	case 34:
	{ STS_IncPos(this,yyleng); return ']';}
	break;
	case 35:
	{ STS_IncPos(this,yyleng); return '(';}
	break;
	case 36:
	{ STS_IncPos(this,yyleng); return ')';}
	break;
	case 37:
	{ STS_IncPos(this,yyleng); return (STS_ADD);}
	break;
	case 38:
	{ STS_IncPos(this,yyleng); return (STS_SUB);}
	break;
	case 39:
	{ STS_IncPos(this,yyleng); return (STS_MUL);}
	break;
	case 40:
	{ STS_IncPos(this,yyleng); return (STS_DIV);}
	break;
	case 41:
	{ STS_IncPos(this,yyleng); return (STS_BYTE_TO_DINT); }
	break;
	case 42:
	{ STS_IncPos(this,yyleng); return (STS_BYTE_TO_DWORD); }
	break;
	case 43:
	{ STS_IncPos(this,yyleng); return (STS_BYTE_TO_LREAL); }
	break;
	case 44:
	{ STS_IncPos(this,yyleng); return (STS_BYTE_TO_WORD); }
	break;
	case 45:
	{ STS_IncPos(this,yyleng); return (STS_DINT_TO_BYTE); }
	break;
	case 46:
	{ STS_IncPos(this,yyleng); return (STS_DINT_TO_DWORD); }
	break;
	case 47:
	{ STS_IncPos(this,yyleng); return (STS_DINT_TO_LREAL); }
	break;
	case 48:
	{ STS_IncPos(this,yyleng); return (STS_DINT_TO_TIME); }
	break;
	case 49:
	{ STS_IncPos(this,yyleng); return (STS_DINT_TO_WORD); }
	break;
	case 50:
	{ STS_IncPos(this,yyleng); return (STS_DWORD_TO_BYTE); }
	break;
	case 51:
	{ STS_IncPos(this,yyleng); return (STS_DWORD_TO_DINT); }
	break;
	case 52:
	{ STS_IncPos(this,yyleng); return (STS_DWORD_TO_LREAL); }
	break;
	case 53:
	{ STS_IncPos(this,yyleng); return (STS_DWORD_TO_WORD); }
	break;
	case 54:
	{ STS_IncPos(this,yyleng); return (STS_LREAL_TO_BYTE); }
	break;
	case 55:
	{ STS_IncPos(this,yyleng); return (STS_LREAL_TO_DINT); }
	break;
	case 56:
	{ STS_IncPos(this,yyleng); return (STS_LREAL_TO_DWORD); }
	break;
	case 57:
	{ STS_IncPos(this,yyleng); return (STS_LREAL_TO_WORD); }
	break;
	case 58:
	{ STS_IncPos(this,yyleng); return (STS_TIME_TO_DINT); }
	break;
	case 59:
	{ STS_IncPos(this,yyleng); return (STS_WORD_TO_BYTE); }
	break;
	case 60:
	{ STS_IncPos(this,yyleng); return (STS_WORD_TO_DINT); }
	break;
	case 61:
	{ STS_IncPos(this,yyleng); return (STS_WORD_TO_DWORD); }
	break;
	case 62:
	{ STS_IncPos(this,yyleng); return (STS_WORD_TO_LREAL); }
	break;
	case 63:
	{ STS_IncPos(this,yyleng); return STS_IDENTIFIER; }
	break;
	case 64:
	{ STS_IncPos(this,yyleng); return STS_DIRECT_VARIABLE;}
	break;
	case 65:
	{ STS_IncPos(this,yyleng); return STS_INT_LITERAL;}
	break;
	case 66:
	{ STS_IncPos(this,yyleng); return STS_FLOAT_LITERAL;}
	break;
	case 67:
	{ STS_IncPos(this,yyleng); return STS_STRING_LITERAL;}
	break;
	case 68:
	{ STS_IncPos(this,yyleng); return STS_WSTRING_LITERAL;}
	break;
	case 69:
	{ STS_IncPos(this,yyleng); return STS_DATE_LITERAL;}
	break;
	case 70:
	{ STS_IncPos(this,yyleng); return STS_DT_LITERAL;}
	break;
	case 71:
	{ STS_IncPos(this,yyleng); return STS_TOD_LITERAL;}
	break;
	case 72:
	{ STS_IncPos(this,yyleng); return STS_TIME_LITERAL;}
	break;
	case 73:
	{ STS_IncPos(this,yyleng); return STS_MACHINE_ADDRESS;}
	break;
	case 74:
	{ STS_IncPos(this,1); /* white space */}
	break;
	case 75:
	{ STS_IncPos(this,2); /* white space */}
	break;
	case 76:
	return STS_SYNTAX_ERROR;
	break;


	}
	YY_SCANNER();
	i = yyleng;
	goto yy_again;			/* action fell though */

  yy_reject:
	YY_SCANNER();
	i = yyoleng;			/* restore original yytext */
	if (++yyfmin < yyfmax)
		goto yy_found;		/* another final state, same length */
	else
		goto yy_search;		/* try shorter yytext */

  yy_more:
	YY_SCANNER();
	i = yyleng;
	if (i > 0)
		yy_lastc = yytext[i-1];
	goto yy_contin;
}

/*
 * user callable input/unput functions.
 */
void
stl_scan::yy_reset()
{
	YY_INIT();
	yylineno = 1;
}
/* get input char with pushback */
int
stl_scan::input()
{
	int c;
#ifndef YY_PRESERVE
	if (yy_end > yyleng) {
		yy_end--;
		memmove(yytext+yyleng, yytext+yyleng+1,
			(size_t) (yy_end-yyleng));
		c = save;
		YY_USER();
#else
	if (push < save+size) {
		c = *push++;
#endif
	} else
		c = yygetc();
	yy_lastc = c;
	if (c == YYNEWLINE)
		yylineno++;
	return c;
}

/* pushback char */
int
stl_scan::unput(int c)
{
#ifndef YY_PRESERVE
	if (yy_end >= size) {
		YY_FATAL("Push-back buffer overflow");
	} else {
		if (yy_end > yyleng) {
			yytext[yyleng] = save;
			memmove(yytext+yyleng+1, yytext+yyleng,
				(size_t) (yy_end-yyleng));
			yytext[yyleng] = 0;
		}
		yy_end++;
		save = c;
#else
	if (push <= save) {
		YY_FATAL("Push-back buffer overflow");
	} else {
		*--push = c;
#endif
		if (c == YYNEWLINE)
			yylineno--;
	}	/* endif */
	return c;
}



class sts_scanner : public stl_scan
{
public:
    LPCTSTR m_pszInput;     //string buffer as input
    unsigned long m_ulLen;  //length of the buffer in bytes
    unsigned long m_ulRead; //current read position
	LONG m_lColumn;         //column
    LONG m_lOffset;         //absolute file offset position
	TCHAR m_chLast;		    //last character

    sts_scanner() : stl_scan(TOKENBUFSIZE)
    { 
        m_lColumn = 0L;
        m_chLast = 0;
        m_lOffset = 0L;
        m_pszInput = NULL;
        m_ulLen = 0L;
        m_ulRead = 0L;
	}
    void setStartState(int i){this->yy_start = i;}
	virtual int yygetc();
	virtual void yyerror(char *fmt, ...);
};

void sts_scanner::yyerror(char *fmt, ...)
{
	FC_DEBUGPRINT1(_T("CEPARSE> %d: Token buffer overflow"),yylineno);
}

sts_scanner::yygetc()
{
	int ch;

    if(m_pszInput) {             //##d-1618 cast unsigned!  
        ch = (m_ulRead<m_ulLen ? (unsigned char)m_pszInput[m_ulRead++] : EOF);

        if(ch == _T('\r')) { //skip the '\r'
            ch = yygetc();            
        }
    }
    else {
        ch = stl_scan::yygetc();
    }

	if(m_chLast == YYNEWLINE) {
		m_lColumn = 0L;
	}
	m_lColumn++;

	m_chLast = ch;
	return ch;		
}

 
sts_scanner *STS_CreateScanner ()
{
    sts_scanner *pScanner;

    pScanner = new sts_scanner;
    assert (pScanner != NULL);
    return pScanner;
}

void STS_DeleteScanner (sts_scanner *pScanner)
{
    delete (pScanner);
}

LONG STS_Column (const sts_scanner *pScanner)
{
    return (pScanner->m_lColumn);
}

LONG STS_GetOffset (const sts_scanner *pScanner)
{
    return (pScanner->m_lOffset);
}

LONG STS_GetStartOffset (const sts_scanner *pScanner)
{
    return (pScanner->m_lOffset - pScanner->yyleng);
}

void STS_IncPos (stl_scan *pScanner, int iIncOffset)
{
    sts_scanner *psc;
    
    psc = (sts_scanner *)pScanner;
    psc->m_lOffset += iIncOffset;
}

void STS_SetInputString (sts_scanner *pScanner, const TCHAR *pszInput, unsigned long ulLen)
{
    assert (pszInput != NULL);

    pScanner->m_pszInput = pszInput;
    pScanner->m_ulLen = ulLen;
}

int STS_NextToken (sts_scanner *pScanner, const char **pszToken)
{
	int iToken;
    
    iToken = pScanner->yylex ();
	*pszToken = pScanner->yytext;
	return (iToken);
}

int  STS_SetScannerMode(sts_scanner *pScanner, STS_ScannerMode mode)
{
    switch (mode)
    {
    case STS_EXPRESSION_SYNTAX:
        pScanner->setStartState(0);
        break;

    case STS_RANGES_SYNTAX:
        pScanner->setStartState (RANGES);
        break;

    default:
        return (0);
    };

    return (1);
}

/* end of lex file */
/*END yyreplace.pl: file stl.cpp~ */
