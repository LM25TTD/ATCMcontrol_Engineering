/*H>> $Header: /4CReleased/V2.20.00/COM/softing/fc/inc/cedl.idl 1     28.02.07 19:01 Ln $
 *----------------------------------------------------------------------------*
 *
 * =FILENAME            $Workfile: cedl.idl $
 *                      $Logfile: /4CReleased/V2.20.00/COM/softing/fc/inc/cedl.idl $
 *
 * =PROJECT             CAK1020 ATCMControlV2.0
 *
 * =SWKE                4CPCTargetAddOn
 *
 * =COMPONENT           CEDL (Downloader)
 *
 * =CURRENT      $Date: 28.02.07 19:01 $
 *               $Revision: 1 $
 *
 * =REFERENCES
 *
 *----------------------------------------------------------------------------*
 *





 *==
 *----------------------------------------------------------------------------*
 * =DESCRIPTION
 *    @DESCRIPTION@
 *== Declares the standard downloader interfaces for access to the downloader
 *== The downloader itself is target type specific. Hence the interfaces are
 *== declared here but the IDL file has to be imported within the IDL file of
 *== the target type specific downloader.
 *----------------------------------------------------------------------------*
 * =MODIFICATION
 *  28.03.2001  SU      File created
 *  see history at end of file !
 *==
 *******************************************************************************
H<<*/

//------------------------------------------------------------------*
/**
 * @file cedl.idl IDL file for integration of target type specific 
 * downloader components into 4CE.<br>
 * <b>Usage:</b><br> contains <b>NO</b> coclass, create your own IDL for each downloader
 * and insert <b>import "cedl.idl";</b> in the library section, before you 
 * actually define your coclass.
 * 
*/
import "oaidl.idl";
import "ocidl.idl";

/**
 * type CEDL_DOWNLD_TYPE - enumeration CEDL_DOWNLD_TYPE for the differem download 
 * opertions.
 *
*/
typedef enum
{
    /** download all, no incremental download*/
	CEDL_DOWNLD_ALL,
    /** download only changed domains - incremental download*/
	CEDL_DOWNLD_CHANGES,
    /**selective download - download domains to a target can be selected*/
    CEDL_DOWNLD_SELECT,
    /**invalid flag */
    CEDL_DOWNLD_INVALID = -1
}CEDL_DOWNLD_TYPE;

/**
 * type CEDL_DOWNLD_STATE - enumeration CEDL_DOWNLD_STATE for change notification
 * with IDLEvents::Download_State(). The state of the current download operation
 * is indicated with this enumeration.
*/
typedef enum
{
    /**download completed*/
	DOWNLD_READY,
    /**download aborted*/
	DOWNLD_ABORTED,
    /**download transfer of domain*/	
    DOWNLD_TRANSFER,
    /**download error*/
	DOWNLD_ERROR,
    /**connection interrupted*/
	DOWNLD_INTR,
    /**Upload*/
	DOWNLD_UPLOAD,
    /**delete of domain*/	
    DOWNLD_DEL,
    /**New project detected*/	
    DOWNLD_NEW_PROJECT,
    /**Changed project detected*/
    DOWNLD_CHANGED_PROJECT,
    /** Download list ready - OnDownloadState fires this state if all domains have been compared*/
    DOWNLD_LIST_READY
}CEDL_DOWNLD_STATE;

/**
 * type CEDL_DOWNLD_OPTIONS - enumeration CEDL_DOWNLD_OPTIONS for  
 * download options with IDL::DownloadTarget().
*/
typedef enum 
{
    /** no options */
    DOWNLD_NO_OPTIONS = 0,
    /** flash after commit online change */
    DOWNLD_FLASH = 0x01,
    /** flash only */
    DOWNLD_FLASH_ONLY = 0x02,
    /** do not start any task regardless if autostart is true or false */
    DOWNLD_NOSTART = 0x80

}CEDL_DOWNLD_OPTIONS;

//----  ICEDL Interface:    -----------------------------------------------*
	[
		object,
		uuid(1FB5CC57-3D6E-4832-9878-8D98F9CFAA58),
		dual,
		oleautomation,
		helpstring("4C_20: Standard downloader interface"),
		pointer_default(unique)
	]
    //------------------------------------------------------------------*
    /**
     *  interface IDL - Standard downloader interface. Used to perform
     *  download/upload with a target. The target will be identified by
     *  a target name.
    */
	interface IDL : IDispatch
	{
        //------------------------------------------------------------------*
        /**
         * Initializes downloader with compile data. The path to the compiled
         * files and the loader.list file generated by 4CCG will be passed
         * with this method. The loader.list file is used to identify all the
         * domains resp. files that have to be downloaded. The target name will
         * be used to identify uniquely one target instance. The method initializes
         * the downloader and opens the downloader database.
         *
         * @param           sTargetName - Name of target instance. Shall not be NULL.
         * @param           bSilent - true: no message boxes used for command line.
         *                  false - message boxes are displayed.
         * @return          HRESULT - E_CE_DL_NOGENPATH - Incomplete build ? Gen path
         *                  does not exist.<br>
         *                  E_CE_DL_FILE_ERROR - file error e.g. loader.list file not
         *                  found or downloader database could not be copied.<br>
         *                  E_* - Database error during database open operation.<br>
         *                  E_OUTOFMEMORY - out of memory situation<br>
         *                  E_FAIL - internal error.<br>
         *                  E_POINTER - Arguments sTargetName or sGenPath are NULL.<br>
         *                  S_OK - success.
         * @see             Exit()             
        */
		[id(1), helpstring("Initialize downloader, bSilent=true: no message boxes used for command line")]
			HRESULT Init([in] BSTR sTargetName, [in] BSTR sGenPath, [in] BOOL bSilent);
        //------------------------------------------------------------------*
        /**
         * Deinitializes the downloader and closes the downloader database. Detaches
         * the commissioning session (connection) passed with Attach(). Any methods 
         * called on the interfaces IDL,IDLProperties,IDLEx will fail after Exit()
         * has been called (except Init()).
         *
         * @return          HRESULT - S_OK - success.
         * @see             Init()
        */
		[id(2), helpstring("Exit downloader")]
			HRESULT Exit();

        //------------------------------------------------------------------*
        /**
         * Starts the asynchronous download process. The method returns immediately
         * after the download process has been initiated. Call this method to
         * initiate a full download or incremental download operation. A commissioning
         * session (connection) has to be attached prior to calling this method by 
         * calling Attach().
         *
         * @param       sUser - BSTR indicating the user name. Shall not be NULL.
         * @param       sPassWord - BSTR indicating the password. Shall not be NULL.
         * @param       Type- download type. Shall be enumeration value CEDL_DOWNLD_ALL
         *              for a full download or CEDL_DOWNLD_CHANGES for a incremental
         *              download. Other values are not allowed and lead to error code
         *              E_INVALIDARG.
         * @param       options - download options according to the enumeration 
         *              CEDL_DOWNLD_OPTIONS.
         *
         * @return      HRESULT - S_OK - success<br>
         *              E_INVALIDARG - Invalid argument, for example if the Type
         *              parameter is not CEDL_DOWNLD_ALL, CEDL_DOWNLD_CHANGES.<br>
         *              E_POINTER - Arguments sUser or sPassWord are NULL.<br>
         *              E_CE_DL_NOT_INITED - downloader not initialized. Call Init()
         *              prior to calling this method.<br>
         *              E_CE_DL_PENDING - there is already a download pending with
         *              this target specific downloader.<br>
         *              E_OUTOFMEMORY - out of memory situation.<br>
         *              E_CE_DL_STATION_NOT_CONN - Commissioning session has not been
         *              attached or is not connected exclusively. There has to be a
         *              commissioning session attached with an established connection 
         *              prior to calling this method.<br>
         *              E_* - CSC Online errors are also possible.
         *              
         * @see         Init(),Attach()
        */
		[id(3), helpstring("Start download")]
			HRESULT DownloadTarget([in] BSTR sUser, [in] BSTR sPassWord,[in] CEDL_DOWNLD_TYPE Type,[in] CEDL_DOWNLD_OPTIONS options);

        //---------------------------------------------------------------------------*
        /**
         * Aborts a pending download.
         *
         * @return      E_CE_DL_NOT_INITED - downloader not initialized. Call Init()
         *              prior to calling this method.<br>
         *              E_CE_DL_PENDING - there is already a download pending with
         *              this target specific downloader.<br>
         *              E_OUTOFMEMORY - out of memory situation.<br>
         * @see         Init()             
        */
		[id(4), helpstring("Abort pending download")]
			HRESULT Abort();

        //------------------------------------------------------------------*
        /**
         * Attaches a commissioning session instance from CSC Online Control
         * to the downloader. The session should have and exclusive connection
         * established prior to calling this method. Always call this method
         * prior to calling DownloadTarget()
         *
         * @param       pUnk - IUnknown pointer referencing the commissioning
         *              session. Shall not be NULL.
         * @return      E_CE_DL_NOT_INITED - downloader not initialized. Call Init()
         *              prior to calling this method.<br>
         *              E_OUTOFMEMORY - out of memory situation.<br>
         *              E_POINTER - Invalid IUnknown reference passed.
         *              E_NOINTERFACE - One of the interfaces needed for download
         *              operation is not supplied.
         * @see         DownloadTarget(),Init(), Detach()
        */
		[id(5), helpstring("Attach commissioning session to downloader")]
			HRESULT Attach([in] LPUNKNOWN pUnk);

        //------------------------------------------------------------------*
        /**
         * Detaches the commissioning session (if any) attached with method
         * Attach().
         *
         * @param           
         * @return      E_CE_DL_NOT_INITED - downloader not initialized. Call Init()
         *              prior to calling this method.<br>
         *              E_OUTOFMEMORY - out of memory situation.<br>
         * @see         Attach(), Init()
        */
		[id(6), helpstring("detach commissioning session from downloader")]
			HRESULT Detach();
	};

	[
		object,
		uuid(38CB2A30-5BD4-47c7-BBA8-55E19744CEAC),
		dual,
		oleautomation,
		helpstring("4C_20: Downloader extended interface"),
		pointer_default(unique)
	]
    //------------------------------------------------------------------*
    /**
     *  interface IDLEx - Downloader interface for visual download. 
     *  with dialog. May not be implemented by all downloaders.
    */
    interface IDLEx : IDispatch
    {
        //------------------------------------------------------------------*
        /**
         * Visual download operation. The method may be supplied by downloader
         * COM objects that support a visual selective download operation. The
         * method may be used to select the download domains from a list. Usually
         * the method shall open a dialog box (modal or non-modal) displaying all
         * domains to download with the actual state. This enables the user to
         * specifically select the domains to download or delete. Call Init() and
         * Attach() prior to calling this method.
         *
         * @param       lHWND - window handle of parent window. May be NULL.
         * @param       sUser - BSTR indicating the user name. Shall not be NULL.
         * @return      E_CE_DL_NOT_INITED - downloader not initialized. Call Init()
         *              prior to calling this method.<br>
         *              E_OUTOFMEMORY - out of memory situation.<br>
         * @see         Init().
        */
		[id(1), helpstring("Selective download with dialog")]
			HRESULT DownloadSelect([in] long lHWND, [in] BSTR sUser);
		[id(2), helpstring("Show download state for target")]
			HRESULT ShowDownloadState([in] long lHWND);
    }

//----  IDLProperties interface    -----------------------------------------------*
	[
		object,
		uuid(C426A8AB-CC4F-40ac-85C6-2A4D38D37F16),
		dual,
		oleautomation,
		helpstring("4C_20: Downloader properties interface"),
		pointer_default(unique)
	]
    //------------------------------------------------------------------*
    /**
     *  interface IDLProperties - Interface to obtain properties of the
     *  downloader with the actual initialization. The target will be identified by
     *  a target instance name.
     *  @see    IDL::Init()
    */
	interface IDLProperties : IDispatch
	{
        //------------------------------------------------------------------*
        /**
         * Retrieves the download version and project name of the current target.
         * The downloader will be initialized with the target instance name and
         * the path to the 4CCG generated files. Hence every downloader instance
         * comprises exactly one target instance. The target will be identified
         * by the target instance name.
         *
         * @param           psVersion - reference to a BSTR receiving the 
         *                  download version. In case of an error the referenced
         *                  version string is set to NULL. Free the returned
         *                  BSTR by calling ::SysFreeString().
         * @param           psProjectName - reference to a BSTR receiving the 
         *                  project name. In case of an error the referenced
         *                  project name string is set to NULL. Free the returned
         *                  BSTR by calling ::SysFreeString().
         * @return          HRESULT - E_INVALIDARG if psVersion or psProjectName
         *                  are set to NULL.<br>
         *                  E_CE_DL_NOT_INITED - downloader not initialized. Call
         *                  IDL::Init() prior to calling this function.
         *                  E_OUTOFMEMORY - out of memory.
         * @see             IDL::Init()
        */
		[id(1), helpstring("get the download version and project name of the target")] 
			HRESULT GetTargetDLVersion([out]BSTR* psVersion, [out]BSTR* psProjectName);

        //------------------------------------------------------------------*
        /**
         * Retrieves the connection address of the current target set with 
         * Init().
         * The downloader will be initialized with the target instance name and
         * the path to the 4CCG generated files. Hence every downloader instance
         * comprises exactly one target instance. 
         *
         * @param           psAddress - reference to a BSTR receiving the 
         *                  connection address of the target . In case of an error 
         *                  the referenced address is set to NULL. Free the returned
         *                  BSTR by calling ::SysFreeString().
         * @return          HRESULT - E_INVALIDARG if psAddress are set to NULL.<br>
         *                  E_CE_DL_NOT_INITED - downloader not initialized. Call
         *                  IDL::Init() prior to calling this function.
         *                  E_OUTOFMEMORY - out of memory.
         * @see             IDL::Init()
        */
        [id(2), propget, helpstring("get connection address of the target")]
            HRESULT Address([out]BSTR* psAddress);
	};


//----  IDLEvents Interface:    -----------------------------------------------*
    [
        uuid(94CD2863-6EE9-45ea-910E-CCA4660A11AB),
        dual,
        oleautomation,
        helpstring("4C_20: outgoing event interface of standard downloader")
    ]
    //------------------------------------------------------------------*
    /**
     *  interface IDLEvents - outgoing event interface of the standard
     *  downloader. Implemented as connection point interface. Users have
     *  to use connection point mechanisms to advise a sink object.
     *  @see
    */
    interface IDLEvents : IDispatch
    {
        //------------------------------------------------------------------*
        /**
         * Will be fired by the downloader to indicate certain states. Not all
         * arguments will be set with all states. Hence with certain download
         * states argument sDomain may be NULL or fPercentage may not reflect
         * a correct value. The different states are defined with the enumeration
         * type CEDL_DOWNLD_STATE.
         *
         * @param       sTarget - name of the target instance. Always set.
         * @param       sDomain - name of a domain transferred or deleted. Only
         *              valid with the states DOWNLD_DEL,DOWNLD_TRANSFER,
         *              DOWNLD_UPLOAD.
         * @param       fPercentage - percentage (%) of transfer process. Only
         *              valid with the states DOWNLD_DEL,DOWNLD_TRANSFER,
         *              DOWNLD_UPLOAD.
         * @return      Shall always be S_OK.    
         * @see         type CEDL_DOWNLD_STATE    
        */
        [id(1), helpstring("OnDownloadState")] 
			HRESULT OnDownloadState(BSTR sTarget, BSTR sDomain, float fPercentage,CEDL_DOWNLD_STATE State);

        //------------------------------------------------------------------*
        /**
         * Fired by the downloader if an error during download operation
         * occurred.
         *
         * @param       sTarget - name of the target instance.
         * @param       hr - HRESULT error code of the error.
         * @param       sDescr - description string of the error for display.
         * @return      Shall always be S_OK.    
        */
		[id(2), helpstring("Error")] 
			HRESULT OnDownloadError(BSTR sTarget, HRESULT hr, BSTR sDescr);
    };

[
	uuid(699FE751-6AA8-49be-828B-836A82F11C85),
	version(2.0),
	helpstring("4C_20: Standard Downloader type library")
]
library CEDLLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");
    //reference all standard downloader interfaces here
    interface IDL;
    interface IDLEx;
    interface IDLEvents;
    interface IDLProperties;

};



/*
 *----------------------------------------------------------------------------*
 *  $History: cedl.idl $
 * 
 * *****************  Version 1  *****************
 * User: Ln           Date: 28.02.07   Time: 19:01
 * Created in $/4CReleased/V2.20.00/COM/softing/fc/inc
 * 
 * *****************  Version 2  *****************
 * User: Sis          Date: 24.10.03   Time: 12:04
 * Updated in $/4Control/COM/softing/fc/inc
 * KSO_UPDATE_FLASH
 * 
 * *****************  Version 1  *****************
 * User: Ln           Date: 28.08.03   Time: 16:34
 * Created in $/4Control/COM/softing/fc/inc
 * 
 * *****************  Version 12  *****************
 * User: Ef           Date: 4.07.02    Time: 21:36
 * Updated in $/4Control/COM/softing/fc/inc
 * new option "nostart"
 * 
 * *****************  Version 11  *****************
 * User: Su           Date: 17.10.01   Time: 10:09
 * Updated in $/4Control/COM/softing/fc/inc
 * Added download options (for flash).
 * 
 * *****************  Version 10  *****************
 * User: Su           Date: 11.05.01   Time: 11:42
 * Updated in $/4Control/COM/softing/fc/inc
 * propget Address
 * 
 * *****************  Version 9  *****************
 * User: Su           Date: 7.05.01    Time: 12:23
 * Updated in $/4Control/COM/softing/fc/inc
 * Commented interface methods.
 * 
 * *****************  Version 8  *****************
 * User: Su           Date: 4.05.01    Time: 10:42
 * Updated in $/4Control/COM/softing/fc/inc
 * Interface changes.
 * 
 * *****************  Version 7  *****************
 * User: Su           Date: 3.05.01    Time: 19:27
 * Updated in $/4Control/COM/softing/fc/inc
 * Split interfaces to have a standard downloader interface and an
 * extended interface IDLEx (which might not be implemented by every
 * downloader).
 * 
 * *****************  Version 6  *****************
 * User: Su           Date: 2.05.01    Time: 19:33
 * Updated in $/4Control/COM/softing/fc/inc
 * Revised outgoing IDLEvents interface. Removed obsolete interface
 * methods.
 * 
 * *****************  Version 5  *****************
 * User: Su           Date: 4.04.01    Time: 15:26
 * Updated in $/4Control/COM/softing/fc/inc
 * 
 * *****************  Version 4  *****************
 * User: Su           Date: 4.04.01    Time: 11:36
 * Updated in $/4Control/COM/softing/fc/inc
 * Revised generally
 * 
 * *****************  Version 3  *****************
 * User: Su           Date: 28.03.01   Time: 14:33
 * Updated in $/4Control/COM/softing/fc/inc
 * 
 * *****************  Version 2  *****************
 * User: Su           Date: 28.03.01   Time: 12:02
 * Updated in $/4Control/COM/softing/fc/inc
 * New headers
 *==
 *----------------------------------------------------------------------------*
*/
