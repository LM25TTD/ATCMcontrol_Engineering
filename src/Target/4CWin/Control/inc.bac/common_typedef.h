/*####COPYRIGHTBEGIN####
 -------------------------------------------
 Copyright (C) 2003 Chris Gurtler

 -------------------------------------------
####COPYRIGHTEND####*/

/* =======================================================================
    common_typedef.h     BACnet Structures

    Chris Gurtler

  Revision History
  30 January 2006 - Added Service Overrides for Unconfirmed Services
  8 Feb 2006 - Chris Gurtler Added Logic for appending a COV Recipient to the list of active subscriptions
*/

#ifndef _common_typedef_h_
#define _common_typedef_h_

#include "datatype.h"

/** @defgroup FunctionReference Reference
 * @{
*/

/** @defgroup CallbackRoutines Callback Functions
 *
 Callback Functions from the BACnet API Server allow for an application to receive information in an event driven manner
 and in some cases they can be used to override the behaviour of the BACnet Server API.<br>
 Callback Functions fall into different categories depending on their function, there are functions for Service
 Indication, Service Overrides, Object Access, Proprietary Properties, Object Processing and Miscellaneous.<br>
 To activate Callback Functions,
 the BACnetDriver structure must be populated with a reference to the Callback Function. Before the call to bacnapi_init
 is made, the BACnetDriver structure must contain a reference to the desired callback function. All Callback
 functions are implemented in the same way, however they all perform different functions and fall into various
 category types.

 For example :-
 <pre>


static void cov_notifications(BACnetDeviceObjectPropertyReference* reference, BACnetDataType* value, int error)
{
	printf("COV Notification\n");
}

static int start()
{
	BACnetDriver driver = {0};
	char connect_string1[] = "TYPE=BACNETIP;NETWORK=1;";

	driver.device_id = 0;

	driver.datalink.connect_strings[0].connect_string = connect_string1;

	driver.cov_notification = cov_notifications;

	if (bacnapi_init(&driver))
		return -1;

	if (driver.datalink.connect_strings[0].error_flag)
	{
		printf(driver.datalink.connect_strings[0].error_message);
		return -1;
	}

	return 0;
}

 </pre>
 * @{
*/

/** @defgroup CallbackServiceIndication Service Indications
 *
 Service Indication Callback Functions provide a way for an application to receive information from a BACnet
 service when it occurs. This may be required for Unconfirmed Event Messages, COV, Event, Private Transfer and Text
 Messages. The Callback Function passes a pointer to a structure that contains the information from the service.
 The BACnet Template Library has a wrapper Class for each of the Service Structures to provide easy access, the
 intrinsic_reporting sample provides an example of the wrapper class for receiving event notifications.
 An Example use of an Indication Callback function may be to receive Event Messages from another device
 for logging to a database. For Example :

  <pre>

int event_notification(BACnetServiceEventNotificationRequest* data)
{
	printf("Event Notification\n");
}

static int start()
{
	BACnetDriver driver = {0};
	char connect_string1[] = "TYPE=BACNETIP;NETWORK=1;";

	driver.device_id = 0;

	driver.datalink.connect_strings[0].connect_string = connect_string1;

	driver.service_indication.confirmed_event_notification = event_notification;
	driver.service_indication.unconfirmed_event_notification = event_notification;

	if (bacnapi_init(&driver))
		return -1;

	if (driver.datalink.connect_strings[0].error_flag)
	{
		printf(driver.datalink.connect_strings[0].error_message);
		return -1;
	}

	return 0;
}

</pre>

 * @{
*/

/**
	 The Iam Callback message is fired when the BACnet API receives a service of this type. The BACnet
	 Server API maintains a list of Device Address Bindings for sending Confirmed Service Requests, so an application
	 would not normally use this callback function. Iam messages are normally sent in response to a whoIs request
	 from another device. The BACnet Server API will automatically respond to whoIs messages from other devices
	 on the network.
*/
typedef int (*service_indication_iam_fn)(bacnet_address*, BACnetServiceIam*);
/**
	 The IHave Callback message is fired when the BACnet API receives a service of this type. An Ihave
	 message is sent in response to a whoHas message. The BACnet Server API will automatically
	 send IHave messages in response to a whoHas request.
*/
typedef int (*service_indication_Ihave_fn)(BACnetServiceIHave*);
/**
	 The UnconfirmedCOVNotification Callback message is fired when the BACnet API receives a service of this type.
	 These messages are generated by devices for sending COV notifications. An application would normally
	 subscribe to a device to receive COV notifications. Some devices may send COV notifications automatically
	 without the use of the subscribeCOV service, but this is not always the case. The service structure for
	 both confirmed and unconfired notifications is the same.
*/
typedef int (*service_indication_unconfirmed_cov_notification_fn)(BACnetServiceCOVNotificationRequest*);
/**
	 The UnconfirmedEventNotification Callback message is fired when the BACnet API receives a service of this type.
	 These messages are generated by devices for sending Event notifications typically used for alarming. The
	 Notification Class object would normally contain the destination for sending of alarms.
	 The service structure for both confirmed and unconfired notifications is the same.
*/
typedef int (*service_indication_unconfirmed_event_notification_fn)(BACnetServiceEventNotificationRequest*);
/**
	 The UnconfirmedPrivateTransfer Callback message is fired when the BACnet API receives a service of this type.
	 The service structure for both confirmed and unconfired notifications is the same.
*/
typedef int (*service_indication_unconfirmed_private_transfer_fn)(BACnetServicePrivateTransferRequest*);
/**
	 The UnconfirmedTextMessage Callback message is fired when the BACnet API receives a service of this type.
	 The service structure for both confirmed and unconfired notifications is the same.
*/
typedef int (*service_indication_unconfirmed_text_message_fn)(BACnetServiceTextMessageRequest*);
/**
	 The Time Synchronization Callback message is fired when the BACnet API receives a service of this type. The
	 BACnet Server API will automatically adjust the time clock when this service is received.
*/
typedef int (*service_indication_time_synchronization_fn)(BACnetServiceTimeSynchronization*);
/**
	 The WhoHas Callback message is fired when the BACnet API receives a service of this type. The
	 BACnet Server API will automatically send an IHave request in response to this message.
*/
typedef int (*service_indication_who_has_fn)(BACnetServiceWhoHas*);
/**
	 The WhoIs Callback message is fired when the BACnet API receives a service of this type. The
	 BACnet Server API will automatically send an IAm request in response to this message.
*/
typedef int (*service_indication_who_is_fn)(BACnetServiceWhoIs*);
/**
	 The UTC Time Synchronization Callback message is fired when the BACnet API receives a service of this type. The
	 BACnet Server API will automatically adjust the time clock when this service is received.
*/
typedef int (*service_indication_utc_time_synchronization_fn)(BACnetServiceUtcTimeSynchronization*);
/**
	 The ConfirmedCOVNotification Callback message is fired when the BACnet API receives a service of this type.
	 These messages are generated by devices for sending COV notifications. An application would normally
	 subscribe to a device to receive COV notifications. Some devices may send COV notifications automatically
	 without the use of the subscribeCOV service, but this is not always the case. The service structure for
	 both confirmed and unconfired notifications is the same.
*/
typedef int (*service_indication_confirmed_cov_notification_fn)(BACnetServiceCOVNotificationRequest*);
/**
	 The ConfirmedEventNotification Callback message is fired when the BACnet API receives a service of this type.
	 These messages are generated by devices for sending Event notifications typically used for alarming. The
	 Notification Class object would normally contain the destination for sending of alarms.
	 The service structure for both confirmed and unconfired notifications is the same.
*/
typedef int (*service_indication_confirmed_event_notification_fn)(BACnetServiceEventNotificationRequest*);
/**
	 The ConfirmedPrivateTransfer Callback message is fired when the BACnet API receives a service of this type.
	 The service structure for both confirmed and unconfired notifications is the same.
*/
typedef int (*service_indication_confirmed_private_transfer_fn)(BACnetServicePrivateTransferRequest*);
/**
	 The ConfirmedTextMessage Callback message is fired when the BACnet API receives a service of this type.
	 The service structure for both confirmed and unconfired notifications is the same.
*/
typedef int (*service_indication_confirmed_text_message_fn)(BACnetServiceTextMessageRequest*);
/**
	 The BACnetServiceLifeSafetyOperationRequest Callback message is fired when the BACnet API receives a service of this type.
	 It is used to notify the application that the service has been received.
*/
typedef int (*service_indication_life_safety_operation_fn)(BACnetServiceLifeSafetyOperationRequest*);

/*@}*/

/** @defgroup CallbackServiceOverides Service Overides
 *
 Service Overide Callback Functions provide a way for an application customise the behaviour of the BACnet
 Server API when a service is received. The most common use of this is to implement a handler for the
 private transfer routines. Using the Service Overide, an application can perform some custom actions when
 the service is received and then send back a customised response. The private_transfer sample demonstrates the
 operation of overiding a Service.<br>
 To override the Service, an application should return a value of zero, if the callback returns -1 then
 the default handler will be used. The first parameter in the Callback is a pointer to the address of the
 device making the call. The second parameter is a pointer to the confirmation indicator which if set will cause
 the BACnet Server API to send an Ack response. If the confirmation indicator is not set then the BACnet Server
 API will respond with an error. The request structure contains the message send from the originating device. The
 ack structure must be populated by the callback procedure.
 * @{
*/

/** @defgroup CallbackConfirmedServiceOverides Confirmed Services
 *
 * @{
*/


/**
	 Used to overide the behaviour of the BACnet Server API when a service is received. Return value of 0
	 indicates the service will be overridden, otherwise the default handler will be used.<br>
	 Parameter 1 is a pointer to the address of the device making the call.<br>
	 Parameter 2 is a pointer to the confirmation indicator which if set will cause
     the BACnet Server API to send an Ack response. If the confirmation indicator is not set then the BACnet Server
     API will respond with an error.<br>
     Parameter 3 is a pointer to the request structure which contains the message send from the originating device.<br>
	 Parameter 4 is a pointer to the ack structure must be populated by the callback procedure.<br>
	 Parameter 5 is a pointer to the ErrorCode which will be returned if the confirmation indicator is not set.<br>
*/
typedef int (*service_override_read_property_fn)(bacnet_address*, BYTE*, BACnetServiceReadPropertyRequest*, BACnetServiceReadPropertyAck*, BACnetError*);
/**
	 Used to overide the behaviour of the BACnet Server API when a service is received. Return value of 0
	 indicates the service will be overridden, otherwise the default handler will be used.<br>
	 Parameter 1 is a pointer to the address of the device making the call.<br>
	 Parameter 2 is a pointer to the confirmation indicator which if set will cause
     the BACnet Server API to send an Ack response. If the confirmation indicator is not set then the BACnet Server
     API will respond with an error.<br>
     Parameter 3 is a pointer to the request structure which contains the message send from the originating device.<br>
	 Parameter 4 is a pointer to the ack structure must be populated by the callback procedure.<br>
	 Parameter 5 is a pointer to the ErrorCode which will be returned if the confirmation indicator is not set.<br>
*/
typedef int (*service_override_read_property_conditional_fn)(bacnet_address*, BYTE*, BACnetServiceReadPropertyConditionalRequest*, BACnetServiceReadPropertyConditionalAck*, BACnetError*);
/**
	 Used to overide the behaviour of the BACnet Server API when a service is received. Return value of 0
	 indicates the service will be overridden, otherwise the default handler will be used.<br>
	 Parameter 1 is a pointer to the address of the device making the call.<br>
	 Parameter 2 is a pointer to the confirmation indicator which if set will cause
     the BACnet Server API to send an Ack response. If the confirmation indicator is not set then the BACnet Server
     API will respond with an error.<br>
     Parameter 3 is a pointer to the request structure which contains the message send from the originating device.<br>
	 Parameter 4 is a pointer to the ack structure must be populated by the callback procedure.<br>
	 Parameter 5 is a pointer to the ErrorCode which will be returned if the confirmation indicator is not set.<br>
*/
typedef int (*service_override_read_property_multiple_fn)(bacnet_address*, BYTE*, BACnetServiceReadPropertyMultipleRequest*, BACnetServiceReadPropertyMultipleAck*, BACnetError*);
/**
	 Used to overide the behaviour of the BACnet Server API when a service is received. Return value of 0
	 indicates the service will be overridden, otherwise the default handler will be used.<br>
	 Parameter 1 is a pointer to the address of the device making the call.<br>
	 Parameter 2 is a pointer to the confirmation indicator which if set will cause
     the BACnet Server API to send an Ack response. If the confirmation indicator is not set then the BACnet Server
     API will respond with an error.<br>
     Parameter 3 is a pointer to the request structure which contains the message send from the originating device.<br>
	 Parameter 4 is a pointer to the ack structure must be populated by the callback procedure.<br>
	 Parameter 5 is a pointer to the ErrorCode which will be returned if the confirmation indicator is not set.<br>
*/
typedef int (*service_override_subscribe_cov_fn)(bacnet_address*, bacnet_address*, BYTE*, BACnetServiceSubscribeCOVRequest*, BACnetError*);

/**
	 Used to overide the behaviour of the BACnet Server API when a service is received. Return value of 0
	 indicates the service will be overridden, otherwise the default handler will be used.<br>
	 Parameter 1 is a pointer to the address of the device making the call.<br>
	 Parameter 2 is a pointer to the confirmation indicator which if set will cause
     the BACnet Server API to send an Ack response. If the confirmation indicator is not set then the BACnet Server
     API will respond with an error.<br>
     Parameter 3 is a pointer to the request structure which contains the message send from the originating device.<br>
	 Parameter 4 is a pointer to the ack structure must be populated by the callback procedure.<br>
	 Parameter 5 is a pointer to the ErrorCode which will be returned if the confirmation indicator is not set.<br>
*/
typedef int (*service_override_atomic_read_file_fn)(bacnet_address*, BYTE*, BACnetServiceAtomicReadFileRequest*, BACnetServiceAtomicReadFileAck*, BACnetError*);
/**
	 Used to overide the behaviour of the BACnet Server API when a service is received. Return value of 0
	 indicates the service will be overridden, otherwise the default handler will be used.<br>
	 Parameter 1 is a pointer to the address of the device making the call.<br>
	 Parameter 2 is a pointer to the confirmation indicator which if set will cause
     the BACnet Server API to send an Ack response. If the confirmation indicator is not set then the BACnet Server
     API will respond with an error.<br>
     Parameter 3 is a pointer to the request structure which contains the message send from the originating device.<br>
	 Parameter 4 is a pointer to the ack structure must be populated by the callback procedure.<br>
	 Parameter 5 is a pointer to the ErrorCode which will be returned if the confirmation indicator is not set.<br>
*/
typedef int (*service_override_atomic_write_file_fn)(bacnet_address*, BYTE*, BACnetServiceAtomicWriteFileRequest*, BACnetServiceAtomicWriteFileAck*, BACnetError*);

/**
	 Used to overide the behaviour of the BACnet Server API when a service is received. Return value of 0
	 indicates the service will be overridden, otherwise the default handler will be used.<br>
	 Parameter 1 is a pointer to the address of the device making the call.<br>
	 Parameter 2 is a pointer to the confirmation indicator which if set will cause
     the BACnet Server API to send an Ack response. If the confirmation indicator is not set then the BACnet Server
     API will respond with an error.<br>
     Parameter 3 is a pointer to the request structure which contains the message send from the originating device.<br>
	 Parameter 4 is a pointer to the ack structure must be populated by the callback procedure.<br>
	 Parameter 5 is a pointer to the ErrorCode which will be returned if the confirmation indicator is not set.<br>
*/
typedef int (*service_override_add_list_element_fn)(bacnet_address*, BYTE*, BACnetServiceAddListElementRequest*, BACnetError*);
/**
	 Used to overide the behaviour of the BACnet Server API when a service is received. Return value of 0
	 indicates the service will be overridden, otherwise the default handler will be used.<br>
	 Parameter 1 is a pointer to the address of the device making the call.<br>
	 Parameter 2 is a pointer to the confirmation indicator which if set will cause
     the BACnet Server API to send an Ack response. If the confirmation indicator is not set then the BACnet Server
     API will respond with an error.<br>
     Parameter 3 is a pointer to the request structure which contains the message send from the originating device.<br>
	 Parameter 4 is a pointer to the ack structure must be populated by the callback procedure.<br>
	 Parameter 5 is a pointer to the ErrorCode which will be returned if the confirmation indicator is not set.<br>
*/
typedef int (*service_override_remove_list_element_fn)(bacnet_address*, BYTE*, BACnetServiceRemoveListElementRequest*, BACnetError*);

/**
	 Used to overide the behaviour of the BACnet Server API when a service is received. Return value of 0
	 indicates the service will be overridden, otherwise the default handler will be used.<br>
	 Parameter 1 is a pointer to the address of the device making the call.<br>
	 Parameter 2 is a pointer to the confirmation indicator which if set will cause
     the BACnet Server API to send an Ack response. If the confirmation indicator is not set then the BACnet Server
     API will respond with an error.<br>
     Parameter 3 is a pointer to the request structure which contains the message send from the originating device.<br>
	 Parameter 4 is a pointer to the ack structure must be populated by the callback procedure.<br>
	 Parameter 5 is a pointer to the ErrorCode which will be returned if the confirmation indicator is not set.<br>
*/
typedef int (*service_override_create_object_fn)(bacnet_address*, BYTE*, BACnetServiceCreateObjectRequest*, BACnetServiceCreateObjectAck*, BACnetError*);
/**
	 Used to overide the behaviour of the BACnet Server API when a service is received. Return value of 0
	 indicates the service will be overridden, otherwise the default handler will be used.<br>
	 Parameter 1 is a pointer to the address of the device making the call.<br>
	 Parameter 2 is a pointer to the confirmation indicator which if set will cause
     the BACnet Server API to send an Ack response. If the confirmation indicator is not set then the BACnet Server
     API will respond with an error.<br>
     Parameter 3 is a pointer to the request structure which contains the message send from the originating device.<br>
	 Parameter 4 is a pointer to the ack structure must be populated by the callback procedure.<br>
	 Parameter 5 is a pointer to the ErrorCode which will be returned if the confirmation indicator is not set.<br>
*/
typedef int (*service_override_delete_object_fn)(bacnet_address*, BYTE*, BACnetServiceDeleteObjectRequest*, BACnetError*);

/**
	 Used to overide the behaviour of the BACnet Server API when a service is received. Return value of 0
	 indicates the service will be overridden, otherwise the default handler will be used.<br>
	 Parameter 1 is a pointer to the address of the device making the call.<br>
	 Parameter 2 is a pointer to the confirmation indicator which if set will cause
     the BACnet Server API to send an Ack response. If the confirmation indicator is not set then the BACnet Server
     API will respond with an error.<br>
     Parameter 3 is a pointer to the request structure which contains the message send from the originating device.<br>
	 Parameter 4 is a pointer to the ack structure must be populated by the callback procedure.<br>
	 Parameter 5 is a pointer to the ErrorCode which will be returned if the confirmation indicator is not set.<br>
*/
typedef int (*service_override_write_property_fn)(bacnet_address*, BYTE*, BACnetServiceWritePropertyRequest*, BACnetError*);
/**
	 Used to overide the behaviour of the BACnet Server API when a service is received. Return value of 0
	 indicates the service will be overridden, otherwise the default handler will be used.<br>
	 Parameter 1 is a pointer to the address of the device making the call.<br>
	 Parameter 2 is a pointer to the confirmation indicator which if set will cause
     the BACnet Server API to send an Ack response. If the confirmation indicator is not set then the BACnet Server
     API will respond with an error.<br>
     Parameter 3 is a pointer to the request structure which contains the message send from the originating device.<br>
	 Parameter 4 is a pointer to the ack structure must be populated by the callback procedure.<br>
	 Parameter 5 is a pointer to the ErrorCode which will be returned if the confirmation indicator is not set.<br>
*/
typedef int (*service_override_write_property_multiple_fn)(bacnet_address*, BYTE*, BACnetServiceWritePropertyMultipleRequest*, BACnetError*);

/**
	 Used to overide the behaviour of the BACnet Server API when a service is received. Return value of 0
	 indicates the service will be overridden, otherwise the default handler will be used.<br>
	 Parameter 1 is a pointer to the address of the device making the call.<br>
	 Parameter 2 is a pointer to the confirmation indicator which if set will cause
     the BACnet Server API to send an Ack response. If the confirmation indicator is not set then the BACnet Server
     API will respond with an error.<br>
     Parameter 3 is a pointer to the request structure which contains the message send from the originating device.<br>
	 Parameter 4 is a pointer to the ack structure must be populated by the callback procedure.<br>
	 Parameter 5 is a pointer to the ErrorCode which will be returned if the confirmation indicator is not set.<br>
*/
typedef int (*service_override_confirmed_private_transfer_fn)(bacnet_address*, BYTE*, BACnetServicePrivateTransferRequest*, BACnetServiceConfirmedPrivateTransferAck*, BACnetError*);
/**
	 Used to overide the behaviour of the BACnet Server API when a service is received. Return value of 0
	 indicates the service will be overridden, otherwise the default handler will be used.<br>
	 Parameter 1 is a pointer to the address of the device making the call.<br>
	 Parameter 2 is a pointer to the confirmation indicator which if set will cause
     the BACnet Server API to send an Ack response. If the confirmation indicator is not set then the BACnet Server
     API will respond with an error.<br>
     Parameter 3 is a pointer to the request structure which contains the message send from the originating device.<br>
	 Parameter 4 is a pointer to the ack structure must be populated by the callback procedure.<br>
	 Parameter 5 is a pointer to the ErrorCode which will be returned if the confirmation indicator is not set.<br>
*/
typedef int (*service_override_device_communication_control_fn)(bacnet_address*, BYTE*, BACnetServiceDeviceCommunicationControlRequest*, BACnetError*);
/**
	 Used to overide the behaviour of the BACnet Server API when a service is received. Return value of 0
	 indicates the service will be overridden, otherwise the default handler will be used.<br>
	 Parameter 1 is a pointer to the address of the device making the call.<br>
	 Parameter 2 is a pointer to the confirmation indicator which if set will cause
     the BACnet Server API to send an Ack response. If the confirmation indicator is not set then the BACnet Server
     API will respond with an error.<br>
     Parameter 3 is a pointer to the request structure which contains the message send from the originating device.<br>
	 Parameter 4 is a pointer to the ack structure must be populated by the callback procedure.<br>
	 Parameter 5 is a pointer to the ErrorCode which will be returned if the confirmation indicator is not set.<br>
*/
typedef int (*service_override_reinitialize_device_fn)(bacnet_address*, BYTE*, BACnetServiceReinitializeDeviceRequest*, BACnetError*);

/**
	 Used to overide the behaviour of the BACnet Server API when a service is received. Return value of 0
	 indicates the service will be overridden, otherwise the default handler will be used.<br>
	 Parameter 1 is a pointer to the address of the device making the call.<br>
	 Parameter 2 is a pointer to the confirmation indicator which if set will cause
     the BACnet Server API to send an Ack response. If the confirmation indicator is not set then the BACnet Server
     API will respond with an error.<br>
     Parameter 3 is a pointer to the request structure which contains the message send from the originating device.<br>
	 Parameter 4 is a pointer to the ack structure must be populated by the callback procedure.<br>
	 Parameter 5 is a pointer to the ErrorCode which will be returned if the confirmation indicator is not set.<br>
*/
typedef int (*service_override_read_range_fn)(bacnet_address*, BYTE*, BACnetServiceReadRangeRequest*, BACnetServiceReadRangeAck*, BACnetError*);

/**
	 Used to overide the behaviour of the BACnet Server API when a service is received. Return value of 0
	 indicates the service will be overridden, otherwise the default handler will be used.<br>
	 Parameter 1 is a pointer to the address of the device making the call.<br>
	 Parameter 2 is a pointer to the confirmation indicator which if set will cause
     the BACnet Server API to send an Ack response. If the confirmation indicator is not set then the BACnet Server
     API will respond with an error.<br>
     Parameter 3 is a pointer to the request structure which contains the message send from the originating device.<br>
	 Parameter 4 is a pointer to the ack structure must be populated by the callback procedure.<br>
	 Parameter 5 is a pointer to the ErrorCode which will be returned if the confirmation indicator is not set.<br>
*/
typedef int (*service_override_life_safety_operation_fn)(bacnet_address*, BYTE*, BACnetServiceLifeSafetyOperationRequest*, BACnetError*);
/**
	 Used to overide the behaviour of the BACnet Server API when a service is received. Return value of 0
	 indicates the service will be overridden, otherwise the default handler will be used.<br>
	 Parameter 1 is a pointer to the address of the device making the call.<br>
	 Parameter 2 is a pointer to the confirmation indicator which if set will cause
     the BACnet Server API to send an Ack response. If the confirmation indicator is not set then the BACnet Server
     API will respond with an error.<br>
     Parameter 3 is a pointer to the request structure which contains the message send from the originating device.<br>
	 Parameter 4 is a pointer to the ack structure must be populated by the callback procedure.<br>
	 Parameter 5 is a pointer to the ErrorCode which will be returned if the confirmation indicator is not set.<br>
*/
typedef int (*service_override_subscribe_cov_property_fn)(bacnet_address*, BYTE*, BACnetServiceSubscribeCOVPropertyRequest*, BACnetError*);
/**
	 Used to overide the behaviour of the BACnet Server API when a service is received. Return value of 0
	 indicates the service will be overridden, otherwise the default handler will be used.<br>
	 Parameter 1 is a pointer to the address of the device making the call.<br>
	 Parameter 2 is a pointer to the confirmation indicator which if set will cause
     the BACnet Server API to send an Ack response. If the confirmation indicator is not set then the BACnet Server
     API will respond with an error.<br>
     Parameter 3 is a pointer to the request structure which contains the message send from the originating device.<br>
	 Parameter 4 is a pointer to the ack structure must be populated by the callback procedure.<br>
	 Parameter 5 is a pointer to the ErrorCode which will be returned if the confirmation indicator is not set.<br>
*/
typedef int (*service_override_get_event_information_fn)(bacnet_address*, BYTE*, BACnetServiceGetEventInformationRequest*, BACnetServiceGetEventInformationAck*, BACnetError*);


/**
	 Used to overide the behaviour of the BACnet Server API when a service is received. Return value of 0
	 indicates the service will be overridden, otherwise the default handler will be used.<br>
	 Parameter 1 is a pointer to the address of the device making the call.<br>
	 Parameter 2 is a pointer to the confirmation indicator which if set will cause
     the BACnet Server API to send an Ack response. If the confirmation indicator is not set then the BACnet Server
     API will respond with an error.<br>
     Parameter 3 is a pointer to the request structure which contains the message send from the originating device.<br>
	 Parameter 4 is a pointer to the ack structure must be populated by the callback procedure.<br>
	 Parameter 5 is a pointer to the ErrorCode which will be returned if the confirmation indicator is not set.<br>
*/
typedef int (*service_override_get_alarm_summary_fn)(bacnet_address*, BYTE*, BACnetServiceGetAlarmSummaryAck*, BACnetError*);
/**
	 Used to overide the behaviour of the BACnet Server API when a service is received. Return value of 0
	 indicates the service will be overridden, otherwise the default handler will be used.<br>
	 Parameter 1 is a pointer to the address of the device making the call.<br>
	 Parameter 2 is a pointer to the confirmation indicator which if set will cause
     the BACnet Server API to send an Ack response. If the confirmation indicator is not set then the BACnet Server
     API will respond with an error.<br>
     Parameter 3 is a pointer to the request structure which contains the message send from the originating device.<br>
	 Parameter 4 is a pointer to the ack structure must be populated by the callback procedure.<br>
	 Parameter 5 is a pointer to the ErrorCode which will be returned if the confirmation indicator is not set.<br>
*/
typedef int (*service_override_get_enrolment_summary_fn)(bacnet_address*, BYTE*, BACnetServiceGetEnrolmentSummaryRequest*, BACnetServiceGetEnrolmentSummaryAck*, BACnetError*);

/**
	 Used to overide the behaviour of the BACnet Server API when a service is received. Return value of 0
	 indicates the service will be overridden, otherwise the default handler will be used.<br>
	 Parameter 1 is a pointer to the address of the device making the call.<br>
	 Parameter 2 is a pointer to the confirmation indicator which if set will cause
     the BACnet Server API to send an Ack response. If the confirmation indicator is not set then the BACnet Server
     API will respond with an error.<br>
     Parameter 3 is a pointer to the request structure which contains the message send from the originating device.<br>
	 Parameter 4 is a pointer to the ErrorCode which will be returned if the confirmation indicator is not set.<br>
*/
typedef int (*service_override_confirmed_cov_notification_fn)(bacnet_address*, BYTE*, BACnetServiceCOVNotificationRequest*, BACnetError*);

/**
	 Used to overide the behaviour of the BACnet Server API when a service is received. Return value of 0
	 indicates the service will be overridden, otherwise the default handler will be used.<br>
	 Parameter 1 is a pointer to the address of the device making the call.<br>
	 Parameter 2 is a pointer to the confirmation indicator which if set will cause
     the BACnet Server API to send an Ack response. If the confirmation indicator is not set then the BACnet Server
     API will respond with an error.<br>
     Parameter 3 is a pointer to the request structure which contains the message send from the originating device.<br>
	 Parameter 4 is a pointer to the ErrorCode which will be returned if the confirmation indicator is not set.<br>
*/
typedef int (*service_override_confirmed_event_notification_fn)(bacnet_address*, BYTE*, BACnetServiceEventNotificationRequest*, BACnetError*);

/**
	 Used to overide the behaviour of the BACnet Server API when a service is received. Return value of 0
	 indicates the service will be overridden, otherwise the default handler will be used.<br>
	 Parameter 1 is a pointer to the address of the device making the call.<br>
	 Parameter 2 is a pointer to the confirmation indicator which if set will cause
     the BACnet Server API to send an Ack response. If the confirmation indicator is not set then the BACnet Server
     API will respond with an error.<br>
     Parameter 3 is a pointer to the request structure which contains the message send from the originating device.<br>
	 Parameter 4 is a pointer to the ErrorCode which will be returned if the confirmation indicator is not set.<br>
*/
typedef int (*service_override_confirmed_text_message_fn)(bacnet_address*, BYTE*, BACnetServiceTextMessageRequest*, BACnetError*);
/**
	 Used to overide the behaviour of the BACnet Server API when a service is received. Return value of 0
	 indicates the service will be overridden, otherwise the default handler will be used.<br>
	 Parameter 1 is a pointer to the address of the device making the call.<br>
	 Parameter 2 is a pointer to the confirmation indicator which if set will cause
     the BACnet Server API to send an Ack response. If the confirmation indicator is not set then the BACnet Server
     API will respond with an error.<br>
     Parameter 3 is a pointer to the request structure which contains the message send from the originating device.<br>
	 Parameter 4 is a pointer to the ErrorCode which will be returned if the confirmation indicator is not set.<br>
*/
typedef int (*service_override_acknowledge_alarm_fn)(bacnet_address*, BYTE*, BACnetServiceAcknowledgeAlarmRequest*, BACnetError*);


/*@}*/

/** @defgroup CallbackUnconfirmedServiceOverides Unconfirmed Services
 *
 * @{
*/


/**
	 The Iam service override is fired when the BACnet API receives a service of this type. The BACnet
	 Server API maintains a list of Device Address Bindings for sending Confirmed Service Requests, so an application
	 would not normally override this callback function. Iam messages are normally sent in response to a whoIs request
	 from another device. The BACnet Server API will automatically respond to whoIs messages from other devices
	 on the network.
	 This Callback can be used to overide the behaviour of the BACnet Server API when a service is received.
	 Return value of 0 indicates the service will be overridden, otherwise the default handler will be used.
*/
typedef int (*service_override_iam_fn)(bacnet_address*, BACnetServiceIam*);
/**
	 The IHave service override is fired when the BACnet API receives a service of this type. An Ihave
	 message is sent in response to a whoHas message. The BACnet Server API will automatically
	 send IHave messages in response to a whoHas request.
	 This Callback can be used to overide the behaviour of the BACnet Server API when a service is received.
	 Return value of 0 indicates the service will be overridden, otherwise the default handler will be used.
*/
typedef int (*service_override_Ihave_fn)(bacnet_address*, BACnetServiceIHave*);
/**
	 The UnconfirmedCOVNotification service override is fired when the BACnet API receives a service of this type.
	 These messages are generated by devices for sending COV notifications. An application would normally
	 subscribe to a device to receive COV notifications. Some devices may send COV notifications automatically
	 without the use of the subscribeCOV service, but this is not always the case. The service structure for
	 both confirmed and unconfired notifications is the same.
	 This Callback can be used to overide the behaviour of the BACnet Server API when a service is received.
	 Return value of 0 indicates the service will be overridden, otherwise the default handler will be used.
*/
typedef int (*service_override_unconfirmed_cov_notification_fn)(bacnet_address*, BACnetServiceCOVNotificationRequest*);
/**
	 The UnconfirmedEventNotification service override is fired when the BACnet API receives a service of this type.
	 These messages are generated by devices for sending Event notifications typically used for alarming. The
	 Notification Class object would normally contain the destination for sending of alarms.
	 The service structure for both confirmed and unconfired notifications is the same.
	 This Callback can be used to overide the behaviour of the BACnet Server API when a service is received.
	 Return value of 0 indicates the service will be overridden, otherwise the default handler will be used.
*/
typedef int (*service_override_unconfirmed_event_notification_fn)(bacnet_address*, BACnetServiceEventNotificationRequest*);
/**
	 The UnconfirmedPrivateTransfer service override is fired when the BACnet API receives a service of this type.
	 The service structure for both confirmed and unconfired notifications is the same.
	 This Callback can be used to overide the behaviour of the BACnet Server API when a service is received.
	 Return value of 0 indicates the service will be overridden, otherwise the default handler will be used.
*/
typedef int (*service_override_unconfirmed_private_transfer_fn)(bacnet_address*, BACnetServicePrivateTransferRequest*);
/**
	 The UnconfirmedTextMessage service override is fired when the BACnet API receives a service of this type.
	 The service structure for both confirmed and unconfired notifications is the same.
	 This Callback can be used to overide the behaviour of the BACnet Server API when a service is received.
	 Return value of 0 indicates the service will be overridden, otherwise the default handler will be used.
*/
typedef int (*service_override_unconfirmed_text_message_fn)(bacnet_address*, BACnetServiceTextMessageRequest*);
/**
	 The Time Synchronization service override is fired when the BACnet API receives a service of this type. The
	 BACnet Server API will automatically adjust the time clock when this service is received.
	 This Callback can be used to overide the behaviour of the BACnet Server API when a service is received.
	 Return value of 0 indicates the service will be overridden, otherwise the default handler will be used.
*/
typedef int (*service_override_time_synchronization_fn)(bacnet_address*, BACnetServiceTimeSynchronization*);
/**
	 The WhoHas service override is fired when the BACnet API receives a service of this type. The
	 BACnet Server API will automatically send an IHave request in response to this message.
	 This Callback can be used to overide the behaviour of the BACnet Server API when a service is received.
	 Return value of 0 indicates the service will be overridden, otherwise the default handler will be used.
*/
typedef int (*service_override_who_has_fn)(bacnet_address*, BACnetServiceWhoHas*);
/**
	 The WhoIs service override is fired when the BACnet API receives a service of this type. The
	 BACnet Server API will automatically send an IAm request in response to this message.
	 This Callback can be used to overide the behaviour of the BACnet Server API when a service is received.
	 Return value of 0 indicates the service will be overridden, otherwise the default handler will be used.
*/
typedef int (*service_override_who_is_fn)(bacnet_address*, BACnetServiceWhoIs*);
/**
	 The UTC Time Synchronization service override is fired when the BACnet API receives a service of this type. The
	 BACnet Server API will automatically adjust the time clock when this service is received.
	 This Callback can be used to overide the behaviour of the BACnet Server API when a service is received.
	 Return value of 0 indicates the service will be overridden, otherwise the default handler will be used.
*/
typedef int (*service_override_utc_time_synchronization_fn)(bacnet_address*, BACnetServiceUtcTimeSynchronization*);


// ##DB## >>>

typedef int (*db_override_update_ana_priority_value_fn)(int device_id, int object_type, int instance, int priority, const BACnetDataType *value);
/**
	 Return value of 0 indicates the service will be overridden, otherwise the default handler will be used.
*/

typedef int (*db_override_update_binary_pv_priority_value_fn)(int device_id, int object_type, int instance, int priority, const BACnetDataType *value);
/**
	 Return value of 0 indicates the service will be overridden, otherwise the default handler will be used.
*/

typedef int (*db_override_update_uint_priority_value_fn)(int device_id, int object_type, int instance, int priority, const BACnetDataType *value);
/**
	 Return value of 0 indicates the service will be overridden, otherwise the default handler will be used.
*/

// ##DB## <<<

// ##SOF## >>>

typedef int (*sof_enable_datalink_layer_fn)(void);
/**
	Return value of 0 will disable the datalink layer, otherwise the data link layer will be enabled.
*/

// ##SOF## <<<

/*@}*/

/*@}*/

/** @defgroup CallbackObjectAccess Object Access Overides
 *
 Object Access Overide Functions can be used to override the handler for readProperty, readPropertyMultiple,
 writeProperty and writePropertyMultiple. By overriding these functions, an application can maintain
 the storage and retreival of information stored inside BACnet Objects. This is not reccommended, and
 an implementor should be very wary when using these overrides.<br>
 To override the Service, an application should return a value of zero, if the callback returns -1 then
 the default handler will be used.<br>

 * @{
*/

/**
This callback is fired when the BACnet Server API responds to the readProperty and
readPropertyMultiple services.<br>
To override the Service, an application should return a value of zero, if the callback returns -1 then
the default handler will be used.<br>

Parameter 1 is the network number.<br>
Parameter 2 is the device ID.<br>
Parameter 3 is the Object Type.<br>
Parameter 4 is the Object Instance.<br>
Parameter 5 is the Property.<br>
Parameter 6 is the Array Index.<br>
Parameter 7 is a pointer to the returned BACnet Value which can be any data type.<br>
Parameter 8 is a pointer to an error flag.<br>
Parameter 9 is a pointer to the error code.<br>
<br>
An application would inspect the device object property reference and then populate the Value or error accordingly.

*/
typedef int (*read_object_property_override_fn)(int, int, UINT, UINT, UINT, int, BACnetDataType*, int*, BACnetErrorCode*);


/**
This callback is fired when the BACnet Server API responds to the createObject service,
or when an object is loaded from the database at startup.<br>

Parameter 1 is a Pointer to the BACnet Object containing :-<br>
The device ID.<br>
The Object Type.<br>
The Object Instance.<br>
<br>
An application would use this callback to perform some additional functions when an object is created.
*/
typedef void (*object_insert_notification_fn)(BACnetObjectContainer*);

/**
This callback is fired when the BACnet Server API responds to the deleteObject service.<br>

Parameter 1 is a Pointer to the BACnet Object containing :-<br>
The device ID.<br>
The Object Type.<br>
The Object Instance.<br>
<br>
An application would use this callback to perform some additional functions when an object is removed.
*/
typedef void (*object_remove_notification_fn)(BACnetObjectContainer*);

/**
This callback is fired when the BACnet Server API responds to the writeProperty and
writePropertyMultiple services.<br>
To override the Service, an application should return a value of zero, if the callback returns -1 then
the default handler will be used.<br>

Parameter 1 is the network number.<br>
Parameter 2 is the device ID.<br>
Parameter 3 is the Object Type.<br>
Parameter 4 is the Object Instance.<br>
Parameter 5 is the Property.<br>
Parameter 6 is the Array Index.<br>
Parameter 7 is a pointer to a BACnet Value which can be any data type.<br>
Parameter 8 is the priority.<br>
Parameter 9 is a pointer to an error flag.<br>
Parameter 10 is a pointer to the error code.<br>
<br>
An application would inspect the device object property value, update it's corresponding internal value and then populate the error accordingly.

*/
typedef int (*write_object_property_override_fn)(int, int, UINT, UINT, UINT, int, BACnetDataType*, UINT, int*, BACnetErrorCode*);

/*@}*/

/** @defgroup CallbackProprietaryProperty Proprietary Properties
 *
 Proprietary Property Callback Functions are used to implement proprietary properties for standard BACnet
 objects residing inside the BACnet Server. The BACnet
 Server API implements all standard BACnet Objects and all optional properties. It includes COV reporting on all
 the required objects as well as Intrinsic Reporting. Proprietary Properties start with the enumeration number 512
 and upwards, any data type including complex data and arrays can be stored into proprietary properties.
 Implementers can extend any of the standard BACnet Objects
 with Proprietary Properties using the callback functions described in this section. Additional Data required by
 proprietary properties can be stored in the database and will be loaded automatically on startup. The
 local_objects sample implements 3 proprietary properties on the Analog Value object.


 * @{
*/
/**
This callback function must be overridden to store additional data for each object. When a new object is created
by the BACnet Server API, this callback will be called to initialize the memory required for proprietary properties.<br>
The first parameter can contain a reference to a pointer that holds the initial value for the additional data.
If a Null pointer is returned then the additional data will be set to contain zeroes.<br>
The second parameter is a pointer to the size of the storage area.
See the local_objects sample for an example of it's usage.
*/
typedef int (*proprietary_property_init_fn)(BACnetObjectType, void**, int*);
/**
This callback function is called by the application when a readPropertyMultiple request has for the "All"
property has been made by another device. An application can use this callback function to append to the
list of properties. <br>
The first parameter contains the object type.<br>
The second parameter is a pointer to the property number. The first call has the value -1 stored in this pointer
and thereafter the previous property number will be stored.<br>
A return value of 0 will stop the BACnet Server from appending properties, otherwise
the value stored in the second parameter will be appended. The value stored in the se
See the local_objects sample for an example of it's usage.
*/
typedef int (*proprietary_all_property_add_fn)(int, BACnetObjectType, int*);
/**
This callback function is called by the application when a readProperty or readPropertyMultiple request is made.
The first parameter is a pointer to the object which includes the storage location for the additional data
required by the proprietary object.<br>
The second parameter is the property identifer.<br>
The third parameter is the Array Index.<br>
The fourth parameter is the Value which will be returned via the service.<br>
The fifth parameter is a pointer to the error flag.<br>
The sixth parameter is a pointer to the error code.<br>
To override the Service, an application should return a value of zero, if the callback returns -1 then
the default handler will be used. See the local_objects sample for an example of it's usage.<br>
*/
typedef int (*read_object_proprietary_property_fn)(BACnetObjectContainer*, BACnetPropertyIdentifier, int, BACnetDataType*, int*, BACnetErrorCode*);
/**
This callback function is called by the application when a writeProperty or writePropertyMultiple request is made.
The first parameter is a pointer to the object which includes the storage location for the additional data
required by the proprietary object.<br>
The second parameter is the property identifer.<br>
The third parameter is the Array Index.<br>
The fourth parameter is the Priority.<br>
The fifth parameter is the Value which is to be returned via the service.<br>
The sixth parameter is a pointer to the error flag.<br>
The seventh parameter is a pointer to the error code.<br>
To override the Service, an application should return a value of zero, if the callback returns -1 then
the default handler will be used. The BACnet Server API will write the additional data to the database after
the callback has completed.
See the local_objects sample for an example of it's usage.<br>
*/
typedef int (*write_object_proprietary_property_fn)(BACnetObjectContainer*, BACnetPropertyIdentifier, int, UINT, BACnetDataType*, int*, BACnetErrorCode*);

/*@}*/

/** @defgroup CallbackObjectProcess Object Processing Overides
 *
The BACnet Server API processes all internal objects sequencially at 1 second intervals. For Each Object
the controller executes an algorithm based on the Object Type. For instance the AnalogInput object algorithm
performs the logic for generating Intrinsic Alarms.<br>
An implementor may wish to disable the default algorithm for the object, or may wish to extend the algorithm
to perform some custom actions using the proprietary properties that have been added to the object.<br>
The Callback function for object processing gives the implementor the ability to extend or modify the
algorithm for processing objects.
See the local_objects sample for an example of it's usage.<br>
 * @{
*/

/**
This Callback function will be called for each internal object every second.
To override the Service, an application should return a value of zero, if the callback returns -1 then
the default handler will be called.<br>
The first parameter to this function is a pointer to the Object including the Additional Data.
The second parameter to this function is the time of processing.
See the local_objects sample for an example of it's usage.<br>
*/

typedef int (*object_process_overide_fn)(BACnetObjectContainer*, time_t);


/**
This Callback function will be called just before a COV notification is generated. It enables
an application to append to the list of Active Subscriptions for generation of COV notifications.
The list of Active subscriptions is normally updated by the subscribeCOV service. An application
could append to the list of Active Subscriptions to for a COV notification to be sent to a desired
destination. The destination can be configured to use confirmed or unconfirmed COV event messages.<br>

To append to the list, a return value of -1 must be returned and the destination populated.
To append more destinations, the return value must be -1 and the more follws flag must be set.<br>
The first parameter to this function contains the Object Type.
The second paramter contains the instance number.
The third parameter contains the index number which starts from zero and is increment each time a destination is added.
The fourth parameter to this function is a pointer to the destination which must be populated by the application.
The fifth paramater is a flag to indicate that more subscriptions follow this one.
See the local_objects sample for an example of it's usage.<br>
*/

typedef int (*cov_append_active_subscription_fn)(BACnetObjectType, int, int, BACnetCOVSubscription*, int*);

/**
This Callback function will be called just before an Event notification is generated. It enables
an application to append to the Recipient List for generation of Event notifications.
The Recipient List of is normally located inside the Notification Class Object.
An application could append to the Recipient List for an Event notification to be sent to a desired
recipient. The recipient can be configured to use confirmed or unconfirmed COV event messages.<br>

To append to the list, a return value of -1 must be returned and the recipient populated.
To append more recipients, the return value must be -1 and the more follws flag must be set.<br>
The first parameter to this function contains the Object Type.
The second paramter contains the instance number.
The third parameter contains the index number which starts from zero and is increment each time a destination is added.
The fourth parameter to this function is a pointer to the destination which must be populated by the application.
The fifth paramater is a flag to indicate that more subscriptions follow this one.
See the local_objects sample for an example of it's usage.<br>
*/

typedef int (*event_append_recipient_list_fn)(BACnetObjectType, int, int, BACnetDestination*, int*);

/**
This callback is fired to indicate that the application should start or stop updating
the internal object. It will be fired with an Add/Cancel Indicator equal to 1 when
the application receives a readProperty, readPropertyMultiple, subscribeCOV or subscribeCOVProperty
request. It will be fired with an Add/Cancel Indicator equal to 0 after a period of 30 seconds when 
the last subscribeCOV subscription has expired, or the last readProperty, readPropertyMultiple request
was made. For objects that support intrinsic reporting, the present value
notification will be active when the Notification Type property is set to Alarm.
<br>

Parameter 1 is the device ID.<br>
Parameter 2 is the Object Type.<br>
Parameter 3 is the Object Instance.<br>
Parameter 4 is the Add/Cancel indicator. Cancel = 0, Add = 1.<br>
<br>
After the callback is fired with Add/Cancel = 1 an application can start
updating the present value of this property.

*/
typedef int (*read_present_value_notification_fn)(int, BACnetObjectType, int, BYTE);

/*@}*/

/** @defgroup CallbackLinuxSignal Linux Signal Handler
 *
The Linux Signal Handler callback function is executed when the SIGTERM signal has been sent.
This function should be used to enable the application to exit gracefully.
 * @{
*/

/**
Use this routine to stop the application, see the bacnsvr sample for more details
*/
typedef void (*signal_handler_fn) (void);

/*@}*/

/** @defgroup CallbackObjectAccessCOV Object Access COV Notification
 *
 COV notifications for Objects execute this callback function. Any type of COV notification for
 an object either internal or external will fire this notification. The rules for firing
 this notification depend on the Device and it's capabilities. If the Object is an internal object
 then no BACnet Services are used, the callback is fired whenever an internal object changes state.
 When the object is external, then the BACnet Service used depends upon the device capabilities.
 If the object only supports readProperty, then this service will be used. If the object supports
 readPropertyMultiple and does not support COV reoprting then readPropertyMultiple is used. If the object supports
 COV reporting, then a subscribeCOV message is sent and COV notifications will be sent from the device.
 The callback function contains the reference, value, internal_object_flag, error_code, status_flags and priority.
 * @{
*/

/**
<p>
  The first parameter contains a pointer to the reference of the internal object.<br>
  The second parameter indicates if the COV notification is for an internal object
  The third parameter contains the value of the property, this can be Any Data Type<br>
  The fourth parameter contains the error returned.<br>
  The fifth parameter contains the status_flags returned.<br>
  The sixth parameter contains the write priority. This will be zero if the object is not an <b>external</b> object. 
  If the write priority is greater than zero, then the presentValue has been overridden by a writeProperty or writeProperty multiple service.<br>
</p>
<p>
  See the local_objects sample for more details.
</p>

*/
typedef void (*object_access_cov_notification_fn)(BACnetDeviceObjectPropertyReference*, BYTE, BACnetDataType*, int, int, BYTE);

/*@}*/
/*@}*/
/*@}*/

typedef int (*library_module_init_fn)();
typedef int (*library_module_run_fn)();
typedef int (*library_module_stop_fn)();
typedef int (*library_module_message_fn)(int, void*);

typedef void (*object_present_value_read_request_notification_fn)(unsigned int, unsigned int, int, int, int);

#endif

