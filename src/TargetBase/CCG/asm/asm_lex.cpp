/*!!!!! this file has been generated using yyreplace.pl !!!!!*/
/* input files for yyreplace.pl: asm_lex.l, asm_lex.cpp~, asm_lex.h~*/

/*START yyreplace.pl: include files and #yy_movetop lines from asm_lex.l */
 #include <ctype.h>
 #include "fc_todebug\fc_assert.h"
 #include "fc_todebug\fc_mem.h"
 #include "asm_lex.h"
 #pragma warning( disable : 4068 4102 4244)
 //foreward
 class ASM_scanner;
/*END yyreplace.pl: include files from asm_lex.l */


/*START yyreplace.pl: file asm_lex.h~ */
#ifndef yy_state_t
#define yy_state_t unsigned int
#endif
#define YYNEWLINE 10

// MKS LEX prototype scanner header
// Copyright 1991 by Mortice Kern Systems Inc.
// All rights reserved.

// You can define YY_PRESERVE to get System V UNIX lex compatibility,
//	if you need to change yytext[] in your user actions
// This is quite a bit slower, though, so the default is without

#include <stdio.h>		// uses printf(), et cetera
#include <stdarg.h>		// uses va_list
#include <stdlib.h>		// uses exit()
#include <string.h>		// uses memmove()

class asm_lex_scan {
protected:
	yy_state_t * state;		// state buffer
	int	size;			// length of state buffer
	int	mustfree;		// set if space is allocated
	int	yy_end;			// end of pushback
	int	yy_start;		// start state
	int	yy_lastc;		// previous char
#ifdef YYEXIT
	int yyLexFatal;		// Lex Fatal Error Flag
#endif // YYEXIT
#ifndef YY_PRESERVE	// efficient default push-back scheme
	char save;		// saved yytext[yyleng]
#else			// slower push-back for yytext mungers
	char *save;		// saved yytext[]
	char *push;
#endif

public:
	char   *yytext;		// yytext text buffer
	FILE   *yyin;			// input stream
	FILE   *yyout;			// output stream
	int	yylineno;		// line number
	int	yyleng;			// yytext token length

	asm_lex_scan(int = 100);	// constructor for this scanner
			// default token & pushback size is 100 bytes
	asm_lex_scan(int, char*, char*, yy_state_t*);
				// constructor when tables are given

	~asm_lex_scan();		// destructor

	int	yylex();		// begin a scan

	virtual int	yygetc() {	// scanner source of input characters
		return getc(yyin);
	}

	virtual int	yywrap() { return 1; }	// EOF processing

	virtual void	yyerror(char *,...);	// print error message

	virtual void	output(int c) { putc(c, yyout); }

#ifdef YYEXIT
	virtual void	YY_FATAL(char * msg) {	// print message and set error flag
		yyerror(msg); yyLexFatal = 1;
	}
#else // YYEXIT
	virtual void	YY_FATAL(char * msg) {	// print message and stop
		yyerror(msg); exit(1);
	}
#endif // YYEXIT
	virtual void	ECHO() {		// print matched input
		fputs((const char *) yytext, yyout);
	}
	int	input();		// user-callable get-input
	int	unput(int c);		// user-callable unput character
	void	yy_reset();		// reset scanner
	void	setinput(FILE * in) {		// switch input streams
		yyin = in;
	}
	void	setoutput(FILE * out) {	// switch output
		yyout = out;
	}
	void	NLSTATE() { yy_lastc = YYNEWLINE; }
	void	YY_INIT() {
		yy_start = 0;
		yyleng = yy_end = 0;
		yy_lastc = YYNEWLINE;
	}
	void	YY_USER() {		// set up yytext for user
#ifndef YY_PRESERVE
		save = yytext[yyleng];
#else
		size_t n = yy_end - yyleng;
		push = save+size - n;
		if (n > 0)
			memmove(push, yytext+yyleng, n);
#endif
		yytext[yyleng] = 0;
	}
	void YY_SCANNER() {		// set up yytext for scanner
#ifndef YY_PRESERVE
		yytext[yyleng] = save;
#else
		size_t n = save+size - push;
		if (n > 0)
			memmove(yytext+yyleng, push, n);
		yy_end = yyleng + n;
#endif
	}
	void	yyless(int n) {		// trim input to 'n' bytes
		if (n >= 0 && n <= yy_end) {
			YY_SCANNER();
			yyleng = n;
			YY_USER();
		}
	}
	void	yycomment(char *const mat); // skip comment input
	int	yymapch(int delim, int escape);	// map C escapes
} ;
/*END yyreplace.pl: file asm_lex.h~ */
/*START yyreplace.pl: file asm_lex.cpp~ */
/* lex -alTv -LC -P C:\ATCMControl_SDK\GenWork\GenDir.tmp\4Control_R\gentools\yylex.cpp -o asm_lex.cpp~ -D asm_lex.h~ asm_lex.l */
#define INITIAL 0
const yy_endst = 786;
const yy_nxtmax = 4111;
#define YY_LA_SIZE 99

static unsigned int yy_la_act[] = {
 0, 66, 1, 66, 2, 66, 3, 66, 4, 66, 5, 66, 7, 66, 8, 66,
 9, 66, 10, 66, 11, 66, 12, 66, 13, 66, 14, 66, 15, 66, 16, 66,
 17, 66, 18, 66, 19, 66, 63, 66, 63, 66, 63, 66, 63, 66, 63, 66,
 63, 66, 63, 66, 63, 66, 63, 66, 63, 66, 53, 61, 66, 53, 61, 66,
 53, 61, 66, 53, 61, 66, 53, 61, 66, 63, 66, 63, 66, 63, 66, 62,
 66, 63, 66, 63, 66, 63, 66, 63, 66, 64, 65, 66, 66, 63, 63, 63,
 63, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 63, 63, 63, 63,
 63, 60, 63, 63, 63, 63, 63, 63, 59, 63, 63, 63, 58, 58, 58, 58,
 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
 58, 58, 58, 58, 58, 58, 63, 63, 63, 57, 57, 57, 57, 63, 63, 63,
 63, 63, 63, 63, 63, 63, 63, 63, 63, 54, 54, 54, 54, 53, 61, 53,
 53, 53, 53, 53, 61, 53, 53, 61, 61, 63, 63, 63, 53, 53, 53, 53,
 53, 53, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
 63, 63, 63, 63, 63, 63, 63, 56, 56, 56, 56, 55, 55, 63, 63, 63,
 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
 63, 63, 63, 52, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
 63, 63, 63, 51, 63, 6, 8, 66, 65, 66, 50, 63, 66, 50, 63, 66,
 50, 63, 66, 50, 63, 66, 50, 63, 66, 50, 63, 66, 50, 63, 66, 50,
 63, 66, 50, 63, 66, 50, 63, 66, 50, 63, 66, 50, 63, 66, 50, 63,
 66, 50, 63, 66, 50, 63, 66, 50, 63, 66, 50, 63, 66, 50, 63, 66,
 50, 63, 66, 50, 63, 66, 50, 63, 66, 50, 63, 66, 50, 63, 66, 50,
 63, 66, 50, 63, 66, 50, 63, 66, 50, 63, 50, 63, 50, 63, 50, 63,
 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 51, 63, 50, 63, 50,
 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50,
 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 52, 63, 50, 63,
 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63,
 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63,
 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63,
 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63,
 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63,
 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63,
 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63,
 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63,
 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63,
 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63,
 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63,
 50, 63, 49, 50, 63, 50, 63, 50, 63, 48, 50, 63, 50, 63, 44, 50,
 63, 45, 50, 63, 46, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 43,
 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 42, 50, 63, 41, 50, 63,
 50, 63, 50, 63, 50, 63, 50, 63, 40, 50, 63, 50, 63, 50, 63, 50,
 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50, 63, 50,
 63, 50, 63, 38, 50, 63, 36, 50, 63, 50, 63, 50, 63, 50, 63, 39,
 50, 63, 50, 63, 37, 50, 63, 50, 63, 35, 50, 63, 50, 63, 50, 63,
 50, 63, 47, 50, 63, 50, 63, 50, 63, 50, 63, 34, 50, 63, 50, 50,
 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
 50, 50, 50, 50, 49, 50, 50, 50, 48, 50, 50, 44, 50, 45, 50, 46,
 50, 50, 50, 50, 50, 50, 50, 42, 50, 41, 50, 50, 50, 50, 50, 40,
 50, 50, 38, 50, 36, 50, 50, 50, 50, 39, 50, 50, 37, 50, 50, 35,
 50, 50, 50, 50, 47, 50, 50, 50, 50, 34, 50, 33, 32, 31, 30, 29,
 27, 28, 25, 24, 23, 22, 21, 26, 20, 0
};

static unsigned char yy_look[] = {
 0
};

static int yy_final[] = {
 0, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28,
 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 61,
 64, 67, 70, 73, 75, 77, 79, 81, 83, 85, 87, 89, 90, 92, 93, 94,
 95, 96, 97, 98, 99, 100, 100, 100, 101, 101, 102, 102, 103, 104, 104, 104,
 105, 106, 107, 108, 109, 110, 111, 112, 113, 113, 113, 113, 113, 113, 113, 113,
 113, 113, 113, 113, 114, 115, 116, 117, 118, 119, 120, 120, 120, 120, 120, 120,
 120, 120, 120, 120, 120, 120, 120, 121, 121, 121, 121, 121, 121, 121, 121, 121,
 121, 121, 122, 123, 124, 124, 124, 124, 124, 124, 124, 125, 126, 127, 128, 129,
 129, 129, 129, 129, 129, 129, 129, 130, 131, 132, 133, 133, 133, 133, 133, 133,
 134, 135, 135, 135, 135, 136, 136, 136, 136, 136, 136, 136, 136, 137, 138, 139,
 140, 140, 140, 140, 140, 140, 140, 141, 142, 143, 143, 143, 143, 143, 143, 144,
 144, 144, 144, 144, 144, 145, 145, 145, 145, 145, 145, 145, 145, 146, 147, 148,
 149, 149, 149, 149, 149, 149, 149, 150, 150, 150, 150, 151, 151, 151, 151, 151,
 151, 152, 152, 152, 152, 152, 152, 153, 153, 153, 153, 153, 153, 154, 154, 154,
 154, 154, 154, 154, 154, 155, 156, 157, 158, 158, 158, 158, 158, 158, 158, 159,
 159, 159, 159, 160, 160, 160, 160, 161, 161, 161, 161, 162, 163, 164, 165, 166,
 167, 168, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 170, 170, 171, 171,
 172, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 185,
 185, 185, 185, 185, 185, 186, 186, 187, 187, 187, 188, 188, 189, 189, 191, 191,
 192, 192, 193, 193, 194, 194, 195, 197, 197, 198, 198, 199, 199, 200, 201, 202,
 203, 204, 204, 204, 205, 206, 207, 208, 208, 209, 210, 211, 212, 213, 214, 215,
 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 246,
 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247,
 247, 247, 247, 247, 247, 247, 248, 248, 249, 249, 250, 250, 251, 251, 251, 251,
 251, 251, 251, 251, 251, 252, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294,
 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 310,
 312, 314, 317, 320, 323, 326, 329, 332, 335, 338, 341, 344, 347, 350, 353, 356,
 359, 362, 365, 368, 371, 374, 377, 380, 383, 386, 389, 392, 394, 396, 398, 400,
 402, 404, 406, 408, 410, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433,
 435, 437, 439, 441, 443, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466,
 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498,
 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530,
 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562,
 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594,
 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626,
 629, 631, 633, 636, 638, 641, 644, 647, 649, 651, 653, 655, 656, 658, 660, 662,
 664, 666, 669, 672, 674, 676, 678, 680, 683, 685, 687, 689, 691, 693, 695, 697,
 699, 701, 703, 705, 707, 710, 713, 715, 717, 719, 722, 724, 727, 729, 732, 734,
 736, 738, 741, 743, 745, 747, 750, 750, 750, 751, 752, 753, 754, 755, 756, 757,
 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774,
 775, 776, 778, 779, 781, 783, 785, 786, 787, 788, 789, 790, 791, 793, 795, 796,
 797, 798, 799, 801, 802, 804, 806, 807, 808, 809, 811, 812, 814, 815, 817, 818,
 819, 820, 822, 823, 824, 825, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827,
 828, 828, 828, 828, 828, 828, 828, 829, 830, 830, 830, 831, 831, 831, 832, 832,
 832, 832, 832, 833, 833, 833, 833, 833, 833, 833, 834, 834, 834, 834, 834, 834,
 834, 835, 835, 835, 835, 835, 836, 836, 837, 837, 838, 839, 839, 839, 839, 840,
 840, 840, 841
};
#ifndef yy_state_t
#define yy_state_t unsigned int
#endif

static yy_state_t yy_begin[] = {
 0, 462, 0
};

static yy_state_t yy_next[] = {
 45, 45, 45, 45, 45, 45, 45, 45, 45, 44, 43, 45, 45, 44, 45, 45,
 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
 44, 45, 19, 45, 45, 38, 45, 19, 12, 13, 3, 1, 9, 2, 8, 4,
 30, 31, 32, 33, 33, 33, 33, 33, 34, 33, 6, 7, 18, 5, 17, 45,
 41, 39, 28, 39, 24, 39, 39, 39, 39, 23, 39, 39, 26, 39, 39, 39,
 39, 39, 35, 22, 36, 27, 39, 29, 39, 39, 39, 10, 45, 11, 45, 40,
 45, 39, 28, 39, 25, 39, 21, 39, 39, 23, 39, 39, 26, 39, 39, 37,
 39, 39, 35, 22, 20, 27, 39, 29, 39, 39, 39, 14, 16, 15, 45, 45,
 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
 45, 45, 45, 45, 45, 45, 45, 42, 45, 45, 45, 45, 45, 45, 45, 45,
 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 54, 58, 69, 70, 71, 72,
 46, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 84, 68, 85, 86, 48,
 67, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 53, 87, 54, 54, 786,
 54, 786, 53, 53, 65, 88, 89, 66, 54, 53, 58, 58, 90, 58, 786, 786,
 786, 51, 786, 786, 786, 786, 786, 50, 50, 50, 50, 50, 50, 50, 50, 50,
 50, 786, 134, 137, 156, 159, 786, 47, 50, 50, 50, 50, 50, 50, 50, 50,
 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
 50, 50, 135, 136, 157, 158, 52, 786, 50, 50, 50, 50, 50, 50, 50, 50,
 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
 50, 50, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 786, 167, 188, 191,
 228, 231, 144, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 168, 189, 190,
 229, 230, 143, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 56, 56,
 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57,
 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 61, 117, 116,
 257, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 59, 59, 59, 59, 59,
 59, 59, 59, 59, 59, 258, 167, 255, 256, 786, 277, 274, 59, 59, 59, 59,
 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
 59, 59, 59, 59, 59, 59, 168, 255, 256, 278, 60, 255, 59, 59, 59, 59,
 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
 59, 59, 59, 59, 59, 59, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
 62, 62, 62, 62, 62, 62, 62, 62, 63, 62, 62, 62, 62, 62, 62, 62,
 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
 62, 62, 62, 62, 62, 62, 54, 138, 138, 138, 138, 138, 138, 138, 138, 138,
 138, 279, 786, 58, 280, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 281,
 786, 275, 282, 258, 286, 786, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
 116, 256, 116, 786, 52, 786, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
 73, 82, 112, 100, 73, 82, 112, 100, 113, 786, 786, 786, 786, 786, 114, 786,
 786, 786, 786, 306, 786, 786, 786, 73, 82, 112, 100, 786, 276, 307, 307, 311,
 786, 83, 102, 786, 786, 321, 101, 786, 115, 786, 160, 160, 160, 160, 160, 160,
 160, 160, 160, 160, 786, 786, 786, 76, 74, 74, 74, 74, 74, 74, 74, 74,
 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
 74, 74, 283, 786, 284, 786, 75, 786, 74, 74, 74, 74, 74, 74, 74, 74,
 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
 74, 74, 283, 786, 284, 786, 786, 786, 82, 786, 786, 285, 82, 128, 128, 128,
 128, 128, 128, 128, 128, 128, 128, 786, 786, 786, 786, 786, 786, 318, 319, 82,
 306, 786, 311, 786, 786, 786, 786, 786, 83, 786, 786, 285, 786, 321, 77, 81,
 81, 81, 81, 81, 81, 81, 81, 81, 81, 786, 321, 786, 127, 318, 319, 78,
 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 309, 309, 786, 786, 80, 321,
 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 91, 786, 321, 786, 91, 150,
 150, 150, 150, 150, 150, 150, 150, 150, 150, 308, 320, 332, 333, 786, 321, 786,
 310, 91, 303, 303, 303, 303, 303, 303, 303, 303, 786, 786, 163, 163, 163, 163,
 163, 163, 163, 163, 163, 163, 79, 321, 286, 786, 320, 332, 333, 334, 149, 786,
 786, 94, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 321, 334, 321, 315,
 93, 786, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 786, 335, 786, 315,
 786, 340, 100, 341, 342, 368, 100, 165, 165, 165, 165, 165, 165, 165, 165, 165,
 165, 329, 786, 343, 344, 345, 346, 347, 348, 100, 786, 786, 412, 335, 413, 414,
 786, 340, 102, 341, 342, 101, 415, 786, 95, 99, 99, 99, 99, 99, 99, 99,
 99, 99, 99, 343, 344, 345, 346, 347, 348, 96, 99, 99, 99, 99, 99, 99,
 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
 99, 99, 99, 99, 786, 349, 350, 354, 98, 786, 99, 99, 99, 99, 99, 99,
 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
 99, 99, 99, 99, 103, 349, 350, 354, 103, 146, 146, 146, 146, 146, 146, 146,
 146, 146, 146, 416, 417, 786, 418, 419, 368, 366, 321, 103, 192, 192, 192, 192,
 192, 192, 192, 192, 192, 192, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
 97, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 106, 104, 104, 104, 104,
 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
 104, 104, 104, 104, 104, 104, 355, 356, 357, 358, 105, 786, 104, 104, 104, 104,
 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
 104, 104, 104, 104, 104, 104, 355, 356, 357, 358, 786, 359, 112, 360, 361, 786,
 112, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 321, 786, 786, 429, 407,
 430, 431, 366, 112, 366, 432, 433, 434, 435, 436, 786, 359, 102, 360, 361, 786,
 368, 321, 107, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 321, 786, 408,
 169, 786, 786, 108, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 411, 442,
 428, 786, 110, 786, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 121, 786,
 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 176, 176, 176, 176, 176, 176,
 176, 176, 176, 176, 122, 409, 330, 409, 123, 443, 407, 444, 420, 124, 786, 445,
 331, 421, 449, 126, 258, 453, 786, 454, 455, 456, 109, 786, 457, 458, 258, 119,
 786, 116, 459, 460, 122, 410, 330, 409, 123, 175, 407, 786, 420, 125, 786, 786,
 331, 421, 131, 126, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 140, 140,
 140, 140, 140, 140, 140, 140, 140, 140, 786, 786, 786, 338, 422, 786, 423, 424,
 337, 133, 426, 339, 427, 437, 438, 439, 440, 441, 336, 133, 786, 452, 461, 499,
 786, 500, 501, 129, 507, 508, 255, 509, 256, 786, 786, 338, 422, 139, 423, 424,
 337, 132, 407, 339, 409, 437, 438, 439, 440, 441, 336, 132, 142, 142, 142, 142,
 142, 142, 142, 142, 142, 142, 450, 147, 451, 146, 146, 146, 146, 146, 146, 146,
 146, 146, 146, 153, 502, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 144,
 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 504, 141, 148, 510, 511, 512,
 504, 502, 155, 513, 503, 514, 515, 516, 145, 527, 528, 529, 530, 155, 531, 143,
 532, 533, 534, 560, 151, 564, 565, 566, 567, 568, 505, 569, 148, 590, 591, 161,
 504, 502, 154, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 154, 173, 522,
 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 182, 182, 182, 182, 182, 182,
 182, 182, 182, 182, 524, 524, 166, 535, 494, 592, 494, 536, 537, 174, 593, 523,
 594, 179, 164, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 595, 506, 171,
 596, 538, 597, 605, 525, 524, 166, 535, 494, 181, 494, 536, 537, 174, 494, 539,
 494, 494, 522, 494, 606, 185, 180, 184, 184, 184, 184, 184, 184, 184, 184, 184,
 184, 538, 177, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 607, 611, 539,
 612, 540, 522, 541, 187, 613, 180, 305, 305, 305, 305, 305, 305, 305, 305, 116,
 187, 258, 542, 258, 547, 614, 183, 197, 197, 197, 197, 197, 197, 197, 197, 197,
 197, 540, 193, 541, 186, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 619,
 186, 548, 542, 549, 547, 115, 304, 494, 550, 494, 198, 199, 199, 199, 199, 199,
 199, 199, 199, 199, 199, 621, 196, 201, 201, 201, 201, 201, 201, 201, 201, 201,
 201, 548, 551, 549, 552, 447, 622, 494, 550, 494, 198, 448, 368, 494, 446, 494,
 494, 553, 494, 554, 202, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 623,
 555, 556, 551, 624, 552, 207, 200, 206, 206, 206, 206, 206, 206, 206, 206, 206,
 206, 553, 494, 554, 202, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 208,
 555, 556, 625, 213, 203, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 557,
 561, 562, 494, 627, 628, 629, 205, 630, 494, 631, 635, 494, 636, 637, 638, 208,
 570, 571, 214, 639, 209, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 557,
 502, 504, 572, 219, 211, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 640,
 570, 571, 214, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 641, 642, 576,
 577, 578, 572, 579, 215, 580, 643, 225, 220, 224, 224, 224, 224, 224, 224, 224,
 224, 224, 224, 644, 217, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 576,
 577, 578, 221, 579, 581, 580, 227, 648, 220, 649, 234, 234, 234, 234, 234, 234,
 234, 234, 234, 234, 582, 583, 584, 585, 223, 235, 235, 235, 235, 235, 235, 235,
 235, 235, 235, 650, 581, 587, 226, 227, 237, 237, 237, 237, 237, 237, 237, 237,
 237, 237, 651, 652, 582, 583, 584, 585, 653, 233, 237, 237, 237, 237, 237, 237,
 237, 237, 237, 237, 588, 522, 600, 226, 601, 602, 603, 238, 218, 218, 218, 218,
 218, 218, 218, 218, 218, 218, 656, 236, 239, 239, 239, 239, 239, 239, 239, 239,
 239, 239, 540, 570, 524, 657, 600, 571, 601, 602, 603, 238, 241, 241, 241, 241,
 241, 241, 241, 241, 241, 241, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
 572, 617, 540, 608, 618, 604, 584, 609, 658, 242, 245, 245, 245, 245, 245, 245,
 245, 245, 245, 245, 558, 598, 366, 659, 610, 660, 559, 240, 661, 655, 683, 599,
 572, 617, 246, 633, 618, 684, 645, 634, 654, 242, 247, 247, 247, 247, 247, 247,
 247, 247, 247, 247, 495, 598, 632, 685, 686, 244, 494, 687, 494, 494, 688, 599,
 689, 690, 246, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
 249, 249, 249, 249, 249, 249, 249, 250, 616, 616, 691, 251, 494, 692, 693, 694,
 252, 619, 494, 615, 695, 494, 254, 120, 120, 120, 120, 120, 120, 120, 120, 120,
 120, 696, 248, 697, 698, 699, 700, 250, 616, 616, 701, 251, 702, 703, 704, 705,
 253, 706, 707, 708, 620, 709, 254, 259, 259, 259, 259, 259, 259, 259, 259, 259,
 259, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 262, 263, 263, 263, 263,
 263, 263, 263, 263, 263, 263, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265,
 266, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 712, 713, 714, 715, 270,
 260, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 271, 271, 271, 271, 271,
 271, 271, 271, 271, 271, 264, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
 287, 716, 287, 717, 720, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 291,
 268, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 292, 292, 292, 292, 292,
 292, 292, 292, 292, 292, 272, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 721, 295, 296, 585, 296, 722,
 289, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 723, 710, 724, 646, 719,
 725, 734, 735, 302, 738, 293, 711, 739, 647, 740, 718, 295, 741, 585, 291, 298,
 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 312, 312, 312, 312, 312, 312,
 312, 312, 312, 312, 742, 743, 744, 746, 745, 747, 748, 312, 312, 312, 312, 312,
 312, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 749, 750, 751, 752, 300,
 753, 737, 314, 314, 314, 314, 314, 314, 736, 754, 755, 312, 312, 312, 312, 312,
 312, 322, 756, 322, 757, 758, 323, 324, 325, 323, 323, 323, 323, 323, 326, 323,
 313, 759, 314, 314, 314, 314, 314, 314, 316, 316, 316, 316, 316, 316, 316, 316,
 316, 316, 366, 760, 761, 762, 763, 764, 765, 316, 316, 316, 316, 316, 316, 317,
 317, 317, 317, 317, 317, 317, 317, 317, 317, 321, 766, 767, 768, 769, 770, 771,
 317, 317, 317, 317, 317, 317, 302, 772, 494, 316, 316, 316, 316, 316, 316, 366,
 773, 774, 775, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 351, 526, 494,
 317, 317, 317, 317, 317, 317, 353, 777, 494, 598, 778, 352, 779, 364, 494, 780,
 781, 494, 782, 599, 783, 362, 784, 785, 786, 786, 776, 786, 786, 351, 786, 494,
 367, 786, 327, 363, 786, 494, 353, 786, 494, 598, 626, 352, 786, 365, 786, 786,
 786, 786, 786, 599, 786, 362, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
 367, 372, 786, 363, 371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 373, 373,
 373, 373, 373, 373, 373, 373, 373, 373, 376, 786, 786, 375, 375, 375, 375, 375,
 375, 375, 375, 375, 375, 377, 377, 377, 377, 377, 377, 377, 377, 377, 377, 786,
 786, 380, 786, 370, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 381, 381,
 381, 381, 381, 381, 381, 381, 381, 381, 786, 786, 374, 383, 383, 383, 383, 383,
 383, 383, 383, 383, 383, 384, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
 786, 786, 786, 378, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 388, 389,
 389, 389, 389, 389, 389, 389, 389, 389, 389, 392, 382, 391, 391, 391, 391, 391,
 391, 391, 391, 391, 391, 393, 393, 393, 393, 393, 393, 393, 393, 393, 393, 786,
 786, 786, 786, 386, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 396, 396,
 396, 396, 396, 396, 396, 396, 396, 396, 399, 786, 390, 398, 398, 398, 398, 398,
 398, 398, 398, 398, 398, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 786,
 786, 403, 786, 394, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 404, 404,
 404, 404, 404, 404, 404, 404, 404, 404, 366, 368, 397, 406, 406, 406, 406, 406,
 406, 406, 406, 406, 406, 786, 786, 786, 786, 786, 786, 494, 786, 786, 786, 786,
 786, 786, 786, 401, 786, 543, 425, 464, 786, 573, 544, 464, 786, 545, 362, 494,
 786, 563, 574, 786, 546, 786, 786, 575, 786, 367, 405, 494, 363, 786, 464, 786,
 786, 494, 786, 786, 494, 543, 364, 786, 786, 573, 544, 786, 463, 545, 362, 494,
 786, 786, 574, 786, 546, 494, 786, 575, 494, 367, 786, 786, 363, 786, 489, 476,
 477, 476, 478, 476, 476, 476, 476, 479, 476, 476, 480, 476, 476, 476, 476, 476,
 481, 472, 482, 483, 476, 484, 476, 476, 476, 786, 786, 786, 786, 488, 786, 469,
 470, 465, 485, 476, 486, 476, 476, 467, 473, 476, 480, 476, 476, 468, 476, 476,
 474, 471, 487, 483, 466, 475, 476, 476, 476, 494, 494, 494, 494, 494, 494, 494,
 494, 494, 494, 321, 786, 786, 786, 786, 786, 491, 494, 494, 494, 494, 494, 494,
 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494,
 494, 494, 494, 494, 786, 490, 786, 786, 493, 494, 494, 494, 494, 494, 494, 494,
 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494,
 494, 494, 494, 494, 786, 786, 786, 786, 732, 494, 733, 727, 731, 786, 786, 494,
 786, 786, 494, 786, 116, 728, 786, 730, 729, 726, 786, 786, 786, 786, 786, 786,
 786, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 321, 786, 786, 786, 786,
 492, 491, 494, 494, 494, 494, 494, 494, 494, 494, 495, 494, 494, 494, 494, 494,
 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 786, 321, 366, 321,
 493, 494, 494, 494, 494, 494, 494, 494, 494, 494, 496, 494, 494, 494, 494, 494,
 497, 494, 494, 498, 494, 494, 494, 494, 494, 494, 494, 494, 517, 786, 786, 786,
 321, 494, 786, 494, 518, 494, 786, 494, 786, 786, 494, 321, 786, 258, 786, 519,
 786, 786, 520, 786, 786, 258, 786, 286, 786, 321, 786, 786, 521, 786, 786, 786,
 786, 286, 786, 494, 518, 494, 494, 786, 492, 494, 494, 494, 494, 494, 494, 519,
 321, 494, 520, 494, 786, 786, 786, 786, 321, 786, 366, 494, 786, 494, 786, 494,
 786, 786, 786, 786, 368, 786, 494, 494, 786, 366, 786, 321, 494, 786, 786, 494,
 786, 494, 786, 494, 786, 321, 494, 494, 586, 494, 494, 494, 494, 494, 494, 494,
 518, 494, 321, 494, 494, 494, 494, 494, 494, 786, 494, 519, 786, 494, 520, 494,
 494, 494, 786, 786, 786, 786, 494, 786, 517, 786, 786, 494, 494, 786, 494, 494,
 518, 786, 90, 786, 494, 589, 494, 494, 494, 494, 494, 519, 786, 786, 520, 494,
 494, 494, 72, 494, 786, 494, 786, 494, 494, 786, 494, 494, 786, 786, 786, 786,
 786, 494, 786, 494, 494, 786, 662, 786, 494, 786, 662, 786, 786, 786, 494, 786,
 786, 494, 786, 494, 786, 786, 786, 786, 786, 786, 786, 786, 786, 662, 786, 786,
 786, 786, 786, 494, 786, 786, 786, 786, 786, 494, 786, 663, 494, 786, 786, 786,
 786, 786, 786, 494, 786, 786, 786, 786, 786, 494, 786, 786, 494, 677, 675, 675,
 675, 675, 675, 675, 675, 675, 675, 675, 675, 675, 675, 675, 675, 675, 675, 675,
 671, 675, 675, 675, 675, 675, 675, 675, 786, 786, 786, 786, 676, 786, 668, 669,
 664, 675, 675, 675, 675, 675, 666, 672, 675, 675, 675, 675, 667, 675, 675, 673,
 670, 675, 675, 665, 674, 675, 675, 675, 682, 682, 682, 682, 682, 682, 682, 682,
 682, 682, 786, 786, 786, 786, 786, 786, 679, 682, 682, 682, 682, 682, 682, 682,
 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682,
 682, 682, 682, 786, 678, 786, 786, 681, 786, 682, 682, 682, 682, 682, 682, 682,
 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682, 682,
 682, 682, 682, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786,
 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786,
 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 680,
 0
};

static yy_state_t yy_check[] = {
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 55, 50, 68, 69, 70, 71,
 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 67, 37, 84, 85, 42,
 37, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 51, 86, 57, 60, 60,
 59, 59, 66, 65, 51, 87, 88, 51, 38, 38, 57, 60, 89, 59, 66, 65,
 127, 38, 149, 181, 175, 169, 221, 38, 38, 38, 38, 38, 38, 38, 38, 38,
 38, 215, 133, 132, 155, 154, 209, 42, 38, 38, 38, 38, 38, 38, 38, 38,
 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
 38, 38, 133, 132, 155, 154, 38, 203, 38, 38, 38, 38, 38, 38, 38, 38,
 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
 38, 38, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 117, 124, 187, 186,
 227, 226, 253, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 124, 187, 186,
 227, 226, 253, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 53, 53, 53,
 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 58, 116, 256,
 114, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 58, 58, 58, 58, 58,
 58, 58, 58, 58, 58, 257, 252, 115, 255, 272, 276, 113, 58, 58, 58, 58,
 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
 58, 58, 58, 58, 58, 58, 252, 115, 255, 277, 58, 113, 58, 58, 58, 58,
 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
 58, 58, 58, 58, 58, 58, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
 61, 61, 61, 61, 61, 61, 52, 131, 131, 131, 131, 131, 131, 131, 131, 131,
 131, 278, 268, 52, 279, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 280,
 264, 274, 281, 282, 285, 298, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
 275, 274, 36, 268, 52, 264, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
 72, 82, 112, 100, 72, 82, 112, 100, 36, 139, 296, 287, 296, 287, 36, 304,
 301, 260, 33, 32, 141, 161, 308, 72, 82, 112, 100, 139, 275, 306, 306, 310,
 141, 82, 112, 313, 289, 320, 100, 161, 36, 139, 153, 153, 153, 153, 153, 153,
 153, 153, 153, 153, 141, 161, 260, 72, 72, 72, 72, 72, 72, 72, 72, 72,
 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
 72, 72, 35, 328, 283, 289, 72, 129, 72, 72, 72, 72, 72, 72, 72, 72,
 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
 72, 72, 35, 244, 283, 193, 129, 200, 77, 233, 240, 284, 77, 126, 126, 126,
 126, 126, 126, 126, 126, 126, 126, 193, 129, 200, 244, 233, 240, 29, 318, 77,
 325, 300, 329, 244, 323, 193, 129, 200, 77, 233, 240, 284, 300, 333, 72, 77,
 77, 77, 77, 77, 77, 77, 77, 77, 77, 322, 335, 322, 126, 29, 318, 77,
 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 307, 307, 151, 300, 77, 342,
 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 90, 151, 345, 31, 90, 148,
 148, 148, 148, 148, 148, 148, 148, 148, 148, 307, 319, 331, 332, 151, 347, 293,
 31, 90, 302, 302, 302, 302, 302, 302, 302, 302, 30, 151, 147, 147, 147, 147,
 147, 147, 147, 147, 147, 147, 77, 350, 356, 293, 319, 331, 332, 330, 148, 293,
 327, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 359, 330, 361, 30,
 90, 183, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 327, 334, 324, 30,
 183, 339, 95, 340, 341, 367, 95, 164, 164, 164, 164, 164, 164, 164, 164, 164,
 164, 324, 183, 338, 343, 344, 337, 346, 336, 95, 394, 405, 411, 334, 412, 413,
 183, 339, 95, 340, 341, 95, 414, 378, 90, 95, 95, 95, 95, 95, 95, 95,
 95, 95, 95, 338, 343, 344, 337, 346, 336, 95, 95, 95, 95, 95, 95, 95,
 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
 95, 95, 95, 95, 390, 348, 349, 353, 95, 378, 95, 95, 95, 95, 95, 95,
 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
 95, 95, 95, 95, 101, 348, 349, 353, 101, 145, 145, 145, 145, 145, 145, 145,
 145, 145, 145, 415, 416, 390, 417, 418, 419, 409, 422, 101, 185, 185, 185, 185,
 185, 185, 185, 185, 185, 185, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
 95, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 101, 101, 101, 101, 101,
 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
 101, 101, 101, 101, 101, 101, 354, 355, 352, 357, 101, 171, 101, 101, 101, 101,
 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
 101, 101, 101, 101, 101, 101, 354, 355, 352, 357, 171, 358, 107, 351, 360, 374,
 107, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 424, 171, 386, 428, 365,
 429, 430, 410, 107, 427, 431, 432, 433, 434, 435, 171, 358, 107, 351, 360, 370,
 436, 438, 101, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 441, 382, 365,
 123, 374, 386, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 410, 21,
 427, 370, 107, 382, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 118, 223,
 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 174, 174, 174, 174, 174, 174,
 174, 174, 174, 174, 118, 408, 28, 407, 118, 442, 364, 443, 363, 118, 223, 444,
 28, 420, 448, 118, 449, 452, 401, 453, 454, 455, 107, 397, 456, 457, 458, 118,
 223, 451, 446, 459, 118, 408, 28, 407, 118, 174, 364, 211, 363, 118, 223, 205,
 28, 420, 128, 118, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 138, 138,
 138, 138, 138, 138, 138, 138, 138, 138, 401, 205, 211, 27, 421, 397, 362, 423,
 27, 128, 425, 27, 426, 23, 437, 22, 439, 440, 27, 138, 211, 451, 6, 498,
 205, 499, 497, 128, 506, 507, 447, 508, 450, 205, 211, 27, 421, 138, 362, 423,
 27, 128, 425, 27, 426, 23, 437, 22, 439, 440, 27, 138, 125, 125, 125, 125,
 125, 125, 125, 125, 125, 125, 447, 142, 450, 142, 142, 142, 142, 142, 142, 142,
 142, 142, 142, 150, 496, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 125,
 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 503, 125, 142, 509, 510, 511,
 502, 495, 150, 486, 496, 513, 514, 515, 142, 526, 527, 528, 529, 160, 530, 125,
 531, 532, 533, 559, 150, 563, 564, 565, 566, 567, 503, 568, 142, 589, 590, 160,
 502, 495, 150, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 160, 170, 521,
 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 180, 180, 180, 180, 180, 180,
 180, 180, 180, 180, 523, 522, 163, 520, 505, 591, 504, 535, 536, 170, 592, 521,
 593, 176, 163, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 594, 505, 170,
 595, 518, 596, 604, 523, 522, 163, 520, 505, 180, 504, 535, 536, 170, 505, 538,
 504, 505, 517, 504, 605, 182, 176, 182, 182, 182, 182, 182, 182, 182, 182, 182,
 182, 518, 176, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 606, 473, 538,
 611, 484, 517, 540, 182, 612, 176, 303, 303, 303, 303, 303, 303, 303, 303, 20,
 192, 501, 541, 512, 546, 613, 182, 195, 195, 195, 195, 195, 195, 195, 195, 195,
 195, 484, 192, 540, 182, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 615,
 192, 547, 541, 548, 546, 20, 303, 501, 545, 512, 195, 173, 173, 173, 173, 173,
 173, 173, 173, 173, 173, 620, 195, 199, 199, 199, 199, 199, 199, 199, 199, 199,
 199, 547, 550, 548, 551, 20, 621, 501, 545, 512, 195, 20, 534, 501, 20, 512,
 501, 544, 512, 553, 199, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 622,
 543, 555, 550, 623, 551, 204, 199, 204, 204, 204, 204, 204, 204, 204, 204, 204,
 204, 544, 534, 553, 199, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 204,
 543, 555, 624, 210, 122, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 556,
 558, 561, 534, 469, 627, 628, 204, 629, 534, 630, 634, 534, 635, 636, 637, 204,
 481, 570, 210, 638, 208, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 556,
 558, 561, 571, 216, 210, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 639,
 481, 570, 210, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 633, 641, 575,
 576, 577, 571, 574, 214, 579, 642, 222, 216, 222, 222, 222, 222, 222, 222, 222,
 222, 222, 222, 632, 216, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 575,
 576, 577, 220, 574, 580, 579, 222, 647, 216, 648, 232, 232, 232, 232, 232, 232,
 232, 232, 232, 232, 573, 582, 479, 584, 222, 219, 219, 219, 219, 219, 219, 219,
 219, 219, 219, 646, 580, 586, 222, 232, 235, 235, 235, 235, 235, 235, 235, 235,
 235, 235, 650, 466, 573, 582, 479, 584, 652, 232, 236, 236, 236, 236, 236, 236,
 236, 236, 236, 236, 587, 586, 599, 232, 600, 598, 602, 235, 217, 217, 217, 217,
 217, 217, 217, 217, 217, 217, 655, 235, 213, 213, 213, 213, 213, 213, 213, 213,
 213, 213, 475, 474, 587, 656, 599, 608, 600, 598, 602, 235, 239, 239, 239, 239,
 239, 239, 239, 239, 239, 239, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
 609, 616, 475, 474, 617, 475, 467, 608, 654, 239, 243, 243, 243, 243, 243, 243,
 243, 243, 243, 243, 482, 477, 524, 658, 609, 659, 482, 239, 660, 465, 674, 477,
 609, 616, 243, 468, 617, 683, 467, 468, 465, 239, 121, 121, 121, 121, 121, 121,
 121, 121, 121, 121, 482, 477, 468, 684, 685, 243, 482, 673, 524, 482, 687, 477,
 688, 672, 243, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 248, 248, 248,
 248, 248, 248, 248, 248, 248, 248, 247, 472, 471, 690, 247, 524, 691, 692, 671,
 247, 694, 524, 472, 670, 524, 247, 119, 119, 119, 119, 119, 119, 119, 119, 119,
 119, 695, 247, 696, 697, 698, 699, 247, 472, 471, 669, 247, 668, 702, 703, 704,
 247, 705, 667, 707, 471, 666, 247, 258, 258, 258, 258, 258, 258, 258, 258, 258,
 258, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 262, 262, 262, 262,
 262, 262, 262, 262, 262, 262, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263,
 263, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 711, 712, 710, 714, 267,
 259, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 270, 270, 270, 270, 270,
 270, 270, 270, 270, 270, 263, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271,
 286, 665, 286, 716, 719, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 288,
 267, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 291, 291, 291, 291, 291,
 291, 291, 291, 291, 291, 271, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 720, 292, 295, 645, 295, 718,
 288, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 722, 709, 723, 645, 664,
 724, 733, 734, 34, 737, 292, 709, 738, 645, 739, 664, 292, 740, 645, 34, 297,
 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 311, 311, 311, 311, 311, 311,
 311, 311, 311, 311, 741, 742, 736, 745, 736, 744, 747, 311, 311, 311, 311, 311,
 311, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 748, 731, 750, 751, 34,
 752, 732, 312, 312, 312, 312, 312, 312, 732, 753, 754, 311, 311, 311, 311, 311,
 311, 321, 755, 321, 756, 757, 321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
 312, 758, 312, 312, 312, 312, 312, 312, 315, 315, 315, 315, 315, 315, 315, 315,
 315, 315, 525, 759, 760, 730, 762, 763, 764, 315, 315, 315, 315, 315, 315, 316,
 316, 316, 316, 316, 316, 316, 316, 316, 316, 537, 765, 766, 767, 729, 769, 770,
 316, 316, 316, 316, 316, 316, 326, 771, 525, 315, 315, 315, 315, 315, 315, 25,
 772, 728, 774, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 26, 525, 537,
 316, 316, 316, 316, 316, 316, 26, 727, 525, 470, 776, 26, 726, 25, 525, 779,
 779, 525, 781, 470, 780, 25, 783, 784, ~0U, ~0U, 727, ~0U, ~0U, 26, ~0U, 537,
 25, ~0U, 326, 25, ~0U, 537, 26, ~0U, 537, 470, 470, 26, ~0U, 25, ~0U, ~0U,
 ~0U, ~0U, ~0U, 470, ~0U, 25, 368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
 25, 369, ~0U, 25, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 372, 372,
 372, 372, 372, 372, 372, 372, 372, 372, 373, ~0U, ~0U, 373, 373, 373, 373, 373,
 373, 373, 373, 373, 373, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, ~0U,
 ~0U, 377, ~0U, 369, 377, 377, 377, 377, 377, 377, 377, 377, 377, 377, 380, 380,
 380, 380, 380, 380, 380, 380, 380, 380, ~0U, ~0U, 373, 381, 381, 381, 381, 381,
 381, 381, 381, 381, 381, 381, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
 ~0U, ~0U, ~0U, 377, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 388,
 388, 388, 388, 388, 388, 388, 388, 388, 388, 389, 381, 389, 389, 389, 389, 389,
 389, 389, 389, 389, 389, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, ~0U,
 ~0U, ~0U, ~0U, 385, 393, 393, 393, 393, 393, 393, 393, 393, 393, 393, 366, 366,
 366, 366, 366, 366, 366, 366, 366, 366, 396, ~0U, 389, 396, 396, 396, 396, 396,
 396, 396, 396, 396, 396, 399, 399, 399, 399, 399, 399, 399, 399, 399, 399, ~0U,
 ~0U, 400, ~0U, 393, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 403, 403,
 403, 403, 403, 403, 403, 403, 403, 403, 24, 519, 396, 404, 404, 404, 404, 404,
 404, 404, 404, 404, 404, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, 562, ~0U, ~0U, ~0U, ~0U,
 ~0U, ~0U, ~0U, 400, ~0U, 483, 24, 462, ~0U, 480, 483, 462, ~0U, 483, 24, 519,
 ~0U, 562, 480, ~0U, 483, ~0U, ~0U, 480, ~0U, 24, 404, 562, 24, ~0U, 462, ~0U,
 ~0U, 562, ~0U, ~0U, 562, 483, 24, ~0U, ~0U, 480, 483, ~0U, 462, 483, 24, 519,
 ~0U, ~0U, 480, ~0U, 483, 519, ~0U, 480, 519, 24, ~0U, ~0U, 24, ~0U, 462, 462,
 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
 462, 462, 462, 462, 462, 462, 462, 462, 462, ~0U, ~0U, ~0U, ~0U, 462, ~0U, 462,
 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
 462, 462, 462, 462, 462, 462, 462, 462, 462, 490, 490, 490, 490, 490, 490, 490,
 490, 490, 490, 539, ~0U, ~0U, ~0U, ~0U, ~0U, 490, 490, 490, 490, 490, 490, 490,
 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490,
 490, 490, 490, 490, ~0U, 462, ~0U, ~0U, 490, 539, 490, 490, 490, 490, 490, 490,
 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490,
 490, 490, 490, 490, ~0U, ~0U, ~0U, ~0U, 663, 539, 663, 663, 663, ~0U, ~0U, 539,
 ~0U, ~0U, 539, ~0U, 487, 663, ~0U, 663, 663, 663, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U,
 ~0U, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 542, ~0U, ~0U, ~0U, ~0U,
 490, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487,
 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, ~0U, 549, 485, 552,
 487, 542, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487,
 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 485, ~0U, ~0U, ~0U,
 554, 542, ~0U, 549, 485, 552, ~0U, 542, ~0U, ~0U, 542, 557, ~0U, 560, ~0U, 485,
 ~0U, ~0U, 485, ~0U, ~0U, 569, ~0U, 572, ~0U, 578, ~0U, ~0U, 485, ~0U, ~0U, ~0U,
 ~0U, 581, ~0U, 549, 485, 552, 554, ~0U, 487, 549, 485, 552, 549, 485, 552, 485,
 583, 557, 485, 560, ~0U, ~0U, ~0U, ~0U, 585, ~0U, 478, 569, ~0U, 572, ~0U, 578,
 ~0U, ~0U, ~0U, ~0U, 597, ~0U, 554, 581, ~0U, 588, ~0U, 601, 554, ~0U, ~0U, 554,
 ~0U, 557, ~0U, 560, ~0U, 603, 583, 557, 478, 560, 557, 569, 560, 572, 585, 578,
 478, 569, 618, 572, 569, 578, 572, 581, 578, ~0U, 597, 478, ~0U, 581, 478, 588,
 581, 601, ~0U, ~0U, ~0U, ~0U, 583, ~0U, 478, ~0U, ~0U, 603, 583, 640, 585, 583,
 478, ~0U, 640, ~0U, 585, 588, 478, 585, 618, 478, 597, 478, ~0U, 643, 478, 588,
 597, 601, 643, 597, ~0U, 588, ~0U, 601, 588, ~0U, 601, 603, ~0U, ~0U, ~0U, ~0U,
 ~0U, 603, ~0U, 640, 603, ~0U, 464, ~0U, 618, ~0U, 464, ~0U, ~0U, ~0U, 618, ~0U,
 ~0U, 618, ~0U, 643, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, 464, ~0U, ~0U,
 ~0U, ~0U, ~0U, 640, ~0U, ~0U, ~0U, ~0U, ~0U, 640, ~0U, 464, 640, ~0U, ~0U, ~0U,
 ~0U, ~0U, ~0U, 643, ~0U, ~0U, ~0U, ~0U, ~0U, 643, ~0U, ~0U, 643, 464, 464, 464,
 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464,
 464, 464, 464, 464, 464, 464, 464, 464, ~0U, ~0U, ~0U, ~0U, 464, ~0U, 464, 464,
 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464,
 464, 464, 464, 464, 464, 464, 464, 464, 678, 678, 678, 678, 678, 678, 678, 678,
 678, 678, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, 678, 678, 678, 678, 678, 678, 678, 678,
 678, 678, 678, 678, 678, 678, 678, 678, 678, 678, 678, 678, 678, 678, 678, 678,
 678, 678, 678, ~0U, 464, ~0U, ~0U, 678, ~0U, 678, 678, 678, 678, 678, 678, 678,
 678, 678, 678, 678, 678, 678, 678, 678, 678, 678, 678, 678, 678, 678, 678, 678,
 678, 678, 678, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U,
 ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U,
 ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, ~0U, 678,
 0
};

static yy_state_t yy_default[] = {
 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786,
 786, 786, 786, 786, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 34, 34,
 34, 34, 786, 42, 42, 42, 786, 42, 42, 42, 786, 786, 786, 786, 42, 42,
 42, 42, 38, 52, 786, 786, 786, 54, 53, 786, 786, 58, 58, 786, 61, 57,
 52, 52, 52, 42, 42, 42, 42, 42, 786, 72, 77, 77, 77, 786, 77, 77,
 77, 77, 786, 786, 42, 42, 42, 42, 42, 42, 786, 90, 95, 95, 95, 786,
 95, 95, 95, 95, 112, 786, 786, 101, 107, 107, 107, 786, 107, 107, 107, 107,
 786, 42, 42, 42, 786, 116, 786, 786, 118, 786, 786, 786, 125, 786, 786, 126,
 786, 128, 128, 786, 786, 786, 786, 786, 786, 786, 786, 138, 138, 125, 786, 786,
 786, 786, 142, 786, 786, 148, 786, 150, 150, 786, 786, 786, 786, 786, 786, 786,
 786, 160, 160, 786, 786, 163, 786, 786, 786, 123, 786, 170, 170, 786, 786, 174,
 786, 786, 176, 786, 786, 180, 786, 182, 182, 786, 786, 786, 786, 786, 786, 786,
 786, 192, 192, 786, 786, 195, 786, 786, 199, 199, 786, 122, 786, 204, 204, 786,
 786, 208, 786, 210, 210, 786, 786, 214, 786, 786, 216, 786, 786, 220, 786, 222,
 222, 786, 786, 786, 786, 786, 786, 786, 786, 232, 232, 786, 786, 235, 786, 786,
 239, 239, 786, 786, 243, 243, 786, 786, 786, 247, 786, 786, 786, 786, 786, 42,
 42, 42, 786, 786, 259, 259, 786, 786, 263, 263, 786, 786, 267, 267, 786, 786,
 271, 271, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 786, 286,
 786, 288, 288, 786, 786, 292, 292, 786, 295, 786, 297, 297, 34, 34, 786, 786,
 303, 303, 786, 786, 307, 307, 34, 786, 786, 312, 312, 786, 786, 316, 42, 42,
 42, 786, 321, 326, 326, 326, 786, 326, 326, 326, 42, 42, 42, 42, 42, 42,
 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 786, 42,
 786, 786, 369, 369, 786, 786, 373, 373, 786, 786, 377, 377, 786, 786, 381, 381,
 786, 786, 385, 385, 786, 786, 389, 389, 786, 786, 393, 393, 786, 396, 396, 786,
 786, 400, 400, 786, 786, 404, 404, 42, 42, 42, 42, 42, 42, 42, 42, 42,
 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 786, 0, 663,
 786, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 487, 490,
 490, 490, 487, 490, 490, 487, 490, 786, 490, 490, 786, 490, 490, 490, 490, 490,
 490, 490, 490, 490, 490, 487, 490, 490, 487, 487, 490, 490, 490, 490, 490, 490,
 487, 490, 490, 490, 490, 490, 490, 487, 490, 490, 490, 490, 487, 487, 490, 490,
 490, 490, 490, 490, 490, 490, 487, 490, 490, 487, 490, 487, 490, 490, 487, 490,
 490, 490, 490, 490, 490, 487, 490, 490, 487, 490, 487, 490, 490, 487, 490, 490,
 487, 490, 487, 490, 490, 490, 490, 490, 490, 487, 490, 490, 487, 490, 490, 490,
 490, 490, 487, 490, 490, 487, 490, 487, 490, 487, 490, 490, 487, 490, 490, 490,
 490, 490, 490, 490, 490, 487, 490, 490, 490, 487, 490, 487, 490, 490, 490, 490,
 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 487, 786, 490, 490, 490, 490,
 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490,
 487, 490, 490, 487, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490,
 490, 490, 490, 490, 490, 490, 464, 786, 678, 678, 678, 678, 678, 678, 678, 678,
 678, 678, 678, 678, 678, 678, 786, 678, 678, 678, 678, 678, 678, 678, 678, 678,
 678, 678, 678, 678, 678, 678, 678, 678, 678, 678, 678, 678, 678, 678, 678, 678,
 678, 678, 678, 678, 678, 678, 678, 678, 678, 678, 678, 678, 678, 678, 678, 678,
 678, 678, 678, 678, 678, 678, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786,
 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786,
 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786,
 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786, 786,
 786, 786, 0
};

static int yy_base[] = {
 0, 4112, 4112, 4112, 4112, 4112, 1953, 4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112,
 4112, 4112, 4112, 4112, 2220, 1774, 1934, 1927, 3349, 3052, 3028, 1927, 1847, 1262, 1431, 1402,
 1184, 1183, 2896, 1213, 1135, 202, 311, 4112, 4112, 4112, 208, 4112, 4112, 4112, 4112, 4112,
 4112, 4112, 221, 297, 1077, 509, 386, 233, 4112, 300, 731, 303, 301, 854, 4112, 4112,
 4112, 305, 304, 197, 162, 164, 170, 231, 1191, 4112, 4112, 4112, 4112, 1311, 4112, 4112,
 4112, 4112, 1192, 4112, 186, 201, 216, 230, 240, 308, 1425, 4112, 4112, 4112, 4112, 1545,
 4112, 4112, 4112, 4112, 1194, 1659, 4112, 4112, 4112, 4112, 4112, 1779, 4112, 4112, 4112, 4112,
 1193, 718, 700, 714, 721, 399, 1856, 2679, 4112, 2618, 2293, 1745, 362, 1996, 1277, 257,
 1924, 1241, 4112, 1063, 288, 287, 4112, 4112, 4112, 4112, 1934, 1132, 4112, 1137, 2009, 4112,
 4112, 1625, 4112, 1420, 1391, 259, 2021, 1358, 4112, 1194, 290, 289, 4112, 4112, 4112, 4112,
 2032, 1144, 4112, 2083, 1511, 4112, 4112, 4112, 4112, 262, 2096, 1709, 4112, 2251, 1866, 261,
 2131, 2229, 4112, 1654, 2106, 260, 2167, 1475, 4112, 1644, 364, 363, 4112, 4112, 4112, 4112,
 2179, 1240, 4112, 2215, 1665, 4112, 4112, 2263, 1242, 4112, 4112, 312, 2311, 1921, 4112, 2566,
 2325, 279, 2341, 1917, 4112, 2536, 2373, 274, 2389, 2524, 4112, 2473, 2403, 263, 2425, 1857,
 4112, 2437, 366, 365, 4112, 4112, 4112, 4112, 2458, 1244, 4112, 2488, 2506, 4112, 4112, 2556,
 1245, 4112, 4112, 2586, 1243, 4112, 4112, 2643, 2653, 4112, 4112, 4112, 707, 367, 4112, 723,
 732, 754, 2711, 2721, 1159, 4112, 2732, 2742, 1078, 4112, 2753, 2769, 1076, 4112, 2779, 2790,
 698, 4112, 1068, 1133, 715, 755, 1026, 1056, 1070, 1049, 1104, 1219, 1247, 1105, 2805, 1168,
 2817, 1190, 4112, 2827, 2838, 1386, 4112, 2865, 1167, 2848, 1046, 4112, 1310, 1181, 1410, 2199,
 1120, 4112, 1181, 1354, 1127, 4112, 1196, 2906, 2929, 1140, 4112, 2984, 3007, 4112, 1260, 1382,
 1202, 2966, 1326, 1313, 1515, 1309, 3043, 1453, 1248, 1311, 1406, 1367, 1383, 1322, 1473, 1335,
 1503, 1496, 1498, 1480, 1477, 1472, 1372, 1494, 1489, 1401, 1491, 1419, 1559, 1554, 1444, 1711,
 1673, 1570, 1685, 1675, 1445, 1671, 1719, 1481, 1706, 1483, 1920, 1853, 1846, 1723, 3278, 1522,
 3110, 3124, 1778, 4112, 3134, 3147, 1746, 4112, 3157, 3172, 1546, 4112, 3182, 3195, 1780, 4112,
 3206, 3220, 1747, 4112, 3231, 3243, 1590, 4112, 3253, 3268, 1483, 4112, 3291, 1902, 4112, 3301,
 3316, 1897, 4112, 3326, 3339, 1484, 4112, 1858, 1856, 1654, 1775, 1483, 1472, 1483, 1495, 1567,
 1579, 1577, 1586, 1653, 1855, 1928, 1655, 1915, 1768, 1918, 1935, 1777, 1741, 1730, 1741, 1718,
 1730, 1742, 1739, 1748, 1789, 1922, 1790, 1930, 1925, 1802, 1821, 1816, 1834, 4112, 1837, 1945,
 1838, 1905, 1955, 1918, 1830, 1841, 1849, 1845, 1851, 1828, 1915, 1854, 4112, 4112, 3406, 4112,
 3869, 2556, 2450, 2552, 2561, 2295, 3034, 2640, 2639, 2129, 2526, 2515, 4112, 2566, 3735, 2440,
 3344, 2347, 2571, 3345, 2162, 3643, 2002, 3585, 4112, 4112, 3481, 4112, 4112, 4112, 4112, 2020,
 1991, 1918, 1898, 1916, 4112, 2222, 2027, 2021, 2097, 2095, 1909, 1919, 1928, 1993, 1997, 1974,
 2224, 1993, 1987, 2002, 4112, 2126, 2115, 3350, 2088, 2059, 2096, 2095, 2611, 3007, 2008, 1996,
 2007, 2013, 1994, 2007, 2004, 2013, 2297, 2089, 2104, 3030, 2123, 3504, 2161, 2190, 3608, 2279,
 2259, 2223, 2187, 2211, 2207, 3642, 2244, 2240, 3644, 2255, 3677, 2275, 2315, 3688, 2323, 2047,
 3690, 2332, 3330, 2038, 2048, 2024, 2052, 2056, 2034, 3698, 2352, 2358, 3700, 2438, 2398, 2384,
 2382, 2397, 3702, 2404, 2424, 3710, 2433, 3725, 2435, 3733, 2449, 2495, 3750, 2060, 2048, 2101,
 2079, 2092, 2116, 2115, 2125, 3745, 2490, 2482, 2499, 3752, 2494, 3762, 2090, 2096, 2136, 4112,
 2534, 2548, 4112, 2128, 2146, 2151, 4112, 2225, 2547, 2544, 3775, 4112, 2200, 2210, 2253, 2254,
 2283, 4112, 4112, 2299, 2302, 2297, 2353, 4112, 2367, 2355, 2308, 2297, 2312, 2298, 2308, 2345,
 3802, 2357, 2370, 3818, 4112, 2825, 2411, 2386, 2389, 4112, 2430, 4112, 2438, 4112, 2517, 2474,
 2489, 4112, 2532, 2544, 2552, 4112, 4112, 3509, 2830, 2752, 2647, 2637, 2640, 2634, 2608, 2635,
 2580, 2582, 2540, 4112, 4112, 4112, 3944, 4112, 4112, 4112, 4112, 2556, 2563, 2579, 4112, 2589,
 2588, 4112, 2602, 2618, 2608, 4112, 2659, 2628, 2623, 2642, 2640, 2639, 4112, 4112, 2644, 2647,
 2641, 2697, 4112, 2639, 4112, 2823, 2693, 2694, 2696, 4112, 2698, 4112, 2737, 4112, 2796, 2744,
 2798, 4112, 2808, 2820, 2828, 4112, 3019, 3013, 2975, 2953, 2944, 2880, 2889, 2819, 2830, 4112,
 2856, 2835, 2825, 2827, 2839, 2856, 2850, 4112, 2867, 2846, 4112, 2865, 2884, 4112, 2878, 2892,
 2895, 2893, 2907, 2896, 2911, 2897, 2928, 2938, 2934, 4112, 2931, 2936, 2931, 2952, 2968, 2967,
 4112, 2956, 2954, 2980, 2972, 4112, 2987, 4112, 3004, 4112, 4112, 3005, 3021, 3015, 4112, 3025,
 3011, 4112, 4112
};



// MKS LEX prototype scanner code
// Copyright 1991 by Mortice Kern Systems Inc.
// All rights reserved.

// You can redefine YY_INTERACTIVE to be 0 to get a very slightly
// faster scanner:
#ifndef YY_INTERACTIVE
#define	YY_INTERACTIVE	1
#endif

// You can compile with -DYY_DEBUG to get a print trace of the scanner
#ifdef YY_DEBUG
#undef YY_DEBUG
#define YY_DEBUG(fmt,a1,a2)	fprintf(stderr,fmt,a1,a2)
#else
#define YY_DEBUG(fmt,a1,a2)
#endif

const MIN_NUM_STATES = 20;

// Do *NOT* redefine the following:
#define	BEGIN		yy_start =
#define	REJECT		goto yy_reject
#define	yymore()	goto yy_more


/*yyreplace.pl: moved on top: #yy_movetop #include <ctype.h> */
/*yyreplace.pl: moved on top: #yy_movetop #include "fc_todebug\fc_assert.h" */
/*yyreplace.pl: moved on top: #yy_movetop #include "fc_todebug\fc_mem.h" */
/*yyreplace.pl: moved on top: #yy_movetop #include "asm_lex.h" */
/*yyreplace.pl: moved on top: #yy_movetop #pragma warning( disable : 4068 4102 4244) */
/*yyreplace.pl: moved on top: #yy_movetop //foreward */
/*yyreplace.pl: moved on top: #yy_movetop class ASM_scanner; */


// Constructor for asm_lex_scan. Set up tables
#pragma argsused
asm_lex_scan::asm_lex_scan(int sz, char* buf, char* sv, yy_state_t* states)
{
	mustfree = 0;
	if ((size = sz) < MIN_NUM_STATES
	  || (yytext = buf) == 0
	  || (state = states) == 0) {
		yyerror("Bad space for scanner!");
		exit(1);
	}
#ifdef YY_PRESERVE
	save = sv;
#endif
}
// Constructor for asm_lex_scan. Set up tables
asm_lex_scan::asm_lex_scan(int sz)
{
	size = sz;
	yytext = new char[sz+1];	// text buffer
	state = new yy_state_t[sz+1];	// state buffer
#ifdef YY_PRESERVE
	save = new char[sz];	// saved yytext[]
	push = save + sz;
#endif
	if (yytext == NULL
#ifdef YY_PRESERVE
	  || save == NULL
#endif
	  || state == NULL) {
		yyerror("No space for scanner!");
		exit(1);
	}
	mustfree = 1;
	yy_end = 0;
	yy_start = 0;
	yy_lastc = YYNEWLINE;
	yyin = stdin;
	yyout = stdout;
	yylineno = 1;
	yyleng = 0;
}

// Descructor for asm_lex_scan
asm_lex_scan::~asm_lex_scan()
{
	if (mustfree) {
		mustfree = 0;
		delete(yytext);
		delete(state);
#ifdef YY_PRESERVE
		delete(save);
#endif
	}
}

// Print error message, showing current line number
void
asm_lex_scan::yyerror(char *fmt, ...)
{
	va_list va;

	va_start(va, fmt);
	if (yylineno)
		fprintf(stderr, "%d: ", yylineno);
	(void) vfprintf(stderr, fmt, va);
	fputc('\n', stderr);
	va_end(va);
}



// The actual lex scanner
// yy_sbuf[0:yyleng-1] contains the states corresponding to yytext.
// yytext[0:yyleng-1] contains the current token.
// yytext[yyleng:yy_end-1] contains pushed-back characters.
// When the user action routine is active,
// save contains yytext[yyleng], which is set to '\0'.
// Things are different when YY_PRESERVE is defined. 
int
asm_lex_scan::yylex()
{
	int c, i, yybase;
	unsigned  yyst;		/* state */
	int yyfmin, yyfmax;	/* yy_la_act indices of final states */
	int yyoldi, yyoleng;	/* base i, yyleng before look-ahead */
	int yyeof;		/* 1 if eof has already been read */



#ifdef YYEXIT
	yyLexFatal = 0;
#endif
	yyeof = 0;
	i = yyleng;
	YY_SCANNER();

  yy_again:
	if ((yyleng = i) > 0) {
		yy_lastc = yytext[i-1];	// determine previous char
		while (i > 0)	//	// scan previously token
			if (yytext[--i] == YYNEWLINE)	// fix yylineno
				yylineno++;
	}
	yy_end -= yyleng;		// adjust pushback
	if (yy_end > 0)
		memmove(yytext, yytext+yyleng, (size_t) yy_end);
	i = 0;

  yy_contin:
	yyoldi = i;

	/* run the state machine until it jams */
	yyst = yy_begin[yy_start + ((yy_lastc == YYNEWLINE) ? 1 : 0)];
	state[i] = (yy_state_t) yyst;
	do {
		YY_DEBUG("<state %d, i = %d>\n", yyst, i);
		if (i >= size) {
			YY_FATAL("Token buffer overflow");
#ifdef YYEXIT
			if (yyLexFatal)
				return -2;
#endif
		}	/* endif */

		/* get input char */
		if (i < yy_end)
			c = yytext[i];		/* get pushback char */
		else if (!yyeof && (c = yygetc()) != EOF) {
			yy_end = i+1;
			yytext[i] = c;
		} else /* c == EOF */ {
			c = EOF;		/* just to make sure... */
			if (i == yyoldi) {	/* no token */
				yyeof = 0;
				if (yywrap())
					return 0;
				else
					goto yy_again;
			} else {
				yyeof = 1;	/* don't re-read EOF */
				break;
			}
		}
		YY_DEBUG("<input %d = 0x%02x>\n", c, c);

		/* look up next state */
		while ((yybase = yy_base[yyst]+(unsigned char)c) > yy_nxtmax
		    || yy_check[yybase] != (yy_state_t) yyst) {
			if (yyst == yy_endst)
				goto yy_jammed;
			yyst = yy_default[yyst];
		}
		yyst = yy_next[yybase];
	  yy_jammed: ;
	     state[++i] = (yy_state_t) yyst;
	} while (!(yyst == yy_endst || YY_INTERACTIVE &&
		yy_base[yyst] > yy_nxtmax && yy_default[yyst] == yy_endst));

	YY_DEBUG("<stopped %d, i = %d>\n", yyst, i);
	if (yyst != yy_endst)
		++i;

  yy_search:
	/* search backward for a final state */
	while (--i > yyoldi) {
		yyst = state[i];
		if ((yyfmin = yy_final[yyst]) < (yyfmax = yy_final[yyst+1]))
			goto yy_found;	/* found final state(s) */
	}
	/* no match, default action */
	i = yyoldi + 1;
	output(yytext[yyoldi]);
	goto yy_again;

  yy_found:
	YY_DEBUG("<final state %d, i = %d>\n", yyst, i);
	yyoleng = i;		/* save length for REJECT */
	
	// pushback look-ahead RHS, handling trailing context
	if ((c = (int)(yy_la_act[yyfmin]>>9) - 1) >= 0) {
		unsigned char *bv = yy_look + c*YY_LA_SIZE;
		static unsigned char bits [8] = {
			1<<0, 1<<1, 1<<2, 1<<3, 1<<4, 1<<5, 1<<6, 1<<7
		};
		while (1) {
			if (--i < yyoldi) {	/* no / */
				i = yyoleng;
				break;
			}
			yyst = state[i];
			if (bv[(unsigned)yyst/8] & bits[(unsigned)yyst%8])
				break;
		}
	}

	/* perform action */
	yyleng = i;
	YY_USER();
	switch (yy_la_act[yyfmin] & 0777) {
	case 0:
	return '+';
	break;
	case 1:
	return '-';
	break;
	case 2:
	return '*';
	break;
	case 3:
	return '/';
	break;
	case 4:
	return '=';
	break;
	case 5:
	return ':';
	break;
	case 6:
	return ASM_TOK_BECOMES;
	break;
	case 7:
	return ';';
	break;
	case 8:
	return '.';
	break;
	case 9:
	return ',';
	break;
	case 10:
	return '[';
	break;
	case 11:
	return ']';
	break;
	case 12:
	return '(';
	break;
	case 13:
	return ')';
	break;
	case 14:
	return '{';
	break;
	case 15:
	return '}';
	break;
	case 16:
	return '|';
	break;
	case 17:
	return '>';
	break;
	case 18:
	return '<';
	break;
	case 19:
	return ASM_TOK_STRING_LITERAL_BEGIN;
	break;
	case 20:
	return ASM_TOK_TARGET;
	break;
	case 21:
	return ASM_TOK_FUN;
	break;
	case 22:
	return ASM_TOK_FB;
	break;
	case 23:
	return ASM_TOK_PRG;
	break;
	case 24:
	return ASM_TOK_STRUCT;
	break;
	case 25:
	return ASM_TOK_RESOURCE;
	break;
	case 26:
	return ASM_TOK_TASK;
	break;
	case 27:
	return ASM_TOK_GLOBAL;
	break;
	case 28:
	return ASM_TOK_GLOBAL_RETAIN;
	break;
	case 29:
	return ASM_TOK_CONFIG;
	break;
	case 30:
	return ASM_TOK_COPY;
	break;
	case 31:
	return ASM_TOK_CHANNELS;
	break;
	case 32:
	return ASM_TOK_CHANNEL;
	break;
	case 33:
	return ASM_TOK_END_SECTION;
	break;
	case 34:
	return ASM_TOK_CLSSID;
	break;
	case 35:
	return ASM_TOK_VAR;
	break;
	case 36:
	return ASM_TOK_IN;
	break;
	case 37:
	return ASM_TOK_INEXT;
	break;
	case 38:
	return ASM_TOK_OUT;
	break;
	case 39:
	return ASM_TOK_INOUT;
	break;
	case 40:
	return ASM_TOK_ALIGN8;
	break;
	case 41:
	return ASM_TOK_BP;
	break;
	case 42:
	return ASM_TOK_STMTBEG;
	break;
	case 43:
	return ASM_TOK_ST_INFO;
	break;
	case 44:
	return ASM_TOK_JMP;
	break;
	case 45:
	return ASM_TOK_JMPC;
	break;
	case 46:
	return ASM_TOK_JMPCN;
	break;
	case 47:
	return ASM_TOK_CALL;
	break;
	case 48:
	return ASM_TOK_READ;
	break;
	case 49:
	return ASM_TOK_WRITE;
	break;
	case 50:
	return ASM_TOK_CALOP;
	break;
	case 51:
	return ASM_TOK_LITERAL;
	break;
	case 52:
	return ASM_TOK_LITERAL;
	break;
	case 53:
	return ASM_TOK_LITERAL;
	break;
	case 54:
	return ASM_TOK_LITERAL;
	break;
	case 55:
	return ASM_TOK_LITERAL;
	break;
	case 56:
	return ASM_TOK_LITERAL;
	break;
	case 57:
	return ASM_TOK_LITERAL;
	break;
	case 58:
	return ASM_TOK_LITERAL;
	break;
	case 59:
	return ASM_TOK_LITERAL_OFFSET;
	break;
	case 60:
	return ASM_TOK_LITERAL_OBJID;
	break;
	case 61:
	return ASM_TOK_ANY_UNSIGNED;
	break;
	case 62:
	return ASM_TOK_DIRECT_VARIABLE; 
	break;
	case 63:
	return ASM_TOK_IDENTIFIER_EX; 
	break;
	case 64:
	return '\n';
	break;
	case 65:
	return -10;
	break;
	case 66:
	return ASM_TOK_SYNTAX_ERROR;
	break;


	}
	YY_SCANNER();
	i = yyleng;
	goto yy_again;			/* action fell though */

  yy_reject:
	YY_SCANNER();
	i = yyoleng;			/* restore original yytext */
	if (++yyfmin < yyfmax)
		goto yy_found;		/* another final state, same length */
	else
		goto yy_search;		/* try shorter yytext */

  yy_more:
	YY_SCANNER();
	i = yyleng;
	if (i > 0)
		yy_lastc = yytext[i-1];
	goto yy_contin;
}

/*
 * user callable input/unput functions.
 */
void
asm_lex_scan::yy_reset()
{
	YY_INIT();
	yylineno = 1;
}
/* get input char with pushback */
int
asm_lex_scan::input()
{
	int c;
#ifndef YY_PRESERVE
	if (yy_end > yyleng) {
		yy_end--;
		memmove(yytext+yyleng, yytext+yyleng+1,
			(size_t) (yy_end-yyleng));
		c = save;
		YY_USER();
#else
	if (push < save+size) {
		c = *push++;
#endif
	} else
		c = yygetc();
	yy_lastc = c;
	if (c == YYNEWLINE)
		yylineno++;
	return c;
}

/* pushback char */
int
asm_lex_scan::unput(int c)
{
#ifndef YY_PRESERVE
	if (yy_end >= size) {
		YY_FATAL("Push-back buffer overflow");
	} else {
		if (yy_end > yyleng) {
			yytext[yyleng] = save;
			memmove(yytext+yyleng+1, yytext+yyleng,
				(size_t) (yy_end-yyleng));
			yytext[yyleng] = 0;
		}
		yy_end++;
		save = c;
#else
	if (push <= save) {
		YY_FATAL("Push-back buffer overflow");
	} else {
		*--push = c;
#endif
		if (c == YYNEWLINE)
			yylineno--;
	}	/* endif */
	return c;
}







class ASM_Scanner: public asm_lex_scan
{
public:    
    const TCHAR* m_pszInput;  //string buffer as input
    unsigned long m_ulLen;    //length buffer in bytes
    unsigned long m_ulRead;   //current read position in buffer
    long          m_lOffset;  //absolute file offset of last token
    long          m_yylengOld;//size in byte of last token
	int			  m_nColumn;  //current column

    ASM_Scanner() : asm_lex_scan(ASM_MAX_TOKEN_LENGTH)
    {
        m_pszInput=NULL; 
        m_ulLen=0; 
        m_ulRead =0;
        m_lOffset = 0;
        m_yylengOld = 0;
		m_nColumn = 1;
    }
    void setStartState(int i){this->yy_start = i;}
    virtual int	yygetc()
    { 
        return m_pszInput ? (m_ulRead<m_ulLen ? m_pszInput[m_ulRead++] : EOF) : getc(yyin);
    }

    virtual void yyerror(char *fmt, ...)
    {
        //the following call are made to yyerror:
        //yyerror("Bad space for scanner!");
        //yyerror("No space for scanner!");
        //yyerror("Token buffer overflow");
        //yyerror("Push-back buffer overflow");
        //do not printf error msg now, yylex will return -2
        //as for this fatal error, the caller (in jacc file must catch 
        //this retun code and print a good err msg, usually 
        //'token to long' (the other err msgs are very unlikely
    }
};


const int TEXT_RESIZE_CHAR_COUNT = 2048;
struct ASM_ScannerStruct
{
    TCHAR* pszTextBlock;
    int    iTextBlockLen;
    int    iTextBlockSize;
	ASM_Scanner ps;
};

static void ClearTextBlock(ASM_ScannerStruct* ps)
{
    ps->iTextBlockLen = 0;

    if(ps->iTextBlockSize>0)
    {
        assert(ps->pszTextBlock);
        ps->pszTextBlock[0] = 0;
    }
}
static void AppendCharToTextBlock(ASM_ScannerStruct* ps, TCHAR c)
{
    if(ps->iTextBlockLen >= ps->iTextBlockSize)
    {
        ps->iTextBlockSize += TEXT_RESIZE_CHAR_COUNT * sizeof(TCHAR);
        size_t sizeNew = ps->iTextBlockSize;


        int bRet;    
        if(ps->pszTextBlock != NULL)
            bRet = FC_ResizeMemory((void**) &(ps->pszTextBlock), sizeNew);
        else
            bRet = FC_NewMemory((void**) &(ps->pszTextBlock), sizeNew);
        
        assert(bRet);
    }
    if(ps->pszTextBlock)
    {
        
        //convert \r\n to \n, all internal strings are \n only:
        if(c==_T('\n') && ps->iTextBlockLen>0 && ps->pszTextBlock[ps->iTextBlockLen-1]==_T('\r'))
            ps->iTextBlockLen--;
        
        ps->pszTextBlock[ps->iTextBlockLen] = c;
        ps->iTextBlockLen++;
    }
}

ASM_ScannerStruct* ASM_CreateScanner()
{
	ASM_ScannerStruct* ps = new ASM_ScannerStruct;
    assert(ps);

    //init struct members:
    ps->pszTextBlock = NULL;
    ps->iTextBlockLen = 0;
    ps->iTextBlockSize = 0;
    
    return ps;
}
void ASM_DeleteScanner(ASM_ScannerStruct* ps)
{
	if(ps->pszTextBlock)
        FC_FreeMemory(ps->pszTextBlock);

    delete(ps);
}
void ASM_SetInputString(ASM_ScannerStruct* ps, 
                        const TCHAR*            pszInput, 
                        unsigned long           ulLen)
{
    assert(pszInput !=NULL);

	ps->ps.setinput(NULL);

    ps->ps.m_pszInput = pszInput;
    ps->ps.m_ulLen = ulLen;
    
    //reset other variables for next scan:
    ps->ps.m_ulRead =0;
    ps->ps.m_lOffset = 0;
    ps->ps.m_yylengOld = 0;
	ps->ps.m_nColumn = 1;

    ps->ps.YY_INIT();
}


int ASM_NextToken(ASM_ScannerStruct* ps, 
                  const TCHAR**      pszToken, 
                  int*               pnLine,
                  int*               pnColumn)
{
    int  ntok;
    bool bFirstInLine = ps->ps.m_nColumn==1; 

    nextLine:
    //skip white space:
    do
    {
        *pnColumn = ps->ps.m_nColumn;
        ntok = ps->ps.yylex();
        ps->ps.m_lOffset += ps->ps.m_yylengOld;
        ps->ps.m_yylengOld = ps->ps.yyleng; 
        ps->ps.m_nColumn +=ps->ps.yyleng;
    }
    while(-10==ntok);

    if(ntok=='\n')
    {
        ps->ps.m_nColumn = 1;
        if(bFirstInLine)
            goto nextLine;//skip empty lines
    }

    //comment
    if(ntok==';')
    {
        ps->ps.m_lOffset += ps->ps.m_yylengOld;
        ps->ps.m_yylengOld =0;
        TCHAR c;
        do
        {
            c=ps->ps.input();ps->ps.m_yylengOld++;ps->ps.m_nColumn++;
        }
	    while(c!='\n' && c!=EOF);

        if(c=='\n')
        {
            c=ps->ps.unput(c);ps->ps.m_yylengOld--;ps->ps.m_nColumn--;
        }
        goto nextLine;
    }



    *pszToken = ps->ps.yytext;
	*pnLine   = ps->ps.yylineno;
	return ntok;
}



int  ASM_SkipIECStringLiteral(ASM_ScannerStruct*  ps, 
                              TCHAR               delim, 
                              bool                bClearBuffer)
{
    int c;

    assert(delim==_T('"') || delim==_T('\''));
   
    if(bClearBuffer)
        ClearTextBlock(ps);

    AppendCharToTextBlock(ps, delim);

    for(;;)
    {
        c = ps->ps.input();ps->ps.m_yylengOld++;ps->ps.m_nColumn++;
        
        if(c==EOF)
        {
            return 0;
        }
        else if(c==_T('$'))
        {
            AppendCharToTextBlock(ps, (TCHAR)c);
            c = ps->ps.input();ps->ps.m_yylengOld++;ps->ps.m_nColumn++;
            if(c==EOF)
                return 0;
        }
        else if(c==delim)
        {
            break;
        }
        else if(c=='\n')
        {
            ps->ps.m_nColumn = 1;        
        }
        AppendCharToTextBlock(ps, (TCHAR)c);
    }

    AppendCharToTextBlock(ps, delim);
    return 1;
}

void ASM_SkipLine(ASM_ScannerStruct* ps, bool bStore)
{
	int c;

    ps->ps.m_lOffset += ps->ps.m_yylengOld;
    ps->ps.m_yylengOld =0;

    if(bStore)
        ClearTextBlock(ps);

    do
    {
        c=ps->ps.input();ps->ps.m_yylengOld++;ps->ps.m_nColumn++;
        if(bStore)
            AppendCharToTextBlock(ps, (TCHAR)c);
    }
	while(c!='\n' && c!=EOF);

    if(c=='\n')
        c=ps->ps.unput(c);ps->ps.m_yylengOld--;ps->ps.m_nColumn--;

    if(bStore)
    {
        //cut trailing \r\n:
        if(ps->iTextBlockLen>=1 && ps->pszTextBlock[ps->iTextBlockLen-1]=='\n')
            ps->pszTextBlock[--ps->iTextBlockLen] = 0;
        if(ps->iTextBlockLen>=1 && ps->pszTextBlock[ps->iTextBlockLen-1]=='\r')
            ps->pszTextBlock[--ps->iTextBlockLen] = 0;
    }
}


bool ASM_SkipBlock(ASM_ScannerStruct* ps, bool bStore, 
                   const TCHAR* pszEnd, bool bIgnoreCase)
{
	int	         c;
	const TCHAR* cp;
    bool          ret = 1;
    

    assert(bIgnoreCase==false);//ignore case not implemented....

    if(bStore)
        ClearTextBlock(ps);
        
    ps->ps.m_lOffset += ps->ps.m_yylengOld;
    ps->ps.m_yylengOld =0;

    for (cp = pszEnd; *cp != 0; ) 
    {
        c = ps->ps.input();ps->ps.m_yylengOld++;ps->ps.m_nColumn++;

        if (c == EOF) 
        {
			ret = 0;
			break;
		}
        else if(c == _T('\n'))
        {
            ps->ps.m_nColumn = 1;
        }

        if(bStore)
            AppendCharToTextBlock(ps, (TCHAR)c);

		if (c != *cp++) 
        {
			cp = pszEnd;
			if (c == *cp)
				cp++;
		}
    }

    if(bStore && ret)
    {
        //cut the block end marker e.g. "END_NATIVE":
        int ioff = ps->iTextBlockLen - _tcslen(pszEnd);
        assert(ioff>=0);
        if(ioff>=0)
            ps->pszTextBlock[ps->iTextBlockLen - _tcslen(pszEnd)] = 0;
    }

    return  ret;
}


const TCHAR* ASM_GetSkippedTextBlock(ASM_ScannerStruct* ps)
{
    //null terminate anyway:
    AppendCharToTextBlock(ps, 0);
    assert(ps->pszTextBlock);
    return ps->pszTextBlock;
}
/*END yyreplace.pl: file asm_lex.cpp~ */
