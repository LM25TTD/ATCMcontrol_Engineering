(*
 * ATCMControl Embedded - System Library
 * ----------------------------------------------------------------------------
 *
 
 *)

CONST
    (* General function return (error) codes
     * -----------------------------------------------------------------------------------  
     *)
    OK                      : WORD := 16#0000;  (* OK, no error                             *)
    ERR_ERROR               : WORD := 16#0001;  (* General error                            *)

    (* Warnings
     *)
    ERR_TIME_OUT            : WORD := 16#0100;  (* Time out occured (communication)         *)
    ERR_NO_CONNECTION       : WORD := 16#0101;  (* No connection to OPC++ server            *)
    ERR_HANDLED             : WORD := 16#0102;  (* Command/response already handled         *)
    ERR_BREAK               : WORD := 16#0103;  (* Breakpoint reached.                      *)
    ERR_CRC                 : WORD := 16#0104;  (* Checksum calculation failed              *)
    ERR_DIVIDED             : WORD := 16#0105;  (* Data block is divided                    *)
	WRN_TRUNCATED			: WORD := 16#0106;  (* String has been truncated.				*)
	WRN_NO_MESSAGE			: WORD := 16#0107;  (* No message in queue. 					*)
	WRN_RETAIN_INVALID		: WORD := 16#0108;  (* Retain memory invalid -> Cold Start! 	*)
	WRN_TASK_HALTED 		: WORD := 16#0109;  (* Task halted immediately. 				*)
	WRN_IN_PROGRESS 		: WORD := 16#010a;  (* Process still in progress.				*)
	WRN_NOT_HANDLED 		: WORD := 16#010b;  (* Object not yet handled.					*)
	WRN_FILE_NOT_EXIST		: WORD := 16#010c;  (* File does not exist. 					*)

    (* Common error messages
     *)
    ERR_INIT                : WORD := 16#0200;  (* Initialization failed.                   *)
    ERR_INVALID_TASK        : WORD := 16#0201;  (* Invalid task number.                     *)
    ERR_INVALID_COMMAND     : WORD := 16#0202;  (* Invalid command.                         *)
    ERR_INVALID_DATA        : WORD := 16#0203;  (* Invalid data.                            *)
    ERR_INVALID_OFFSET      : WORD := 16#0204;  (* Invalid object offset received.          *)
    ERR_INVALID_INSTANCE    : WORD := 16#0205;  (* Invalid instance.                        *)
    ERR_INVALID_CLASS       : WORD := 16#0206;  (* Invalid class number.                    *)
    ERR_INVALID_DATA_SIZE   : WORD := 16#0207;  (* Invalid data size.                       *)
    ERR_QUEUE_FULL          : WORD := 16#0208;  (* Queue full.                              *)
    ERR_OUT_OF_MEMORY       : WORD := 16#0209;  (* Out of memory.                           *)
    ERR_DEBUG_MODE          : WORD := 16#020a;  (* Can't execute, not in debug mode.        *)
    ERR_LOGIN               : WORD := 16#020b;  (* Can't execute, not logged in.            *)
    ERR_NO_PROJECT          : WORD := 16#020c;  (* No project loaded.                       *)
    ERR_CRITICAL_SECTION    : WORD := 16#020d;  (* Failed to enter a critical section.      *)
    ERR_ACTIVATE_TIMER      : WORD := 16#020e;  (* Failed to activate VM timer.             *)
    ERR_WRONG_PROJECT       : WORD := 16#020f;  (* Wrong project or project version.        *)
    ERR_TO_MANY_VARS        : WORD := 16#0210;  (* To many variables for Get/SetValue       *)
    ERR_INVALID_PARAM       : WORD := 16#0211;  (* Invalid parameter.                       *)
    ERR_CREATE_QUEUE        : WORD := 16#0212;  (* Failed to create a IPC message queue.    *)
    ERR_CREATE_TIMER        : WORD := 16#0213;  (* Failed to create a VM timer object.      *)
    ERR_IPC_RECV_FAILED     : WORD := 16#0214;  (* Failed to receive a IPC message.         *)
    ERR_IPC_SEND_FAILED     : WORD := 16#0215;  (* Failed to send a IPC message.            *)
    ERR_IPC_VMM_TIMEOUT     : WORD := 16#0216;  (* Timout waiting for answer from VMM.      *)
    ERR_ALREADY_IN_DEBUG    : WORD := 16#0217;  (* Only one debug mode possible.            *)
    ERR_INVALID_SEGMENT     : WORD := 16#0218;  (* Invalid object segment.                  *)
    ERR_IO_READ             : WORD := 16#0219;  (* Error reading from comm. device.         *)
    ERR_IO_WRITE            : WORD := 16#021a;  (* Error writing to comm. device.           *)
    ERR_NOT_CONNECTED		: WORD := 16#021b;  (* Not connected.							*)
    ERR_INVALID_MSG 		: WORD := 16#021c;  (* Invalid message received.				*)
    ERR_WRITE_TO_INPUT		: WORD := 16#021d;  (* Write access to input segment.			*)
    ERR_TO_MUCH_DATA		: WORD := 16#021e;  (* To much data specified.					*)
    ERR_NOT_SUPPORTED		: WORD := 16#021f;  (* Function/Command not supported.			*)
    ERR_UNEXPECTED_MSG		: WORD := 16#0220;  (* Wrong - not fitting - response received. *)
    ERR_ERRMSG_RECEIVED 	: WORD := 16#0221;  (* Common error message received.			*)
    ERR_INVALID_QUEUE		: WORD := 16#0222;  (* An invalid message queue was given.		*)
    ERR_UNKNOWN_PRODUCT 	: WORD := 16#0223;  (* Unknown ATCMControl product ID given.		*)
    ERR_NOT_READY			: WORD := 16#0224;  (* Unable to execute command now.			*)
    ERR_INVALID_IOLAYER 	: WORD := 16#0225;  (* An invalid IO layer was given.			*)
    ERR_NOT_LICENSED		: WORD := 16#0226;  (* Feature not licensed.					*)
    ERR_INVALID_LICENSE 	: WORD := 16#0227;  (* Invalid license key received.			*)
    ERR_INVALID_PRODUCT 	: WORD := 16#0228;  (* Invalid product number received. 		*)
    ERR_NULL_POINTER		: WORD := 16#0229;  (* Null pointer as parameter.				*)
    ERR_NOT_CONFIGURED		: WORD := 16#022a;  (* Not configured.							*)

    (* Download
     *)
    ERR_INVALID_DOMAIN      : WORD := 16#0300;  (* Invalid download domain.                 *)
    ERR_INVALID_VERSION     : WORD := 16#0301;  (* Control newer than Engineering.          *)
    ERR_OVERRUN_TASK        : WORD := 16#0302;  (* Number of tasks to large                 *)
    ERR_OVERRUN_INSTANCE    : WORD := 16#0303;  (* Number of objects to large               *)
    ERR_OVERRUN_CLASS       : WORD := 16#0304;  (* Number of code blocks to large           *)
    ERR_OVERRUN_PROGRAM     : WORD := 16#0305;  (* Number of programs per task to large     *)
    ERR_OVERRUN_CODESEG     : WORD := 16#0306;  (* Code segment overr;n                     *)
    ERR_OVERRUN_OBJSEG      : WORD := 16#0307;  (* Object segment overrun                   *)
    ERR_OVERRUN_REGION      : WORD := 16#0308;  (* Number of memory regions to large        *)
    ERR_ENTRIES_MISSING     : WORD := 16#0309;  (* Not all list entries correctly received  *)
    ERR_INVALID_SEG_INIT    : WORD := 16#030a;  (* Common segment initialization not first  *)
    ERR_CREATE_TASK         : WORD := 16#0310;  (* Error creating a (VM) task or thread.    *)
    ERR_OVERRUN_COPYSEG     : WORD := 16#0311;  (* Number of copy regions to large          *)
    ERR_BUFFER_TOO_SMALL    : WORD := 16#0312;  (* Buffer for diveded data too small        *)

    (* Breakpoints
     *)
    ERR_INVALID_CODE_POS    : WORD := 16#0400;  (* Invalid code offset in BP specification  *)
    ERR_BP_NOT_FOUND        : WORD := 16#0401;  (* Given breakpoint not found in BP list    *)
    ERR_BP_LIST_FULL        : WORD := 16#0402;  (* Breakpoint list is full                  *)
    ERR_TASK_NOT_IN_BREAK   : WORD := 16#0403;  (* Task has no reached breakpoint           *)

    (* File I/O
     *)
    ERR_FILE_INIT           : WORD := 16#0500;  (* file functionality not initialized       *)
    ERR_FILE_MAX            : WORD := 16#0501;  (* maximum number of open files reached     *)
    ERR_FILE_WRONG_ID       : WORD := 16#0502;  (* File id is not valid.                    *)
    ERR_FILE_EOF            : WORD := 16#0503;  (* the end of the file has been reached     *)
    ERR_FILE_OPEN           : WORD := 16#0504;  (* Error opening a file.                    *)
    ERR_FILE_CLOSE          : WORD := 16#0505;  (* Error closing a file.                    *)
    ERR_FILE_READ           : WORD := 16#0506;  (* Error reading from file.                 *)
    ERR_FILE_WRITE          : WORD := 16#0507;  (* Error writing to file.                   *)
    ERR_FILE_SYNC           : WORD := 16#0508;  (* Temporary file closed by another process *)
    ERR_FILE_NOT_EXIST      : WORD := 16#0509;  (* File doesn't exist.                      *)
    ERR_FILE_SEEK           : WORD := 16#050a;  (* Error seeking a file.                    *)
    ERR_FILE_RENAME         : WORD := 16#050b;  (* Error renaming a file.                   *)
    ERR_FILE_REMOVE         : WORD := 16#050c;  (* Error deleting a file.                   *)
    ERR_INVALID_DRIVE       : WORD := 16#050d;  (* Invalid drive specification.             *)
    ERR_CHANGE_DRIVE        : WORD := 16#050e;  (* Error changing a drive.                  *)
    ERR_CHANGE_DIR          : WORD := 16#050f;  (* Error changing a directory               *)
    ERR_INVALID_PATH        : WORD := 16#0510;  (* Invalid path specified.                  *)
    ERR_INVALID_FILE_NAME   : WORD := 16#0511;  (* Invalid file name specified.             *)
    ERR_PATH_IS_NOT_8_3     : WORD := 16#0512;  (* Path is not in 8.3 format.               *)
    ERR_PATH_TO_LONG        : WORD := 16#0513;  (* Path is to long.                         *)
    ERR_FILE_INVALID		: WORD := 16#0514;  (* Invalid file specified.					*)
    ERR_FILE_NOT_OPEN		: WORD := 16#0515;  (* File is not open.						*)
                                           
    (* Debug Interface
     *)
    ERR_DBI_INIT            : WORD := 16#0600;  (* DBI functionality not initialized        *)
    ERR_DBI_PARAM           : WORD := 16#0601;  (* One parameter was not valid              *)
    ERR_DBI_OBJ_NOT_FOUND   : WORD := 16#0602;  (* Object not found                         *)
    ERR_DBI_FILE_FORMAT     : WORD := 16#0603;  (* A file has been wrong formatted          *)
    ERR_DBI_RETAIN_MIXED    : WORD := 16#0604;  (* Complex variable is located in retain    *)
                                                (*  and non retain segment.                 *)
    ERR_DBI_BUF_TOO_SMALL   : WORD := 16#0605;  (* Transmission buffer has been to small    *)

    (* Flash interface
     *)
    ERR_FLASH               : WORD := 16#0700;  (* Common flash error.                      *)
    ERR_FLASH_INIT          : WORD := 16#0701;  (* Error initializating flash memory.       *)
    ERR_FLASH_WRITE         : WORD := 16#0702;  (* Error writing into flash memory.         *)
    ERR_FLASH_READ          : WORD := 16#0703;  (* Error reading from flash memory.         *)
    ERR_FLASH_CLEAR         : WORD := 16#0704;  (* Error clearing th flash memory.          *)
    ERR_FLASH_WRONG_BLOCK   : WORD := 16#0705;  (* Flash block does not match.              *)

    (* Online Change
     *)
    ERR_OC_TASK_CHANGED     : WORD := 16#0800;  (* Count of tasks or attributes changed.    *)
    ERR_OC_PROJ_CHANGED     : WORD := 16#0801;  (* Project changed, OC not possible.        *)
    ERR_OC_INVALID_CODE     : WORD := 16#0802;  (* Invalid code object index received.      *)
    ERR_OC_INVALID_INST     : WORD := 16#0803;  (* Invalid instance object index received.  *)
    ERR_OC_COPY_LIST        : WORD := 16#0804;  (* Invalid instance obj. copy list received.*)
    ERR_OC_COPY_NEW         : WORD := 16#0805;  (* Invalid new instance object specified.   *)
    ERR_OC_COPY_OLD         : WORD := 16#0806;  (* Invalid old instance object specified.   *)
    ERR_OC_TO_MANY_CODE     : WORD := 16#0807;  (* To many changed code objects received.   *)
    ERR_OC_TO_MANY_INST     : WORD := 16#0808;  (* To many changed instance objects recvd.  *)
    ERR_OC_TO_MANY_CL       : WORD := 16#0809;  (* To many entries in copy list.            *)
    ERR_OC_TEMP_CODE        : WORD := 16#080a;  (* To many temporary code objects.          *)
    ERR_OC_TEMP_INST        : WORD := 16#080b;  (* To many temporary instance objects.      *)

	(* Field Bus
	 *)
    ERR_FB_INIT 			: WORD := 16#0a00;  (* Failed to initialize field bus			*)
    ERR_FB_INIT_DATA		: WORD := 16#0a01;  (* FB init. failed - inval. config data 	*)
    WRN_FB_NO_INIT_DATA 	: WORD := 16#0a02;  (* FB not initialized, no config data		*)
    ERR_FB_TERM 			: WORD := 16#0a03;  (* Error terminating FB 					*)
    ERR_FB_NOT_INITIALIZED	: WORD := 16#0a04;  (* FB is not initialized					*)
    ERR_FB_NOT_OPERATING	: WORD := 16#0a05;  (* FB is not operating						*)
    ERR_FB_UNKNOWN_FBUS 	: WORD := 16#0a06;  (* Field bus type unknown					*)
    ERR_FB_NOT_LICENSED 	: WORD := 16#0a07;  (* Given field bus type not licensed.		*)
    ERR_FB_NOT_ENABLED		: WORD := 16#0a08;  (* Given field bus is not activated.		*)

	(* BACnet
	 *)
    ERR_BAC_OBJ_NOT_INIT	: WORD := 16#0b00;  (* Object is not initialized.				*)
    ERR_BAC_OBJ_CREATE		: WORD := 16#0b01;  (* Failed to create object in BACnet stack. *)
    ERR_INVALID_PRIORITY	: WORD := 16#0b02;  (* Invalid priority value for object.		*)
    ERR_PROP_NOT_SUPPORTED	: WORD := 16#0b03;  (* Property is not supported.				*)
    ERR_SET_PROP_LOCAL		: WORD := 16#0b04;  (* Error setting local property.			*)
    ERR_SET_PROP_REMOTE 	: WORD := 16#0b05;  (* Error setting remote property.			*)
    ERR_COV_SUBSCRIBE		: WORD := 16#0b06;  (* COV subscription failed. 				*)
    ERR_CFG_FILE_NOT_FOUND	: WORD := 16#0b07;  (* Configuration file not found.			*)
    ERR_LIST_FULL			: WORD := 16#0b08;  (* Object list full.						*)
    ERR_INVALID_CONFIG		: WORD := 16#0b09;  (* Invalid configuration file.				*)
    ERR_INVALID_OBJECT_TYPE : WORD := 16#0b0a;  (* Invalid object type. 					*)
    ERR_INVALID_PROP_TYPE	: WORD := 16#0b0c;  (* Invalid property type.					*)
    ERR_INVALID_OBJECT_ID	: WORD := 16#0b0d;  (* Invalid object ID.						*)
    ERR_API_CALL_FAILED 	: WORD := 16#0b0e;  (* BACnet API call failed.					*)
    ERR_OBJ_NOT_FOUND		: WORD := 16#0b0f;  (* Object not found.						*)
    ERR_BACNET				: WORD := 16#0b10;  (* Common BACnet error. 					*)
    ERR_DEVICE_NOT_FOUND	: WORD := 16#0b11;  (* BACnet Device not found. 				*)
    ERR_GET_PROP_LOCAL		: WORD := 16#0b12;  (* Error getting local property.			*)
    ERR_GET_PROP_REMOTE 	: WORD := 16#0b13;  (* Error getting remote property.			*)
    ERR_INVALID_DATA_TYPE	: WORD := 16#0b14;  (* Invalid data type.						*)
    ERR_READ_ONLY			: WORD := 16#0b15;  (* Error Read Only. 						*)
    ERR_COV_NOT_SUPPORTED	: WORD := 16#0b16;  (* COV notifications not supported. 		*)
    ERR_NO_EVENTS			: WORD := 16#0b17;  (* No events queued.						*)
    ERR_TASK_NOT_ACTIVE 	: WORD := 16#0b18;  (* Task is not active.						*)
    ERR_DUPLICATE_OBJECT	: WORD := 16#0b19;  (* Duplicate BACnet object specified.		*)
    ERR_TOO_MANY_OBJECTS	: WORD := 16#0b1a;  (* Too many BACnet objects downloaded.		*)
    ERR_NO_LOCAL_DEVICE 	: WORD := 16#0b1b;  (* No local BACnet device defined.			*)
    ERR_STACK_NOT_INIT		: WORD := 16#0b1c;  (* BACnet stack not yet initialized.		*)
    ERR_SHUTDOWN_PENDING	: WORD := 16#0b1d;  (* BACnet stack shutdown is in progress.	*)

    WRN_BAC_OBJ_NOT_EXIST	: WORD := 16#8000;  (* BACnet object does not exist.			*)
    WRN_PROPVAL_BAD 		: WORD := 16#8001;  (* Property value is BAD.					*)
    WRN_OBJECT_BAD			: WORD := 16#8002;  (* Object is BAD.							*)
    WRN_NO_PROP_VALUE		: WORD := 16#8003;  (* No property value available (yet).		*)
    WRN_OBJ_NOT_EXIST		: WORD := 16#8004;  (* Object does not exist.					*)

	(* Profibus DP
	 *)
    ERR_MASTER_ERROR		: WORD := 16#0c00;  (* Profibus Master switch to error state.	*)
    ERR_INIT_TIMEOUT		: WORD := 16#0c01;  (* Profibus Master failed to init in time.	*)

END_CONST
